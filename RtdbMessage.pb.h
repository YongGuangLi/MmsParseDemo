// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtdbMessage.proto

#ifndef PROTOBUF_RtdbMessage_2eproto__INCLUDED
#define PROTOBUF_RtdbMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
class AlarmDataMsg;
class AlarmDataMsgDefaultTypeInternal;
extern AlarmDataMsgDefaultTypeInternal _AlarmDataMsg_default_instance_;
class AlarmMessage;
class AlarmMessageDefaultTypeInternal;
extern AlarmMessageDefaultTypeInternal _AlarmMessage_default_instance_;
class CommunicationPair;
class CommunicationPairDefaultTypeInternal;
extern CommunicationPairDefaultTypeInternal _CommunicationPair_default_instance_;
class ControlRequet;
class ControlRequetDefaultTypeInternal;
extern ControlRequetDefaultTypeInternal _ControlRequet_default_instance_;
class DebugRequest;
class DebugRequestDefaultTypeInternal;
extern DebugRequestDefaultTypeInternal _DebugRequest_default_instance_;
class FlowThreshold;
class FlowThresholdDefaultTypeInternal;
extern FlowThresholdDefaultTypeInternal _FlowThreshold_default_instance_;
class HeartBeatMessage;
class HeartBeatMessageDefaultTypeInternal;
extern HeartBeatMessageDefaultTypeInternal _HeartBeatMessage_default_instance_;
class HisLogResponse;
class HisLogResponseDefaultTypeInternal;
extern HisLogResponseDefaultTypeInternal _HisLogResponse_default_instance_;
class LogQuery;
class LogQueryDefaultTypeInternal;
extern LogQueryDefaultTypeInternal _LogQuery_default_instance_;
class LogRequest;
class LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class NetcardInfo;
class NetcardInfoDefaultTypeInternal;
extern NetcardInfoDefaultTypeInternal _NetcardInfo_default_instance_;
class NetcardInfoRequest;
class NetcardInfoRequestDefaultTypeInternal;
extern NetcardInfoRequestDefaultTypeInternal _NetcardInfoRequest_default_instance_;
class NetcardInfoResponse;
class NetcardInfoResponseDefaultTypeInternal;
extern NetcardInfoResponseDefaultTypeInternal _NetcardInfoResponse_default_instance_;
class ProcessCtrl;
class ProcessCtrlDefaultTypeInternal;
extern ProcessCtrlDefaultTypeInternal _ProcessCtrl_default_instance_;
class ProcessData;
class ProcessDataDefaultTypeInternal;
extern ProcessDataDefaultTypeInternal _ProcessData_default_instance_;
class RawMessage;
class RawMessageDefaultTypeInternal;
extern RawMessageDefaultTypeInternal _RawMessage_default_instance_;
class RealLogResponse;
class RealLogResponseDefaultTypeInternal;
extern RealLogResponseDefaultTypeInternal _RealLogResponse_default_instance_;
class RealPointValue;
class RealPointValueDefaultTypeInternal;
extern RealPointValueDefaultTypeInternal _RealPointValue_default_instance_;
class RemoteControl;
class RemoteControlDefaultTypeInternal;
extern RemoteControlDefaultTypeInternal _RemoteControl_default_instance_;
class RtdbMessage;
class RtdbMessageDefaultTypeInternal;
extern RtdbMessageDefaultTypeInternal _RtdbMessage_default_instance_;
class SOEMessage;
class SOEMessageDefaultTypeInternal;
extern SOEMessageDefaultTypeInternal _SOEMessage_default_instance_;
class UPRealPointValue;
class UPRealPointValueDefaultTypeInternal;
extern UPRealPointValueDefaultTypeInternal _UPRealPointValue_default_instance_;

namespace protobuf_RtdbMessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_RtdbMessage_2eproto

enum PointValueType {
  VTYPE_RESERVE = 0,
  VTYPE_STRING = 1,
  VTYPE_INT32 = 2,
  VTYPE_FLOAT = 3,
  VTYPE_LONG = 4,
  VTYPE_BOOL = 5,
  VTYPE_DOUBLE = 6,
  VTYPE_QUALITY = 7,
  VTYPE_TIMESTAMP = 8,
  VTYPE_UNKOWN = 9,
  PointValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PointValueType_IsValid(int value);
const PointValueType PointValueType_MIN = VTYPE_RESERVE;
const PointValueType PointValueType_MAX = VTYPE_UNKOWN;
const int PointValueType_ARRAYSIZE = PointValueType_MAX + 1;

enum RtdbMessageType {
  TYPE_LOGREQUEST = 0,
  TYPE_LOGRESPONSE = 1,
  TYPE_ALARMMESSAGE = 2,
  TYPE_HEARTBEATMESSAGE = 3,
  TYPE_CONTROLREQUEST = 4,
  TYPE_CONTROLRESPONSE = 5,
  TYPE_NETCARDINFOREQUEST = 6,
  TYPE_NETCARDINFORESPONSE = 7,
  TYPE_REALPOINT = 8,
  TYPE_COMMUNICATION = 9,
  TYPE_FLOWTHRESH = 10,
  TYPE_PROCESSDATA = 11,
  TYPE_HISLOGRESPONSE = 12,
  TYPE_HISLOGQUERY = 13,
  TYPE_UP_REALPOINTVALUE = 14,
  TYPE_ALARMDATAMSG = 15,
  TYPE_REMOTECONTROL = 16,
  RtdbMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RtdbMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RtdbMessageType_IsValid(int value);
const RtdbMessageType RtdbMessageType_MIN = TYPE_LOGREQUEST;
const RtdbMessageType RtdbMessageType_MAX = TYPE_REMOTECONTROL;
const int RtdbMessageType_ARRAYSIZE = RtdbMessageType_MAX + 1;

enum ObjectType {
  TYPE_103CLIENT = 0,
  TYPE_104CLIENT = 1,
  TYPE_MMSCLIENT = 2,
  TYPE_103SERVER = 3,
  TYPE_104SERVER = 4,
  TYPE_MMSSERVER = 5,
  TYPE_103NETWORKANALYSIS = 6,
  TYPE_104NETWORKANALYSIS = 7,
  TYPE_MMSNETWORKANALYSIS = 8,
  TYPE_GOOSENETWORKANALYSIS = 9,
  TYPE_SVNETWORKANALYSIS = 10,
  TYPE_PROCESSMANAGE = 11,
  TYPE_DISPLAYER = 12,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjectType_IsValid(int value);
const ObjectType ObjectType_MIN = TYPE_103CLIENT;
const ObjectType ObjectType_MAX = TYPE_DISPLAYER;
const int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

// ===================================================================

class RawMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:RawMessage) */ {
 public:
  RawMessage();
  virtual ~RawMessage();

  RawMessage(const RawMessage& from);

  inline RawMessage& operator=(const RawMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const RawMessage& default_instance();

  static inline const RawMessage* internal_default_instance() {
    return reinterpret_cast<const RawMessage*>(
               &_RawMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RawMessage* other);

  // implements Message ----------------------------------------------

  inline RawMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RawMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RawMessage& from);
  void MergeFrom(const RawMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string fileName = 2;
  void clear_filename();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // int32 startOffset = 3;
  void clear_startoffset();
  static const int kStartOffsetFieldNumber = 3;
  ::google::protobuf::int32 startoffset() const;
  void set_startoffset(::google::protobuf::int32 value);

  // int32 messageNumber = 4;
  void clear_messagenumber();
  static const int kMessageNumberFieldNumber = 4;
  ::google::protobuf::int32 messagenumber() const;
  void set_messagenumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RawMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 startoffset_;
  ::google::protobuf::int32 messagenumber_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:AlarmMessage) */ {
 public:
  AlarmMessage();
  virtual ~AlarmMessage();

  AlarmMessage(const AlarmMessage& from);

  inline AlarmMessage& operator=(const AlarmMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const AlarmMessage& default_instance();

  static inline const AlarmMessage* internal_default_instance() {
    return reinterpret_cast<const AlarmMessage*>(
               &_AlarmMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AlarmMessage* other);

  // implements Message ----------------------------------------------

  inline AlarmMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AlarmMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AlarmMessage& from);
  void MergeFrom(const AlarmMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlarmMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string ethName = 2;
  void clear_ethname();
  static const int kEthNameFieldNumber = 2;
  const ::std::string& ethname() const;
  void set_ethname(const ::std::string& value);
  #if LANG_CXX11
  void set_ethname(::std::string&& value);
  #endif
  void set_ethname(const char* value);
  void set_ethname(const char* value, size_t size);
  ::std::string* mutable_ethname();
  ::std::string* release_ethname();
  void set_allocated_ethname(::std::string* ethname);

  // string mac = 3;
  void clear_mac();
  static const int kMacFieldNumber = 3;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 port = 6;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 alarmId = 7;
  void clear_alarmid();
  static const int kAlarmIdFieldNumber = 7;
  ::google::protobuf::int32 alarmid() const;
  void set_alarmid(::google::protobuf::int32 value);

  // int32 alarmStatus = 8;
  void clear_alarmstatus();
  static const int kAlarmStatusFieldNumber = 8;
  ::google::protobuf::int32 alarmstatus() const;
  void set_alarmstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AlarmMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr ethname_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 alarmid_;
  ::google::protobuf::int32 alarmstatus_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:DebugRequest) */ {
 public:
  DebugRequest();
  virtual ~DebugRequest();

  DebugRequest(const DebugRequest& from);

  inline DebugRequest& operator=(const DebugRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const DebugRequest& default_instance();

  static inline const DebugRequest* internal_default_instance() {
    return reinterpret_cast<const DebugRequest*>(
               &_DebugRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DebugRequest* other);

  // implements Message ----------------------------------------------

  inline DebugRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DebugRequest& from);
  void MergeFrom(const DebugRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // int32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 quality = 4;
  void clear_quality();
  static const int kQualityFieldNumber = 4;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DebugRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SOEMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:SOEMessage) */ {
 public:
  SOEMessage();
  virtual ~SOEMessage();

  SOEMessage(const SOEMessage& from);

  inline SOEMessage& operator=(const SOEMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const SOEMessage& default_instance();

  static inline const SOEMessage* internal_default_instance() {
    return reinterpret_cast<const SOEMessage*>(
               &_SOEMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SOEMessage* other);

  // implements Message ----------------------------------------------

  inline SOEMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SOEMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SOEMessage& from);
  void MergeFrom(const SOEMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SOEMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // int32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 quality = 4;
  void clear_quality();
  static const int kQualityFieldNumber = 4;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SOEMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlRequet : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ControlRequet) */ {
 public:
  ControlRequet();
  virtual ~ControlRequet();

  ControlRequet(const ControlRequet& from);

  inline ControlRequet& operator=(const ControlRequet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ControlRequet& default_instance();

  static inline const ControlRequet* internal_default_instance() {
    return reinterpret_cast<const ControlRequet*>(
               &_ControlRequet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ControlRequet* other);

  // implements Message ----------------------------------------------

  inline ControlRequet* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlRequet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ControlRequet& from);
  void MergeFrom(const ControlRequet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlRequet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string errorInfo = 2;
  void clear_errorinfo();
  static const int kErrorInfoFieldNumber = 2;
  const ::std::string& errorinfo() const;
  void set_errorinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_errorinfo(::std::string&& value);
  #endif
  void set_errorinfo(const char* value);
  void set_errorinfo(const char* value, size_t size);
  ::std::string* mutable_errorinfo();
  ::std::string* release_errorinfo();
  void set_allocated_errorinfo(::std::string* errorinfo);

  // bool status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:ControlRequet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr errorinfo_;
  bool status_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:LogRequest) */ {
 public:
  LogRequest();
  virtual ~LogRequest();

  LogRequest(const LogRequest& from);

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const LogRequest& default_instance();

  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LogRequest* other);

  // implements Message ----------------------------------------------

  inline LogRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogRequest& from);
  void MergeFrom(const LogRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // int32 command = 2;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::int32 command_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealLogResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:RealLogResponse) */ {
 public:
  RealLogResponse();
  virtual ~RealLogResponse();

  RealLogResponse(const RealLogResponse& from);

  inline RealLogResponse& operator=(const RealLogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const RealLogResponse& default_instance();

  static inline const RealLogResponse* internal_default_instance() {
    return reinterpret_cast<const RealLogResponse*>(
               &_RealLogResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RealLogResponse* other);

  // implements Message ----------------------------------------------

  inline RealLogResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RealLogResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RealLogResponse& from);
  void MergeFrom(const RealLogResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RealLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 3;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // string devName = 4;
  void clear_devname();
  static const int kDevNameFieldNumber = 4;
  const ::std::string& devname() const;
  void set_devname(const ::std::string& value);
  #if LANG_CXX11
  void set_devname(::std::string&& value);
  #endif
  void set_devname(const char* value);
  void set_devname(const char* value, size_t size);
  ::std::string* mutable_devname();
  ::std::string* release_devname();
  void set_allocated_devname(::std::string* devname);

  // string logDetail = 6;
  void clear_logdetail();
  static const int kLogDetailFieldNumber = 6;
  const ::std::string& logdetail() const;
  void set_logdetail(const ::std::string& value);
  #if LANG_CXX11
  void set_logdetail(::std::string&& value);
  #endif
  void set_logdetail(const char* value);
  void set_logdetail(const char* value, size_t size);
  ::std::string* mutable_logdetail();
  ::std::string* release_logdetail();
  void set_allocated_logdetail(::std::string* logdetail);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // uint64 logTime = 5;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 5;
  ::google::protobuf::uint64 logtime() const;
  void set_logtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RealLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::internal::ArenaStringPtr devname_;
  ::google::protobuf::internal::ArenaStringPtr logdetail_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 logtime_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogQuery : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:LogQuery) */ {
 public:
  LogQuery();
  virtual ~LogQuery();

  LogQuery(const LogQuery& from);

  inline LogQuery& operator=(const LogQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const LogQuery& default_instance();

  static inline const LogQuery* internal_default_instance() {
    return reinterpret_cast<const LogQuery*>(
               &_LogQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(LogQuery* other);

  // implements Message ----------------------------------------------

  inline LogQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  LogQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogQuery& from);
  void MergeFrom(const LogQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 5;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 5;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // string devName = 6;
  void clear_devname();
  static const int kDevNameFieldNumber = 6;
  const ::std::string& devname() const;
  void set_devname(const ::std::string& value);
  #if LANG_CXX11
  void set_devname(::std::string&& value);
  #endif
  void set_devname(const char* value);
  void set_devname(const char* value, size_t size);
  ::std::string* mutable_devname();
  ::std::string* release_devname();
  void set_allocated_devname(::std::string* devname);

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // uint64 startTime = 3;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  ::google::protobuf::uint64 starttime() const;
  void set_starttime(::google::protobuf::uint64 value);

  // uint64 endTime = 4;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  ::google::protobuf::uint64 endtime() const;
  void set_endtime(::google::protobuf::uint64 value);

  // int32 stopQuery = 7;
  void clear_stopquery();
  static const int kStopQueryFieldNumber = 7;
  ::google::protobuf::int32 stopquery() const;
  void set_stopquery(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LogQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::internal::ArenaStringPtr devname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::int32 stopquery_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HisLogResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:HisLogResponse) */ {
 public:
  HisLogResponse();
  virtual ~HisLogResponse();

  HisLogResponse(const HisLogResponse& from);

  inline HisLogResponse& operator=(const HisLogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const HisLogResponse& default_instance();

  static inline const HisLogResponse* internal_default_instance() {
    return reinterpret_cast<const HisLogResponse*>(
               &_HisLogResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(HisLogResponse* other);

  // implements Message ----------------------------------------------

  inline HisLogResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HisLogResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HisLogResponse& from);
  void MergeFrom(const HisLogResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HisLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 3;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // string devName = 4;
  void clear_devname();
  static const int kDevNameFieldNumber = 4;
  const ::std::string& devname() const;
  void set_devname(const ::std::string& value);
  #if LANG_CXX11
  void set_devname(::std::string&& value);
  #endif
  void set_devname(const char* value);
  void set_devname(const char* value, size_t size);
  ::std::string* mutable_devname();
  ::std::string* release_devname();
  void set_allocated_devname(::std::string* devname);

  // string logDetail = 6;
  void clear_logdetail();
  static const int kLogDetailFieldNumber = 6;
  const ::std::string& logdetail() const;
  void set_logdetail(const ::std::string& value);
  #if LANG_CXX11
  void set_logdetail(::std::string&& value);
  #endif
  void set_logdetail(const char* value);
  void set_logdetail(const char* value, size_t size);
  ::std::string* mutable_logdetail();
  ::std::string* release_logdetail();
  void set_allocated_logdetail(::std::string* logdetail);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // uint64 logTime = 5;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 5;
  ::google::protobuf::uint64 logtime() const;
  void set_logtime(::google::protobuf::uint64 value);

  // int32 isEnd = 7;
  void clear_isend();
  static const int kIsEndFieldNumber = 7;
  ::google::protobuf::int32 isend() const;
  void set_isend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HisLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::internal::ArenaStringPtr devname_;
  ::google::protobuf::internal::ArenaStringPtr logdetail_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 logtime_;
  ::google::protobuf::int32 isend_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetcardInfoRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:NetcardInfoRequest) */ {
 public:
  NetcardInfoRequest();
  virtual ~NetcardInfoRequest();

  NetcardInfoRequest(const NetcardInfoRequest& from);

  inline NetcardInfoRequest& operator=(const NetcardInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetcardInfoRequest& default_instance();

  static inline const NetcardInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NetcardInfoRequest*>(
               &_NetcardInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NetcardInfoRequest* other);

  // implements Message ----------------------------------------------

  inline NetcardInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NetcardInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetcardInfoRequest& from);
  void MergeFrom(const NetcardInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetcardInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:NetcardInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetcardInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:NetcardInfo) */ {
 public:
  NetcardInfo();
  virtual ~NetcardInfo();

  NetcardInfo(const NetcardInfo& from);

  inline NetcardInfo& operator=(const NetcardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetcardInfo& default_instance();

  static inline const NetcardInfo* internal_default_instance() {
    return reinterpret_cast<const NetcardInfo*>(
               &_NetcardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(NetcardInfo* other);

  // implements Message ----------------------------------------------

  inline NetcardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NetcardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetcardInfo& from);
  void MergeFrom(const NetcardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetcardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string mac = 3;
  void clear_mac();
  static const int kMacFieldNumber = 3;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string networkType = 4;
  void clear_networktype();
  static const int kNetworkTypeFieldNumber = 4;
  const ::std::string& networktype() const;
  void set_networktype(const ::std::string& value);
  #if LANG_CXX11
  void set_networktype(::std::string&& value);
  #endif
  void set_networktype(const char* value);
  void set_networktype(const char* value, size_t size);
  ::std::string* mutable_networktype();
  ::std::string* release_networktype();
  void set_allocated_networktype(::std::string* networktype);

  // @@protoc_insertion_point(class_scope:NetcardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr networktype_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetcardInfoResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:NetcardInfoResponse) */ {
 public:
  NetcardInfoResponse();
  virtual ~NetcardInfoResponse();

  NetcardInfoResponse(const NetcardInfoResponse& from);

  inline NetcardInfoResponse& operator=(const NetcardInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetcardInfoResponse& default_instance();

  static inline const NetcardInfoResponse* internal_default_instance() {
    return reinterpret_cast<const NetcardInfoResponse*>(
               &_NetcardInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(NetcardInfoResponse* other);

  // implements Message ----------------------------------------------

  inline NetcardInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NetcardInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetcardInfoResponse& from);
  void MergeFrom(const NetcardInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetcardInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetcardInfo netCardInfo = 1;
  int netcardinfo_size() const;
  void clear_netcardinfo();
  static const int kNetCardInfoFieldNumber = 1;
  const ::NetcardInfo& netcardinfo(int index) const;
  ::NetcardInfo* mutable_netcardinfo(int index);
  ::NetcardInfo* add_netcardinfo();
  ::google::protobuf::RepeatedPtrField< ::NetcardInfo >*
      mutable_netcardinfo();
  const ::google::protobuf::RepeatedPtrField< ::NetcardInfo >&
      netcardinfo() const;

  // @@protoc_insertion_point(class_scope:NetcardInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetcardInfo > netcardinfo_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ProcessData) */ {
 public:
  ProcessData();
  virtual ~ProcessData();

  ProcessData(const ProcessData& from);

  inline ProcessData& operator=(const ProcessData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ProcessData& default_instance();

  static inline const ProcessData* internal_default_instance() {
    return reinterpret_cast<const ProcessData*>(
               &_ProcessData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ProcessData* other);

  // implements Message ----------------------------------------------

  inline ProcessData* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ProcessData& from);
  void MergeFrom(const ProcessData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string process_id = 1;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 1;
  const ::std::string& process_id() const;
  void set_process_id(const ::std::string& value);
  #if LANG_CXX11
  void set_process_id(::std::string&& value);
  #endif
  void set_process_id(const char* value);
  void set_process_id(const char* value, size_t size);
  ::std::string* mutable_process_id();
  ::std::string* release_process_id();
  void set_allocated_process_id(::std::string* process_id);

  // string process_path = 2;
  void clear_process_path();
  static const int kProcessPathFieldNumber = 2;
  const ::std::string& process_path() const;
  void set_process_path(const ::std::string& value);
  #if LANG_CXX11
  void set_process_path(::std::string&& value);
  #endif
  void set_process_path(const char* value);
  void set_process_path(const char* value, size_t size);
  ::std::string* mutable_process_path();
  ::std::string* release_process_path();
  void set_allocated_process_path(::std::string* process_path);

  // string process_name = 3;
  void clear_process_name();
  static const int kProcessNameFieldNumber = 3;
  const ::std::string& process_name() const;
  void set_process_name(const ::std::string& value);
  #if LANG_CXX11
  void set_process_name(::std::string&& value);
  #endif
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  ::std::string* mutable_process_name();
  ::std::string* release_process_name();
  void set_allocated_process_name(::std::string* process_name);

  // int32 start_time = 4;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::int32 start_time() const;
  void set_start_time(::google::protobuf::int32 value);

  // int32 process_pid = 5;
  void clear_process_pid();
  static const int kProcessPidFieldNumber = 5;
  ::google::protobuf::int32 process_pid() const;
  void set_process_pid(::google::protobuf::int32 value);

  // int32 process_status = 6;
  void clear_process_status();
  static const int kProcessStatusFieldNumber = 6;
  ::google::protobuf::int32 process_status() const;
  void set_process_status(::google::protobuf::int32 value);

  // int32 heart_beat_time = 7;
  void clear_heart_beat_time();
  static const int kHeartBeatTimeFieldNumber = 7;
  ::google::protobuf::int32 heart_beat_time() const;
  void set_heart_beat_time(::google::protobuf::int32 value);

  // float cpu_use = 8;
  void clear_cpu_use();
  static const int kCpuUseFieldNumber = 8;
  float cpu_use() const;
  void set_cpu_use(float value);

  // float ram_use = 9;
  void clear_ram_use();
  static const int kRamUseFieldNumber = 9;
  float ram_use() const;
  void set_ram_use(float value);

  // int32 restart_num = 10;
  void clear_restart_num();
  static const int kRestartNumFieldNumber = 10;
  ::google::protobuf::int32 restart_num() const;
  void set_restart_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProcessData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr process_id_;
  ::google::protobuf::internal::ArenaStringPtr process_path_;
  ::google::protobuf::internal::ArenaStringPtr process_name_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 process_pid_;
  ::google::protobuf::int32 process_status_;
  ::google::protobuf::int32 heart_beat_time_;
  float cpu_use_;
  float ram_use_;
  ::google::protobuf::int32 restart_num_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessCtrl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ProcessCtrl) */ {
 public:
  ProcessCtrl();
  virtual ~ProcessCtrl();

  ProcessCtrl(const ProcessCtrl& from);

  inline ProcessCtrl& operator=(const ProcessCtrl& from) {
    CopyFrom(from);
    return *this;
  }

  static const ProcessCtrl& default_instance();

  static inline const ProcessCtrl* internal_default_instance() {
    return reinterpret_cast<const ProcessCtrl*>(
               &_ProcessCtrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ProcessCtrl* other);

  // implements Message ----------------------------------------------

  inline ProcessCtrl* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessCtrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ProcessCtrl& from);
  void MergeFrom(const ProcessCtrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessCtrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string process_id = 1;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 1;
  const ::std::string& process_id() const;
  void set_process_id(const ::std::string& value);
  #if LANG_CXX11
  void set_process_id(::std::string&& value);
  #endif
  void set_process_id(const char* value);
  void set_process_id(const char* value, size_t size);
  ::std::string* mutable_process_id();
  ::std::string* release_process_id();
  void set_allocated_process_id(::std::string* process_id);

  // int32 command = 2;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProcessCtrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr process_id_;
  ::google::protobuf::int32 command_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealPointValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:RealPointValue) */ {
 public:
  RealPointValue();
  virtual ~RealPointValue();

  RealPointValue(const RealPointValue& from);

  inline RealPointValue& operator=(const RealPointValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const RealPointValue& default_instance();

  static inline const RealPointValue* internal_default_instance() {
    return reinterpret_cast<const RealPointValue*>(
               &_RealPointValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(RealPointValue* other);

  // implements Message ----------------------------------------------

  inline RealPointValue* New() const PROTOBUF_FINAL { return New(NULL); }

  RealPointValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RealPointValue& from);
  void MergeFrom(const RealPointValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RealPointValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // string deviceName = 2;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 2;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // string pointValue = 3;
  void clear_pointvalue();
  static const int kPointValueFieldNumber = 3;
  const ::std::string& pointvalue() const;
  void set_pointvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_pointvalue(::std::string&& value);
  #endif
  void set_pointvalue(const char* value);
  void set_pointvalue(const char* value, size_t size);
  ::std::string* mutable_pointvalue();
  ::std::string* release_pointvalue();
  void set_allocated_pointvalue(::std::string* pointvalue);

  // string pointAddr = 4;
  void clear_pointaddr();
  static const int kPointAddrFieldNumber = 4;
  const ::std::string& pointaddr() const;
  void set_pointaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_pointaddr(::std::string&& value);
  #endif
  void set_pointaddr(const char* value);
  void set_pointaddr(const char* value, size_t size);
  ::std::string* mutable_pointaddr();
  ::std::string* release_pointaddr();
  void set_allocated_pointaddr(::std::string* pointaddr);

  // .PointValueType valueType = 5;
  void clear_valuetype();
  static const int kValueTypeFieldNumber = 5;
  ::PointValueType valuetype() const;
  void set_valuetype(::PointValueType value);

  // int32 channelType = 6;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 6;
  ::google::protobuf::int32 channeltype() const;
  void set_channeltype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RealPointValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr pointvalue_;
  ::google::protobuf::internal::ArenaStringPtr pointaddr_;
  int valuetype_;
  ::google::protobuf::int32 channeltype_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:HeartBeatMessage) */ {
 public:
  HeartBeatMessage();
  virtual ~HeartBeatMessage();

  HeartBeatMessage(const HeartBeatMessage& from);

  inline HeartBeatMessage& operator=(const HeartBeatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const HeartBeatMessage& default_instance();

  static inline const HeartBeatMessage* internal_default_instance() {
    return reinterpret_cast<const HeartBeatMessage*>(
               &_HeartBeatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(HeartBeatMessage* other);

  // implements Message ----------------------------------------------

  inline HeartBeatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartBeatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HeartBeatMessage& from);
  void MergeFrom(const HeartBeatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // int32 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HeartBeatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::int32 time_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationPair : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CommunicationPair) */ {
 public:
  CommunicationPair();
  virtual ~CommunicationPair();

  CommunicationPair(const CommunicationPair& from);

  inline CommunicationPair& operator=(const CommunicationPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const CommunicationPair& default_instance();

  static inline const CommunicationPair* internal_default_instance() {
    return reinterpret_cast<const CommunicationPair*>(
               &_CommunicationPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CommunicationPair* other);

  // implements Message ----------------------------------------------

  inline CommunicationPair* New() const PROTOBUF_FINAL { return New(NULL); }

  CommunicationPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CommunicationPair& from);
  void MergeFrom(const CommunicationPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommunicationPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string source_ip = 2;
  void clear_source_ip();
  static const int kSourceIpFieldNumber = 2;
  const ::std::string& source_ip() const;
  void set_source_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_source_ip(::std::string&& value);
  #endif
  void set_source_ip(const char* value);
  void set_source_ip(const char* value, size_t size);
  ::std::string* mutable_source_ip();
  ::std::string* release_source_ip();
  void set_allocated_source_ip(::std::string* source_ip);

  // string source_mac = 3;
  void clear_source_mac();
  static const int kSourceMacFieldNumber = 3;
  const ::std::string& source_mac() const;
  void set_source_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_source_mac(::std::string&& value);
  #endif
  void set_source_mac(const char* value);
  void set_source_mac(const char* value, size_t size);
  ::std::string* mutable_source_mac();
  ::std::string* release_source_mac();
  void set_allocated_source_mac(::std::string* source_mac);

  // string dest_ip = 5;
  void clear_dest_ip();
  static const int kDestIpFieldNumber = 5;
  const ::std::string& dest_ip() const;
  void set_dest_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_ip(::std::string&& value);
  #endif
  void set_dest_ip(const char* value);
  void set_dest_ip(const char* value, size_t size);
  ::std::string* mutable_dest_ip();
  ::std::string* release_dest_ip();
  void set_allocated_dest_ip(::std::string* dest_ip);

  // string dest_mac = 6;
  void clear_dest_mac();
  static const int kDestMacFieldNumber = 6;
  const ::std::string& dest_mac() const;
  void set_dest_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_mac(::std::string&& value);
  #endif
  void set_dest_mac(const char* value);
  void set_dest_mac(const char* value, size_t size);
  ::std::string* mutable_dest_mac();
  ::std::string* release_dest_mac();
  void set_allocated_dest_mac(::std::string* dest_mac);

  // string lastTime = 9;
  void clear_lasttime();
  static const int kLastTimeFieldNumber = 9;
  const ::std::string& lasttime() const;
  void set_lasttime(const ::std::string& value);
  #if LANG_CXX11
  void set_lasttime(::std::string&& value);
  #endif
  void set_lasttime(const char* value);
  void set_lasttime(const char* value, size_t size);
  ::std::string* mutable_lasttime();
  ::std::string* release_lasttime();
  void set_allocated_lasttime(::std::string* lasttime);

  // string eth_name = 10;
  void clear_eth_name();
  static const int kEthNameFieldNumber = 10;
  const ::std::string& eth_name() const;
  void set_eth_name(const ::std::string& value);
  #if LANG_CXX11
  void set_eth_name(::std::string&& value);
  #endif
  void set_eth_name(const char* value);
  void set_eth_name(const char* value, size_t size);
  ::std::string* mutable_eth_name();
  ::std::string* release_eth_name();
  void set_allocated_eth_name(::std::string* eth_name);

  // string conn_start_time = 11;
  void clear_conn_start_time();
  static const int kConnStartTimeFieldNumber = 11;
  const ::std::string& conn_start_time() const;
  void set_conn_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_conn_start_time(::std::string&& value);
  #endif
  void set_conn_start_time(const char* value);
  void set_conn_start_time(const char* value, size_t size);
  ::std::string* mutable_conn_start_time();
  ::std::string* release_conn_start_time();
  void set_allocated_conn_start_time(::std::string* conn_start_time);

  // string conn_end_time = 12;
  void clear_conn_end_time();
  static const int kConnEndTimeFieldNumber = 12;
  const ::std::string& conn_end_time() const;
  void set_conn_end_time(const ::std::string& value);
  #if LANG_CXX11
  void set_conn_end_time(::std::string&& value);
  #endif
  void set_conn_end_time(const char* value);
  void set_conn_end_time(const char* value, size_t size);
  ::std::string* mutable_conn_end_time();
  ::std::string* release_conn_end_time();
  void set_allocated_conn_end_time(::std::string* conn_end_time);

  // string packagename = 13;
  void clear_packagename();
  static const int kPackagenameFieldNumber = 13;
  const ::std::string& packagename() const;
  void set_packagename(const ::std::string& value);
  #if LANG_CXX11
  void set_packagename(::std::string&& value);
  #endif
  void set_packagename(const char* value);
  void set_packagename(const char* value, size_t size);
  ::std::string* mutable_packagename();
  ::std::string* release_packagename();
  void set_allocated_packagename(::std::string* packagename);

  // string packageline = 14;
  void clear_packageline();
  static const int kPackagelineFieldNumber = 14;
  const ::std::string& packageline() const;
  void set_packageline(const ::std::string& value);
  #if LANG_CXX11
  void set_packageline(::std::string&& value);
  #endif
  void set_packageline(const char* value);
  void set_packageline(const char* value, size_t size);
  ::std::string* mutable_packageline();
  ::std::string* release_packageline();
  void set_allocated_packageline(::std::string* packageline);

  // int32 soure_port = 4;
  void clear_soure_port();
  static const int kSourePortFieldNumber = 4;
  ::google::protobuf::int32 soure_port() const;
  void set_soure_port(::google::protobuf::int32 value);

  // int32 dest_port = 7;
  void clear_dest_port();
  static const int kDestPortFieldNumber = 7;
  ::google::protobuf::int32 dest_port() const;
  void set_dest_port(::google::protobuf::int32 value);

  // int32 netstatus = 8;
  void clear_netstatus();
  static const int kNetstatusFieldNumber = 8;
  ::google::protobuf::int32 netstatus() const;
  void set_netstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CommunicationPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr source_ip_;
  ::google::protobuf::internal::ArenaStringPtr source_mac_;
  ::google::protobuf::internal::ArenaStringPtr dest_ip_;
  ::google::protobuf::internal::ArenaStringPtr dest_mac_;
  ::google::protobuf::internal::ArenaStringPtr lasttime_;
  ::google::protobuf::internal::ArenaStringPtr eth_name_;
  ::google::protobuf::internal::ArenaStringPtr conn_start_time_;
  ::google::protobuf::internal::ArenaStringPtr conn_end_time_;
  ::google::protobuf::internal::ArenaStringPtr packagename_;
  ::google::protobuf::internal::ArenaStringPtr packageline_;
  ::google::protobuf::int32 soure_port_;
  ::google::protobuf::int32 dest_port_;
  ::google::protobuf::int32 netstatus_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UPRealPointValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:UPRealPointValue) */ {
 public:
  UPRealPointValue();
  virtual ~UPRealPointValue();

  UPRealPointValue(const UPRealPointValue& from);

  inline UPRealPointValue& operator=(const UPRealPointValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const UPRealPointValue& default_instance();

  static inline const UPRealPointValue* internal_default_instance() {
    return reinterpret_cast<const UPRealPointValue*>(
               &_UPRealPointValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(UPRealPointValue* other);

  // implements Message ----------------------------------------------

  inline UPRealPointValue* New() const PROTOBUF_FINAL { return New(NULL); }

  UPRealPointValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UPRealPointValue& from);
  void MergeFrom(const UPRealPointValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UPRealPointValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // string deviceName = 2;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 2;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // string pointValue = 3;
  void clear_pointvalue();
  static const int kPointValueFieldNumber = 3;
  const ::std::string& pointvalue() const;
  void set_pointvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_pointvalue(::std::string&& value);
  #endif
  void set_pointvalue(const char* value);
  void set_pointvalue(const char* value, size_t size);
  ::std::string* mutable_pointvalue();
  ::std::string* release_pointvalue();
  void set_allocated_pointvalue(::std::string* pointvalue);

  // string pointAddr = 4;
  void clear_pointaddr();
  static const int kPointAddrFieldNumber = 4;
  const ::std::string& pointaddr() const;
  void set_pointaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_pointaddr(::std::string&& value);
  #endif
  void set_pointaddr(const char* value);
  void set_pointaddr(const char* value, size_t size);
  ::std::string* mutable_pointaddr();
  ::std::string* release_pointaddr();
  void set_allocated_pointaddr(::std::string* pointaddr);

  // .PointValueType valueType = 5;
  void clear_valuetype();
  static const int kValueTypeFieldNumber = 5;
  ::PointValueType valuetype() const;
  void set_valuetype(::PointValueType value);

  // int32 channelType = 6;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 6;
  ::google::protobuf::int32 channeltype() const;
  void set_channeltype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPRealPointValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr pointvalue_;
  ::google::protobuf::internal::ArenaStringPtr pointaddr_;
  int valuetype_;
  ::google::protobuf::int32 channeltype_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlowThreshold : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:FlowThreshold) */ {
 public:
  FlowThreshold();
  virtual ~FlowThreshold();

  FlowThreshold(const FlowThreshold& from);

  inline FlowThreshold& operator=(const FlowThreshold& from) {
    CopyFrom(from);
    return *this;
  }

  static const FlowThreshold& default_instance();

  static inline const FlowThreshold* internal_default_instance() {
    return reinterpret_cast<const FlowThreshold*>(
               &_FlowThreshold_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(FlowThreshold* other);

  // implements Message ----------------------------------------------

  inline FlowThreshold* New() const PROTOBUF_FINAL { return New(NULL); }

  FlowThreshold* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FlowThreshold& from);
  void MergeFrom(const FlowThreshold& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlowThreshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageCount = 1;
  void clear_messagecount();
  static const int kMessageCountFieldNumber = 1;
  const ::std::string& messagecount() const;
  void set_messagecount(const ::std::string& value);
  #if LANG_CXX11
  void set_messagecount(::std::string&& value);
  #endif
  void set_messagecount(const char* value);
  void set_messagecount(const char* value, size_t size);
  ::std::string* mutable_messagecount();
  ::std::string* release_messagecount();
  void set_allocated_messagecount(::std::string* messagecount);

  // string flowMax = 2;
  void clear_flowmax();
  static const int kFlowMaxFieldNumber = 2;
  const ::std::string& flowmax() const;
  void set_flowmax(const ::std::string& value);
  #if LANG_CXX11
  void set_flowmax(::std::string&& value);
  #endif
  void set_flowmax(const char* value);
  void set_flowmax(const char* value, size_t size);
  ::std::string* mutable_flowmax();
  ::std::string* release_flowmax();
  void set_allocated_flowmax(::std::string* flowmax);

  // string noFlowTime = 3;
  void clear_noflowtime();
  static const int kNoFlowTimeFieldNumber = 3;
  const ::std::string& noflowtime() const;
  void set_noflowtime(const ::std::string& value);
  #if LANG_CXX11
  void set_noflowtime(::std::string&& value);
  #endif
  void set_noflowtime(const char* value);
  void set_noflowtime(const char* value, size_t size);
  ::std::string* mutable_noflowtime();
  ::std::string* release_noflowtime();
  void set_allocated_noflowtime(::std::string* noflowtime);

  // string linkMax = 4;
  void clear_linkmax();
  static const int kLinkMaxFieldNumber = 4;
  const ::std::string& linkmax() const;
  void set_linkmax(const ::std::string& value);
  #if LANG_CXX11
  void set_linkmax(::std::string&& value);
  #endif
  void set_linkmax(const char* value);
  void set_linkmax(const char* value, size_t size);
  ::std::string* mutable_linkmax();
  ::std::string* release_linkmax();
  void set_allocated_linkmax(::std::string* linkmax);

  // @@protoc_insertion_point(class_scope:FlowThreshold)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messagecount_;
  ::google::protobuf::internal::ArenaStringPtr flowmax_;
  ::google::protobuf::internal::ArenaStringPtr noflowtime_;
  ::google::protobuf::internal::ArenaStringPtr linkmax_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmDataMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:AlarmDataMsg) */ {
 public:
  AlarmDataMsg();
  virtual ~AlarmDataMsg();

  AlarmDataMsg(const AlarmDataMsg& from);

  inline AlarmDataMsg& operator=(const AlarmDataMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const AlarmDataMsg& default_instance();

  static inline const AlarmDataMsg* internal_default_instance() {
    return reinterpret_cast<const AlarmDataMsg*>(
               &_AlarmDataMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AlarmDataMsg* other);

  // implements Message ----------------------------------------------

  inline AlarmDataMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  AlarmDataMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AlarmDataMsg& from);
  void MergeFrom(const AlarmDataMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlarmDataMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // bytes devicename = 5;
  void clear_devicename();
  static const int kDevicenameFieldNumber = 5;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const void* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // bytes msg = 6;
  void clear_msg();
  static const int kMsgFieldNumber = 6;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // bytes Reason = 7;
  void clear_reason();
  static const int kReasonFieldNumber = 7;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const void* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // string confirmed = 8;
  void clear_confirmed();
  static const int kConfirmedFieldNumber = 8;
  const ::std::string& confirmed() const;
  void set_confirmed(const ::std::string& value);
  #if LANG_CXX11
  void set_confirmed(::std::string&& value);
  #endif
  void set_confirmed(const char* value);
  void set_confirmed(const char* value, size_t size);
  ::std::string* mutable_confirmed();
  ::std::string* release_confirmed();
  void set_allocated_confirmed(::std::string* confirmed);

  // string filename = 9;
  void clear_filename();
  static const int kFilenameFieldNumber = 9;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AlarmDataMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr confirmed_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoteControl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:RemoteControl) */ {
 public:
  RemoteControl();
  virtual ~RemoteControl();

  RemoteControl(const RemoteControl& from);

  inline RemoteControl& operator=(const RemoteControl& from) {
    CopyFrom(from);
    return *this;
  }

  static const RemoteControl& default_instance();

  static inline const RemoteControl* internal_default_instance() {
    return reinterpret_cast<const RemoteControl*>(
               &_RemoteControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(RemoteControl* other);

  // implements Message ----------------------------------------------

  inline RemoteControl* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoteControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RemoteControl& from);
  void MergeFrom(const RemoteControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string protocolName = 1;
  void clear_protocolname();
  static const int kProtocolNameFieldNumber = 1;
  const ::std::string& protocolname() const;
  void set_protocolname(const ::std::string& value);
  #if LANG_CXX11
  void set_protocolname(::std::string&& value);
  #endif
  void set_protocolname(const char* value);
  void set_protocolname(const char* value, size_t size);
  ::std::string* mutable_protocolname();
  ::std::string* release_protocolname();
  void set_allocated_protocolname(::std::string* protocolname);

  // string timeStamp = 2;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // string srcIp = 3;
  void clear_srcip();
  static const int kSrcIpFieldNumber = 3;
  const ::std::string& srcip() const;
  void set_srcip(const ::std::string& value);
  #if LANG_CXX11
  void set_srcip(::std::string&& value);
  #endif
  void set_srcip(const char* value);
  void set_srcip(const char* value, size_t size);
  ::std::string* mutable_srcip();
  ::std::string* release_srcip();
  void set_allocated_srcip(::std::string* srcip);

  // string srcDevice = 4;
  void clear_srcdevice();
  static const int kSrcDeviceFieldNumber = 4;
  const ::std::string& srcdevice() const;
  void set_srcdevice(const ::std::string& value);
  #if LANG_CXX11
  void set_srcdevice(::std::string&& value);
  #endif
  void set_srcdevice(const char* value);
  void set_srcdevice(const char* value, size_t size);
  ::std::string* mutable_srcdevice();
  ::std::string* release_srcdevice();
  void set_allocated_srcdevice(::std::string* srcdevice);

  // string dstIp = 5;
  void clear_dstip();
  static const int kDstIpFieldNumber = 5;
  const ::std::string& dstip() const;
  void set_dstip(const ::std::string& value);
  #if LANG_CXX11
  void set_dstip(::std::string&& value);
  #endif
  void set_dstip(const char* value);
  void set_dstip(const char* value, size_t size);
  ::std::string* mutable_dstip();
  ::std::string* release_dstip();
  void set_allocated_dstip(::std::string* dstip);

  // string dstDevice = 6;
  void clear_dstdevice();
  static const int kDstDeviceFieldNumber = 6;
  const ::std::string& dstdevice() const;
  void set_dstdevice(const ::std::string& value);
  #if LANG_CXX11
  void set_dstdevice(::std::string&& value);
  #endif
  void set_dstdevice(const char* value);
  void set_dstdevice(const char* value, size_t size);
  ::std::string* mutable_dstdevice();
  ::std::string* release_dstdevice();
  void set_allocated_dstdevice(::std::string* dstdevice);

  // string iedName = 7;
  void clear_iedname();
  static const int kIedNameFieldNumber = 7;
  const ::std::string& iedname() const;
  void set_iedname(const ::std::string& value);
  #if LANG_CXX11
  void set_iedname(::std::string&& value);
  #endif
  void set_iedname(const char* value);
  void set_iedname(const char* value, size_t size);
  ::std::string* mutable_iedname();
  ::std::string* release_iedname();
  void set_allocated_iedname(::std::string* iedname);

  // string pointName = 8;
  void clear_pointname();
  static const int kPointNameFieldNumber = 8;
  const ::std::string& pointname() const;
  void set_pointname(const ::std::string& value);
  #if LANG_CXX11
  void set_pointname(::std::string&& value);
  #endif
  void set_pointname(const char* value);
  void set_pointname(const char* value, size_t size);
  ::std::string* mutable_pointname();
  ::std::string* release_pointname();
  void set_allocated_pointname(::std::string* pointname);

  // bytes pointDesc = 9;
  void clear_pointdesc();
  static const int kPointDescFieldNumber = 9;
  const ::std::string& pointdesc() const;
  void set_pointdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_pointdesc(::std::string&& value);
  #endif
  void set_pointdesc(const char* value);
  void set_pointdesc(const void* value, size_t size);
  ::std::string* mutable_pointdesc();
  ::std::string* release_pointdesc();
  void set_allocated_pointdesc(::std::string* pointdesc);

  // int32 result = 10;
  void clear_result();
  static const int kResultFieldNumber = 10;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 deviceNo = 11;
  void clear_deviceno();
  static const int kDeviceNoFieldNumber = 11;
  ::google::protobuf::int32 deviceno() const;
  void set_deviceno(::google::protobuf::int32 value);

  // int32 pointNo = 12;
  void clear_pointno();
  static const int kPointNoFieldNumber = 12;
  ::google::protobuf::int32 pointno() const;
  void set_pointno(::google::protobuf::int32 value);

  // int32 sbo = 13;
  void clear_sbo();
  static const int kSboFieldNumber = 13;
  ::google::protobuf::int32 sbo() const;
  void set_sbo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RemoteControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr protocolname_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr srcip_;
  ::google::protobuf::internal::ArenaStringPtr srcdevice_;
  ::google::protobuf::internal::ArenaStringPtr dstip_;
  ::google::protobuf::internal::ArenaStringPtr dstdevice_;
  ::google::protobuf::internal::ArenaStringPtr iedname_;
  ::google::protobuf::internal::ArenaStringPtr pointname_;
  ::google::protobuf::internal::ArenaStringPtr pointdesc_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 deviceno_;
  ::google::protobuf::int32 pointno_;
  ::google::protobuf::int32 sbo_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtdbMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:RtdbMessage) */ {
 public:
  RtdbMessage();
  virtual ~RtdbMessage();

  RtdbMessage(const RtdbMessage& from);

  inline RtdbMessage& operator=(const RtdbMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const RtdbMessage& default_instance();

  static inline const RtdbMessage* internal_default_instance() {
    return reinterpret_cast<const RtdbMessage*>(
               &_RtdbMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(RtdbMessage* other);

  // implements Message ----------------------------------------------

  inline RtdbMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RtdbMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RtdbMessage& from);
  void MergeFrom(const RtdbMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtdbMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LogRequest logRequest = 8;
  bool has_logrequest() const;
  void clear_logrequest();
  static const int kLogRequestFieldNumber = 8;
  const ::LogRequest& logrequest() const;
  ::LogRequest* mutable_logrequest();
  ::LogRequest* release_logrequest();
  void set_allocated_logrequest(::LogRequest* logrequest);

  // .RealLogResponse realLogResponse = 9;
  bool has_reallogresponse() const;
  void clear_reallogresponse();
  static const int kRealLogResponseFieldNumber = 9;
  const ::RealLogResponse& reallogresponse() const;
  ::RealLogResponse* mutable_reallogresponse();
  ::RealLogResponse* release_reallogresponse();
  void set_allocated_reallogresponse(::RealLogResponse* reallogresponse);

  // .LogQuery hisLogQuery = 10;
  bool has_hislogquery() const;
  void clear_hislogquery();
  static const int kHisLogQueryFieldNumber = 10;
  const ::LogQuery& hislogquery() const;
  ::LogQuery* mutable_hislogquery();
  ::LogQuery* release_hislogquery();
  void set_allocated_hislogquery(::LogQuery* hislogquery);

  // .HisLogResponse hisLogResponse = 11;
  bool has_hislogresponse() const;
  void clear_hislogresponse();
  static const int kHisLogResponseFieldNumber = 11;
  const ::HisLogResponse& hislogresponse() const;
  ::HisLogResponse* mutable_hislogresponse();
  ::HisLogResponse* release_hislogresponse();
  void set_allocated_hislogresponse(::HisLogResponse* hislogresponse);

  // .NetcardInfoRequest netCardInfoRequest = 12;
  bool has_netcardinforequest() const;
  void clear_netcardinforequest();
  static const int kNetCardInfoRequestFieldNumber = 12;
  const ::NetcardInfoRequest& netcardinforequest() const;
  ::NetcardInfoRequest* mutable_netcardinforequest();
  ::NetcardInfoRequest* release_netcardinforequest();
  void set_allocated_netcardinforequest(::NetcardInfoRequest* netcardinforequest);

  // .NetcardInfoResponse netCardInfoResponse = 13;
  bool has_netcardinforesponse() const;
  void clear_netcardinforesponse();
  static const int kNetCardInfoResponseFieldNumber = 13;
  const ::NetcardInfoResponse& netcardinforesponse() const;
  ::NetcardInfoResponse* mutable_netcardinforesponse();
  ::NetcardInfoResponse* release_netcardinforesponse();
  void set_allocated_netcardinforesponse(::NetcardInfoResponse* netcardinforesponse);

  // .ProcessData processData = 14;
  bool has_processdata() const;
  void clear_processdata();
  static const int kProcessDataFieldNumber = 14;
  const ::ProcessData& processdata() const;
  ::ProcessData* mutable_processdata();
  ::ProcessData* release_processdata();
  void set_allocated_processdata(::ProcessData* processdata);

  // .ProcessCtrl processCtrl = 15;
  bool has_processctrl() const;
  void clear_processctrl();
  static const int kProcessCtrlFieldNumber = 15;
  const ::ProcessCtrl& processctrl() const;
  ::ProcessCtrl* mutable_processctrl();
  ::ProcessCtrl* release_processctrl();
  void set_allocated_processctrl(::ProcessCtrl* processctrl);

  // .RealPointValue realPointValue = 16;
  bool has_realpointvalue() const;
  void clear_realpointvalue();
  static const int kRealPointValueFieldNumber = 16;
  const ::RealPointValue& realpointvalue() const;
  ::RealPointValue* mutable_realpointvalue();
  ::RealPointValue* release_realpointvalue();
  void set_allocated_realpointvalue(::RealPointValue* realpointvalue);

  // .HeartBeatMessage heartBeatMessage = 17;
  bool has_heartbeatmessage() const;
  void clear_heartbeatmessage();
  static const int kHeartBeatMessageFieldNumber = 17;
  const ::HeartBeatMessage& heartbeatmessage() const;
  ::HeartBeatMessage* mutable_heartbeatmessage();
  ::HeartBeatMessage* release_heartbeatmessage();
  void set_allocated_heartbeatmessage(::HeartBeatMessage* heartbeatmessage);

  // .AlarmMessage alarmMessage = 18;
  bool has_alarmmessage() const;
  void clear_alarmmessage();
  static const int kAlarmMessageFieldNumber = 18;
  const ::AlarmMessage& alarmmessage() const;
  ::AlarmMessage* mutable_alarmmessage();
  ::AlarmMessage* release_alarmmessage();
  void set_allocated_alarmmessage(::AlarmMessage* alarmmessage);

  // .CommunicationPair CommunicationPair = 19;
  bool has_communicationpair() const;
  void clear_communicationpair();
  static const int kCommunicationPairFieldNumber = 19;
  const ::CommunicationPair& communicationpair() const;
  ::CommunicationPair* mutable_communicationpair();
  ::CommunicationPair* release_communicationpair();
  void set_allocated_communicationpair(::CommunicationPair* communicationpair);

  // .FlowThreshold flowThreshold = 20;
  bool has_flowthreshold() const;
  void clear_flowthreshold();
  static const int kFlowThresholdFieldNumber = 20;
  const ::FlowThreshold& flowthreshold() const;
  ::FlowThreshold* mutable_flowthreshold();
  ::FlowThreshold* release_flowthreshold();
  void set_allocated_flowthreshold(::FlowThreshold* flowthreshold);

  // .AlarmDataMsg alarmDataMsg = 21;
  bool has_alarmdatamsg() const;
  void clear_alarmdatamsg();
  static const int kAlarmDataMsgFieldNumber = 21;
  const ::AlarmDataMsg& alarmdatamsg() const;
  ::AlarmDataMsg* mutable_alarmdatamsg();
  ::AlarmDataMsg* release_alarmdatamsg();
  void set_allocated_alarmdatamsg(::AlarmDataMsg* alarmdatamsg);

  // .UPRealPointValue upRealPointValue = 22;
  bool has_uprealpointvalue() const;
  void clear_uprealpointvalue();
  static const int kUpRealPointValueFieldNumber = 22;
  const ::UPRealPointValue& uprealpointvalue() const;
  ::UPRealPointValue* mutable_uprealpointvalue();
  ::UPRealPointValue* release_uprealpointvalue();
  void set_allocated_uprealpointvalue(::UPRealPointValue* uprealpointvalue);

  // .RemoteControl remoteControl = 23;
  bool has_remotecontrol() const;
  void clear_remotecontrol();
  static const int kRemoteControlFieldNumber = 23;
  const ::RemoteControl& remotecontrol() const;
  ::RemoteControl* mutable_remotecontrol();
  ::RemoteControl* release_remotecontrol();
  void set_allocated_remotecontrol(::RemoteControl* remotecontrol);

  // int32 fromObject = 1;
  void clear_fromobject();
  static const int kFromObjectFieldNumber = 1;
  ::google::protobuf::int32 fromobject() const;
  void set_fromobject(::google::protobuf::int32 value);

  // int32 toObject = 2;
  void clear_toobject();
  static const int kToObjectFieldNumber = 2;
  ::google::protobuf::int32 toobject() const;
  void set_toobject(::google::protobuf::int32 value);

  // .ObjectType fromObjectType = 3;
  void clear_fromobjecttype();
  static const int kFromObjectTypeFieldNumber = 3;
  ::ObjectType fromobjecttype() const;
  void set_fromobjecttype(::ObjectType value);

  // .ObjectType toObjectType = 4;
  void clear_toobjecttype();
  static const int kToObjectTypeFieldNumber = 4;
  ::ObjectType toobjecttype() const;
  void set_toobjecttype(::ObjectType value);

  // .RtdbMessageType messageType = 5;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 5;
  ::RtdbMessageType messagetype() const;
  void set_messagetype(::RtdbMessageType value);

  // int32 transactionId = 6;
  void clear_transactionid();
  static const int kTransactionIdFieldNumber = 6;
  ::google::protobuf::int32 transactionid() const;
  void set_transactionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RtdbMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::LogRequest* logrequest_;
  ::RealLogResponse* reallogresponse_;
  ::LogQuery* hislogquery_;
  ::HisLogResponse* hislogresponse_;
  ::NetcardInfoRequest* netcardinforequest_;
  ::NetcardInfoResponse* netcardinforesponse_;
  ::ProcessData* processdata_;
  ::ProcessCtrl* processctrl_;
  ::RealPointValue* realpointvalue_;
  ::HeartBeatMessage* heartbeatmessage_;
  ::AlarmMessage* alarmmessage_;
  ::CommunicationPair* communicationpair_;
  ::FlowThreshold* flowthreshold_;
  ::AlarmDataMsg* alarmdatamsg_;
  ::UPRealPointValue* uprealpointvalue_;
  ::RemoteControl* remotecontrol_;
  ::google::protobuf::int32 fromobject_;
  ::google::protobuf::int32 toobject_;
  int fromobjecttype_;
  int toobjecttype_;
  int messagetype_;
  ::google::protobuf::int32 transactionid_;
  mutable int _cached_size_;
  friend struct protobuf_RtdbMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RawMessage

// string data = 1;
inline void RawMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawMessage::data() const {
  // @@protoc_insertion_point(field_get:RawMessage.data)
  return data_.GetNoArena();
}
inline void RawMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RawMessage.data)
}
#if LANG_CXX11
inline void RawMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RawMessage.data)
}
#endif
inline void RawMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RawMessage.data)
}
inline void RawMessage::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RawMessage.data)
}
inline ::std::string* RawMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:RawMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawMessage::release_data() {
  // @@protoc_insertion_point(field_release:RawMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:RawMessage.data)
}

// string fileName = 2;
inline void RawMessage::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawMessage::filename() const {
  // @@protoc_insertion_point(field_get:RawMessage.fileName)
  return filename_.GetNoArena();
}
inline void RawMessage::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RawMessage.fileName)
}
#if LANG_CXX11
inline void RawMessage::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RawMessage.fileName)
}
#endif
inline void RawMessage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RawMessage.fileName)
}
inline void RawMessage::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RawMessage.fileName)
}
inline ::std::string* RawMessage::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:RawMessage.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawMessage::release_filename() {
  // @@protoc_insertion_point(field_release:RawMessage.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawMessage::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RawMessage.fileName)
}

// int32 startOffset = 3;
inline void RawMessage::clear_startoffset() {
  startoffset_ = 0;
}
inline ::google::protobuf::int32 RawMessage::startoffset() const {
  // @@protoc_insertion_point(field_get:RawMessage.startOffset)
  return startoffset_;
}
inline void RawMessage::set_startoffset(::google::protobuf::int32 value) {
  
  startoffset_ = value;
  // @@protoc_insertion_point(field_set:RawMessage.startOffset)
}

// int32 messageNumber = 4;
inline void RawMessage::clear_messagenumber() {
  messagenumber_ = 0;
}
inline ::google::protobuf::int32 RawMessage::messagenumber() const {
  // @@protoc_insertion_point(field_get:RawMessage.messageNumber)
  return messagenumber_;
}
inline void RawMessage::set_messagenumber(::google::protobuf::int32 value) {
  
  messagenumber_ = value;
  // @@protoc_insertion_point(field_set:RawMessage.messageNumber)
}

// -------------------------------------------------------------------

// AlarmMessage

// string type = 1;
inline void AlarmMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmMessage::type() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.type)
  return type_.GetNoArena();
}
inline void AlarmMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.type)
}
#if LANG_CXX11
inline void AlarmMessage::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.type)
}
#endif
inline void AlarmMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.type)
}
inline void AlarmMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.type)
}
inline ::std::string* AlarmMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmMessage::release_type() {
  // @@protoc_insertion_point(field_release:AlarmMessage.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmMessage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.type)
}

// string ethName = 2;
inline void AlarmMessage::clear_ethname() {
  ethname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmMessage::ethname() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.ethName)
  return ethname_.GetNoArena();
}
inline void AlarmMessage::set_ethname(const ::std::string& value) {
  
  ethname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.ethName)
}
#if LANG_CXX11
inline void AlarmMessage::set_ethname(::std::string&& value) {
  
  ethname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.ethName)
}
#endif
inline void AlarmMessage::set_ethname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ethname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.ethName)
}
inline void AlarmMessage::set_ethname(const char* value, size_t size) {
  
  ethname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.ethName)
}
inline ::std::string* AlarmMessage::mutable_ethname() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.ethName)
  return ethname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmMessage::release_ethname() {
  // @@protoc_insertion_point(field_release:AlarmMessage.ethName)
  
  return ethname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmMessage::set_allocated_ethname(::std::string* ethname) {
  if (ethname != NULL) {
    
  } else {
    
  }
  ethname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ethname);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.ethName)
}

// string mac = 3;
inline void AlarmMessage::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmMessage::mac() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.mac)
  return mac_.GetNoArena();
}
inline void AlarmMessage::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.mac)
}
#if LANG_CXX11
inline void AlarmMessage::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.mac)
}
#endif
inline void AlarmMessage::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.mac)
}
inline void AlarmMessage::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.mac)
}
inline ::std::string* AlarmMessage::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmMessage::release_mac() {
  // @@protoc_insertion_point(field_release:AlarmMessage.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmMessage::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.mac)
}

// string ip = 4;
inline void AlarmMessage::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmMessage::ip() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.ip)
  return ip_.GetNoArena();
}
inline void AlarmMessage::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.ip)
}
#if LANG_CXX11
inline void AlarmMessage::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.ip)
}
#endif
inline void AlarmMessage::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.ip)
}
inline void AlarmMessage::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.ip)
}
inline ::std::string* AlarmMessage::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmMessage::release_ip() {
  // @@protoc_insertion_point(field_release:AlarmMessage.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmMessage::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.ip)
}

// int32 time = 5;
inline void AlarmMessage::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 AlarmMessage::time() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.time)
  return time_;
}
inline void AlarmMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.time)
}

// int32 port = 6;
inline void AlarmMessage::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 AlarmMessage::port() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.port)
  return port_;
}
inline void AlarmMessage::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.port)
}

// int32 alarmId = 7;
inline void AlarmMessage::clear_alarmid() {
  alarmid_ = 0;
}
inline ::google::protobuf::int32 AlarmMessage::alarmid() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.alarmId)
  return alarmid_;
}
inline void AlarmMessage::set_alarmid(::google::protobuf::int32 value) {
  
  alarmid_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.alarmId)
}

// int32 alarmStatus = 8;
inline void AlarmMessage::clear_alarmstatus() {
  alarmstatus_ = 0;
}
inline ::google::protobuf::int32 AlarmMessage::alarmstatus() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.alarmStatus)
  return alarmstatus_;
}
inline void AlarmMessage::set_alarmstatus(::google::protobuf::int32 value) {
  
  alarmstatus_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.alarmStatus)
}

// -------------------------------------------------------------------

// DebugRequest

// string address = 1;
inline void DebugRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugRequest::address() const {
  // @@protoc_insertion_point(field_get:DebugRequest.address)
  return address_.GetNoArena();
}
inline void DebugRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DebugRequest.address)
}
#if LANG_CXX11
inline void DebugRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DebugRequest.address)
}
#endif
inline void DebugRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DebugRequest.address)
}
inline void DebugRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DebugRequest.address)
}
inline ::std::string* DebugRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:DebugRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugRequest::release_address() {
  // @@protoc_insertion_point(field_release:DebugRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:DebugRequest.address)
}

// int32 time = 3;
inline void DebugRequest::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 DebugRequest::time() const {
  // @@protoc_insertion_point(field_get:DebugRequest.time)
  return time_;
}
inline void DebugRequest::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:DebugRequest.time)
}

// int32 quality = 4;
inline void DebugRequest::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 DebugRequest::quality() const {
  // @@protoc_insertion_point(field_get:DebugRequest.quality)
  return quality_;
}
inline void DebugRequest::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:DebugRequest.quality)
}

// -------------------------------------------------------------------

// SOEMessage

// string address = 1;
inline void SOEMessage::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SOEMessage::address() const {
  // @@protoc_insertion_point(field_get:SOEMessage.address)
  return address_.GetNoArena();
}
inline void SOEMessage::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SOEMessage.address)
}
#if LANG_CXX11
inline void SOEMessage::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SOEMessage.address)
}
#endif
inline void SOEMessage::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SOEMessage.address)
}
inline void SOEMessage::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SOEMessage.address)
}
inline ::std::string* SOEMessage::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:SOEMessage.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SOEMessage::release_address() {
  // @@protoc_insertion_point(field_release:SOEMessage.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SOEMessage::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:SOEMessage.address)
}

// int32 time = 3;
inline void SOEMessage::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 SOEMessage::time() const {
  // @@protoc_insertion_point(field_get:SOEMessage.time)
  return time_;
}
inline void SOEMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SOEMessage.time)
}

// int32 quality = 4;
inline void SOEMessage::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 SOEMessage::quality() const {
  // @@protoc_insertion_point(field_get:SOEMessage.quality)
  return quality_;
}
inline void SOEMessage::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:SOEMessage.quality)
}

// -------------------------------------------------------------------

// ControlRequet

// string address = 1;
inline void ControlRequet::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlRequet::address() const {
  // @@protoc_insertion_point(field_get:ControlRequet.address)
  return address_.GetNoArena();
}
inline void ControlRequet::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ControlRequet.address)
}
#if LANG_CXX11
inline void ControlRequet::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ControlRequet.address)
}
#endif
inline void ControlRequet::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ControlRequet.address)
}
inline void ControlRequet::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ControlRequet.address)
}
inline ::std::string* ControlRequet::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ControlRequet.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlRequet::release_address() {
  // @@protoc_insertion_point(field_release:ControlRequet.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlRequet::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ControlRequet.address)
}

// string errorInfo = 2;
inline void ControlRequet::clear_errorinfo() {
  errorinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlRequet::errorinfo() const {
  // @@protoc_insertion_point(field_get:ControlRequet.errorInfo)
  return errorinfo_.GetNoArena();
}
inline void ControlRequet::set_errorinfo(const ::std::string& value) {
  
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ControlRequet.errorInfo)
}
#if LANG_CXX11
inline void ControlRequet::set_errorinfo(::std::string&& value) {
  
  errorinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ControlRequet.errorInfo)
}
#endif
inline void ControlRequet::set_errorinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ControlRequet.errorInfo)
}
inline void ControlRequet::set_errorinfo(const char* value, size_t size) {
  
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ControlRequet.errorInfo)
}
inline ::std::string* ControlRequet::mutable_errorinfo() {
  
  // @@protoc_insertion_point(field_mutable:ControlRequet.errorInfo)
  return errorinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlRequet::release_errorinfo() {
  // @@protoc_insertion_point(field_release:ControlRequet.errorInfo)
  
  return errorinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlRequet::set_allocated_errorinfo(::std::string* errorinfo) {
  if (errorinfo != NULL) {
    
  } else {
    
  }
  errorinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorinfo);
  // @@protoc_insertion_point(field_set_allocated:ControlRequet.errorInfo)
}

// bool status = 3;
inline void ControlRequet::clear_status() {
  status_ = false;
}
inline bool ControlRequet::status() const {
  // @@protoc_insertion_point(field_get:ControlRequet.status)
  return status_;
}
inline void ControlRequet::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ControlRequet.status)
}

// -------------------------------------------------------------------

// LogRequest

// string channelName = 1;
inline void LogRequest::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRequest::channelname() const {
  // @@protoc_insertion_point(field_get:LogRequest.channelName)
  return channelname_.GetNoArena();
}
inline void LogRequest::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogRequest.channelName)
}
#if LANG_CXX11
inline void LogRequest::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogRequest.channelName)
}
#endif
inline void LogRequest::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogRequest.channelName)
}
inline void LogRequest::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogRequest.channelName)
}
inline ::std::string* LogRequest::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:LogRequest.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRequest::release_channelname() {
  // @@protoc_insertion_point(field_release:LogRequest.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRequest::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:LogRequest.channelName)
}

// int32 command = 2;
inline void LogRequest::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 LogRequest::command() const {
  // @@protoc_insertion_point(field_get:LogRequest.command)
  return command_;
}
inline void LogRequest::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:LogRequest.command)
}

// -------------------------------------------------------------------

// RealLogResponse

// int32 type = 1;
inline void RealLogResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 RealLogResponse::type() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.type)
  return type_;
}
inline void RealLogResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:RealLogResponse.type)
}

// int32 level = 2;
inline void RealLogResponse::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 RealLogResponse::level() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.level)
  return level_;
}
inline void RealLogResponse::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:RealLogResponse.level)
}

// string channelName = 3;
inline void RealLogResponse::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealLogResponse::channelname() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.channelName)
  return channelname_.GetNoArena();
}
inline void RealLogResponse::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealLogResponse.channelName)
}
#if LANG_CXX11
inline void RealLogResponse::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealLogResponse.channelName)
}
#endif
inline void RealLogResponse::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealLogResponse.channelName)
}
inline void RealLogResponse::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealLogResponse.channelName)
}
inline ::std::string* RealLogResponse::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:RealLogResponse.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealLogResponse::release_channelname() {
  // @@protoc_insertion_point(field_release:RealLogResponse.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealLogResponse::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:RealLogResponse.channelName)
}

// string devName = 4;
inline void RealLogResponse::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealLogResponse::devname() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.devName)
  return devname_.GetNoArena();
}
inline void RealLogResponse::set_devname(const ::std::string& value) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealLogResponse.devName)
}
#if LANG_CXX11
inline void RealLogResponse::set_devname(::std::string&& value) {
  
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealLogResponse.devName)
}
#endif
inline void RealLogResponse::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealLogResponse.devName)
}
inline void RealLogResponse::set_devname(const char* value, size_t size) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealLogResponse.devName)
}
inline ::std::string* RealLogResponse::mutable_devname() {
  
  // @@protoc_insertion_point(field_mutable:RealLogResponse.devName)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealLogResponse::release_devname() {
  // @@protoc_insertion_point(field_release:RealLogResponse.devName)
  
  return devname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealLogResponse::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    
  } else {
    
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:RealLogResponse.devName)
}

// uint64 logTime = 5;
inline void RealLogResponse::clear_logtime() {
  logtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RealLogResponse::logtime() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.logTime)
  return logtime_;
}
inline void RealLogResponse::set_logtime(::google::protobuf::uint64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:RealLogResponse.logTime)
}

// string logDetail = 6;
inline void RealLogResponse::clear_logdetail() {
  logdetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealLogResponse::logdetail() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.logDetail)
  return logdetail_.GetNoArena();
}
inline void RealLogResponse::set_logdetail(const ::std::string& value) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealLogResponse.logDetail)
}
#if LANG_CXX11
inline void RealLogResponse::set_logdetail(::std::string&& value) {
  
  logdetail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealLogResponse.logDetail)
}
#endif
inline void RealLogResponse::set_logdetail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealLogResponse.logDetail)
}
inline void RealLogResponse::set_logdetail(const char* value, size_t size) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealLogResponse.logDetail)
}
inline ::std::string* RealLogResponse::mutable_logdetail() {
  
  // @@protoc_insertion_point(field_mutable:RealLogResponse.logDetail)
  return logdetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealLogResponse::release_logdetail() {
  // @@protoc_insertion_point(field_release:RealLogResponse.logDetail)
  
  return logdetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealLogResponse::set_allocated_logdetail(::std::string* logdetail) {
  if (logdetail != NULL) {
    
  } else {
    
  }
  logdetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logdetail);
  // @@protoc_insertion_point(field_set_allocated:RealLogResponse.logDetail)
}

// -------------------------------------------------------------------

// LogQuery

// int32 level = 1;
inline void LogQuery::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 LogQuery::level() const {
  // @@protoc_insertion_point(field_get:LogQuery.level)
  return level_;
}
inline void LogQuery::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.level)
}

// int32 type = 2;
inline void LogQuery::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 LogQuery::type() const {
  // @@protoc_insertion_point(field_get:LogQuery.type)
  return type_;
}
inline void LogQuery::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.type)
}

// uint64 startTime = 3;
inline void LogQuery::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogQuery::starttime() const {
  // @@protoc_insertion_point(field_get:LogQuery.startTime)
  return starttime_;
}
inline void LogQuery::set_starttime(::google::protobuf::uint64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.startTime)
}

// uint64 endTime = 4;
inline void LogQuery::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogQuery::endtime() const {
  // @@protoc_insertion_point(field_get:LogQuery.endTime)
  return endtime_;
}
inline void LogQuery::set_endtime(::google::protobuf::uint64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.endTime)
}

// string channelName = 5;
inline void LogQuery::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogQuery::channelname() const {
  // @@protoc_insertion_point(field_get:LogQuery.channelName)
  return channelname_.GetNoArena();
}
inline void LogQuery::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogQuery.channelName)
}
#if LANG_CXX11
inline void LogQuery::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogQuery.channelName)
}
#endif
inline void LogQuery::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogQuery.channelName)
}
inline void LogQuery::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogQuery.channelName)
}
inline ::std::string* LogQuery::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:LogQuery.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogQuery::release_channelname() {
  // @@protoc_insertion_point(field_release:LogQuery.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogQuery::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:LogQuery.channelName)
}

// string devName = 6;
inline void LogQuery::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogQuery::devname() const {
  // @@protoc_insertion_point(field_get:LogQuery.devName)
  return devname_.GetNoArena();
}
inline void LogQuery::set_devname(const ::std::string& value) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogQuery.devName)
}
#if LANG_CXX11
inline void LogQuery::set_devname(::std::string&& value) {
  
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogQuery.devName)
}
#endif
inline void LogQuery::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogQuery.devName)
}
inline void LogQuery::set_devname(const char* value, size_t size) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogQuery.devName)
}
inline ::std::string* LogQuery::mutable_devname() {
  
  // @@protoc_insertion_point(field_mutable:LogQuery.devName)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogQuery::release_devname() {
  // @@protoc_insertion_point(field_release:LogQuery.devName)
  
  return devname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogQuery::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    
  } else {
    
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:LogQuery.devName)
}

// int32 stopQuery = 7;
inline void LogQuery::clear_stopquery() {
  stopquery_ = 0;
}
inline ::google::protobuf::int32 LogQuery::stopquery() const {
  // @@protoc_insertion_point(field_get:LogQuery.stopQuery)
  return stopquery_;
}
inline void LogQuery::set_stopquery(::google::protobuf::int32 value) {
  
  stopquery_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.stopQuery)
}

// -------------------------------------------------------------------

// HisLogResponse

// int32 type = 1;
inline void HisLogResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 HisLogResponse::type() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.type)
  return type_;
}
inline void HisLogResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.type)
}

// int32 level = 2;
inline void HisLogResponse::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 HisLogResponse::level() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.level)
  return level_;
}
inline void HisLogResponse::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.level)
}

// string channelName = 3;
inline void HisLogResponse::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HisLogResponse::channelname() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.channelName)
  return channelname_.GetNoArena();
}
inline void HisLogResponse::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HisLogResponse.channelName)
}
#if LANG_CXX11
inline void HisLogResponse::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HisLogResponse.channelName)
}
#endif
inline void HisLogResponse::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HisLogResponse.channelName)
}
inline void HisLogResponse::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HisLogResponse.channelName)
}
inline ::std::string* HisLogResponse::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:HisLogResponse.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HisLogResponse::release_channelname() {
  // @@protoc_insertion_point(field_release:HisLogResponse.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HisLogResponse::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:HisLogResponse.channelName)
}

// string devName = 4;
inline void HisLogResponse::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HisLogResponse::devname() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.devName)
  return devname_.GetNoArena();
}
inline void HisLogResponse::set_devname(const ::std::string& value) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HisLogResponse.devName)
}
#if LANG_CXX11
inline void HisLogResponse::set_devname(::std::string&& value) {
  
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HisLogResponse.devName)
}
#endif
inline void HisLogResponse::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HisLogResponse.devName)
}
inline void HisLogResponse::set_devname(const char* value, size_t size) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HisLogResponse.devName)
}
inline ::std::string* HisLogResponse::mutable_devname() {
  
  // @@protoc_insertion_point(field_mutable:HisLogResponse.devName)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HisLogResponse::release_devname() {
  // @@protoc_insertion_point(field_release:HisLogResponse.devName)
  
  return devname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HisLogResponse::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    
  } else {
    
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:HisLogResponse.devName)
}

// uint64 logTime = 5;
inline void HisLogResponse::clear_logtime() {
  logtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HisLogResponse::logtime() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.logTime)
  return logtime_;
}
inline void HisLogResponse::set_logtime(::google::protobuf::uint64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.logTime)
}

// string logDetail = 6;
inline void HisLogResponse::clear_logdetail() {
  logdetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HisLogResponse::logdetail() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.logDetail)
  return logdetail_.GetNoArena();
}
inline void HisLogResponse::set_logdetail(const ::std::string& value) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HisLogResponse.logDetail)
}
#if LANG_CXX11
inline void HisLogResponse::set_logdetail(::std::string&& value) {
  
  logdetail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HisLogResponse.logDetail)
}
#endif
inline void HisLogResponse::set_logdetail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HisLogResponse.logDetail)
}
inline void HisLogResponse::set_logdetail(const char* value, size_t size) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HisLogResponse.logDetail)
}
inline ::std::string* HisLogResponse::mutable_logdetail() {
  
  // @@protoc_insertion_point(field_mutable:HisLogResponse.logDetail)
  return logdetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HisLogResponse::release_logdetail() {
  // @@protoc_insertion_point(field_release:HisLogResponse.logDetail)
  
  return logdetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HisLogResponse::set_allocated_logdetail(::std::string* logdetail) {
  if (logdetail != NULL) {
    
  } else {
    
  }
  logdetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logdetail);
  // @@protoc_insertion_point(field_set_allocated:HisLogResponse.logDetail)
}

// int32 isEnd = 7;
inline void HisLogResponse::clear_isend() {
  isend_ = 0;
}
inline ::google::protobuf::int32 HisLogResponse::isend() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.isEnd)
  return isend_;
}
inline void HisLogResponse::set_isend(::google::protobuf::int32 value) {
  
  isend_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.isEnd)
}

// -------------------------------------------------------------------

// NetcardInfoRequest

// string value = 1;
inline void NetcardInfoRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetcardInfoRequest::value() const {
  // @@protoc_insertion_point(field_get:NetcardInfoRequest.value)
  return value_.GetNoArena();
}
inline void NetcardInfoRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfoRequest.value)
}
#if LANG_CXX11
inline void NetcardInfoRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfoRequest.value)
}
#endif
inline void NetcardInfoRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfoRequest.value)
}
inline void NetcardInfoRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfoRequest.value)
}
inline ::std::string* NetcardInfoRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfoRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetcardInfoRequest::release_value() {
  // @@protoc_insertion_point(field_release:NetcardInfoRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetcardInfoRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfoRequest.value)
}

// -------------------------------------------------------------------

// NetcardInfo

// string name = 1;
inline void NetcardInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetcardInfo::name() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.name)
  return name_.GetNoArena();
}
inline void NetcardInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.name)
}
#if LANG_CXX11
inline void NetcardInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.name)
}
#endif
inline void NetcardInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.name)
}
inline void NetcardInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.name)
}
inline ::std::string* NetcardInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetcardInfo::release_name() {
  // @@protoc_insertion_point(field_release:NetcardInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetcardInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.name)
}

// string ip = 2;
inline void NetcardInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetcardInfo::ip() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.ip)
  return ip_.GetNoArena();
}
inline void NetcardInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.ip)
}
#if LANG_CXX11
inline void NetcardInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.ip)
}
#endif
inline void NetcardInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.ip)
}
inline void NetcardInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.ip)
}
inline ::std::string* NetcardInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetcardInfo::release_ip() {
  // @@protoc_insertion_point(field_release:NetcardInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetcardInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.ip)
}

// string mac = 3;
inline void NetcardInfo::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetcardInfo::mac() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.mac)
  return mac_.GetNoArena();
}
inline void NetcardInfo::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.mac)
}
#if LANG_CXX11
inline void NetcardInfo::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.mac)
}
#endif
inline void NetcardInfo::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.mac)
}
inline void NetcardInfo::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.mac)
}
inline ::std::string* NetcardInfo::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetcardInfo::release_mac() {
  // @@protoc_insertion_point(field_release:NetcardInfo.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetcardInfo::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.mac)
}

// string networkType = 4;
inline void NetcardInfo::clear_networktype() {
  networktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetcardInfo::networktype() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.networkType)
  return networktype_.GetNoArena();
}
inline void NetcardInfo::set_networktype(const ::std::string& value) {
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.networkType)
}
#if LANG_CXX11
inline void NetcardInfo::set_networktype(::std::string&& value) {
  
  networktype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.networkType)
}
#endif
inline void NetcardInfo::set_networktype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.networkType)
}
inline void NetcardInfo::set_networktype(const char* value, size_t size) {
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.networkType)
}
inline ::std::string* NetcardInfo::mutable_networktype() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.networkType)
  return networktype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetcardInfo::release_networktype() {
  // @@protoc_insertion_point(field_release:NetcardInfo.networkType)
  
  return networktype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetcardInfo::set_allocated_networktype(::std::string* networktype) {
  if (networktype != NULL) {
    
  } else {
    
  }
  networktype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networktype);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.networkType)
}

// -------------------------------------------------------------------

// NetcardInfoResponse

// repeated .NetcardInfo netCardInfo = 1;
inline int NetcardInfoResponse::netcardinfo_size() const {
  return netcardinfo_.size();
}
inline void NetcardInfoResponse::clear_netcardinfo() {
  netcardinfo_.Clear();
}
inline const ::NetcardInfo& NetcardInfoResponse::netcardinfo(int index) const {
  // @@protoc_insertion_point(field_get:NetcardInfoResponse.netCardInfo)
  return netcardinfo_.Get(index);
}
inline ::NetcardInfo* NetcardInfoResponse::mutable_netcardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetcardInfoResponse.netCardInfo)
  return netcardinfo_.Mutable(index);
}
inline ::NetcardInfo* NetcardInfoResponse::add_netcardinfo() {
  // @@protoc_insertion_point(field_add:NetcardInfoResponse.netCardInfo)
  return netcardinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetcardInfo >*
NetcardInfoResponse::mutable_netcardinfo() {
  // @@protoc_insertion_point(field_mutable_list:NetcardInfoResponse.netCardInfo)
  return &netcardinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetcardInfo >&
NetcardInfoResponse::netcardinfo() const {
  // @@protoc_insertion_point(field_list:NetcardInfoResponse.netCardInfo)
  return netcardinfo_;
}

// -------------------------------------------------------------------

// ProcessData

// string process_id = 1;
inline void ProcessData::clear_process_id() {
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessData::process_id() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_id)
  return process_id_.GetNoArena();
}
inline void ProcessData::set_process_id(const ::std::string& value) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessData.process_id)
}
#if LANG_CXX11
inline void ProcessData::set_process_id(::std::string&& value) {
  
  process_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessData.process_id)
}
#endif
inline void ProcessData::set_process_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessData.process_id)
}
inline void ProcessData::set_process_id(const char* value, size_t size) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessData.process_id)
}
inline ::std::string* ProcessData::mutable_process_id() {
  
  // @@protoc_insertion_point(field_mutable:ProcessData.process_id)
  return process_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessData::release_process_id() {
  // @@protoc_insertion_point(field_release:ProcessData.process_id)
  
  return process_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessData::set_allocated_process_id(::std::string* process_id) {
  if (process_id != NULL) {
    
  } else {
    
  }
  process_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_id);
  // @@protoc_insertion_point(field_set_allocated:ProcessData.process_id)
}

// string process_path = 2;
inline void ProcessData::clear_process_path() {
  process_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessData::process_path() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_path)
  return process_path_.GetNoArena();
}
inline void ProcessData::set_process_path(const ::std::string& value) {
  
  process_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessData.process_path)
}
#if LANG_CXX11
inline void ProcessData::set_process_path(::std::string&& value) {
  
  process_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessData.process_path)
}
#endif
inline void ProcessData::set_process_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessData.process_path)
}
inline void ProcessData::set_process_path(const char* value, size_t size) {
  
  process_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessData.process_path)
}
inline ::std::string* ProcessData::mutable_process_path() {
  
  // @@protoc_insertion_point(field_mutable:ProcessData.process_path)
  return process_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessData::release_process_path() {
  // @@protoc_insertion_point(field_release:ProcessData.process_path)
  
  return process_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessData::set_allocated_process_path(::std::string* process_path) {
  if (process_path != NULL) {
    
  } else {
    
  }
  process_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_path);
  // @@protoc_insertion_point(field_set_allocated:ProcessData.process_path)
}

// string process_name = 3;
inline void ProcessData::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessData::process_name() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_name)
  return process_name_.GetNoArena();
}
inline void ProcessData::set_process_name(const ::std::string& value) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessData.process_name)
}
#if LANG_CXX11
inline void ProcessData::set_process_name(::std::string&& value) {
  
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessData.process_name)
}
#endif
inline void ProcessData::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessData.process_name)
}
inline void ProcessData::set_process_name(const char* value, size_t size) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessData.process_name)
}
inline ::std::string* ProcessData::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:ProcessData.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessData::release_process_name() {
  // @@protoc_insertion_point(field_release:ProcessData.process_name)
  
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessData::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:ProcessData.process_name)
}

// int32 start_time = 4;
inline void ProcessData::clear_start_time() {
  start_time_ = 0;
}
inline ::google::protobuf::int32 ProcessData::start_time() const {
  // @@protoc_insertion_point(field_get:ProcessData.start_time)
  return start_time_;
}
inline void ProcessData::set_start_time(::google::protobuf::int32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.start_time)
}

// int32 process_pid = 5;
inline void ProcessData::clear_process_pid() {
  process_pid_ = 0;
}
inline ::google::protobuf::int32 ProcessData::process_pid() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_pid)
  return process_pid_;
}
inline void ProcessData::set_process_pid(::google::protobuf::int32 value) {
  
  process_pid_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.process_pid)
}

// int32 process_status = 6;
inline void ProcessData::clear_process_status() {
  process_status_ = 0;
}
inline ::google::protobuf::int32 ProcessData::process_status() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_status)
  return process_status_;
}
inline void ProcessData::set_process_status(::google::protobuf::int32 value) {
  
  process_status_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.process_status)
}

// int32 heart_beat_time = 7;
inline void ProcessData::clear_heart_beat_time() {
  heart_beat_time_ = 0;
}
inline ::google::protobuf::int32 ProcessData::heart_beat_time() const {
  // @@protoc_insertion_point(field_get:ProcessData.heart_beat_time)
  return heart_beat_time_;
}
inline void ProcessData::set_heart_beat_time(::google::protobuf::int32 value) {
  
  heart_beat_time_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.heart_beat_time)
}

// float cpu_use = 8;
inline void ProcessData::clear_cpu_use() {
  cpu_use_ = 0;
}
inline float ProcessData::cpu_use() const {
  // @@protoc_insertion_point(field_get:ProcessData.cpu_use)
  return cpu_use_;
}
inline void ProcessData::set_cpu_use(float value) {
  
  cpu_use_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.cpu_use)
}

// float ram_use = 9;
inline void ProcessData::clear_ram_use() {
  ram_use_ = 0;
}
inline float ProcessData::ram_use() const {
  // @@protoc_insertion_point(field_get:ProcessData.ram_use)
  return ram_use_;
}
inline void ProcessData::set_ram_use(float value) {
  
  ram_use_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.ram_use)
}

// int32 restart_num = 10;
inline void ProcessData::clear_restart_num() {
  restart_num_ = 0;
}
inline ::google::protobuf::int32 ProcessData::restart_num() const {
  // @@protoc_insertion_point(field_get:ProcessData.restart_num)
  return restart_num_;
}
inline void ProcessData::set_restart_num(::google::protobuf::int32 value) {
  
  restart_num_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.restart_num)
}

// -------------------------------------------------------------------

// ProcessCtrl

// string process_id = 1;
inline void ProcessCtrl::clear_process_id() {
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessCtrl::process_id() const {
  // @@protoc_insertion_point(field_get:ProcessCtrl.process_id)
  return process_id_.GetNoArena();
}
inline void ProcessCtrl::set_process_id(const ::std::string& value) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessCtrl.process_id)
}
#if LANG_CXX11
inline void ProcessCtrl::set_process_id(::std::string&& value) {
  
  process_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessCtrl.process_id)
}
#endif
inline void ProcessCtrl::set_process_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessCtrl.process_id)
}
inline void ProcessCtrl::set_process_id(const char* value, size_t size) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessCtrl.process_id)
}
inline ::std::string* ProcessCtrl::mutable_process_id() {
  
  // @@protoc_insertion_point(field_mutable:ProcessCtrl.process_id)
  return process_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessCtrl::release_process_id() {
  // @@protoc_insertion_point(field_release:ProcessCtrl.process_id)
  
  return process_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessCtrl::set_allocated_process_id(::std::string* process_id) {
  if (process_id != NULL) {
    
  } else {
    
  }
  process_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_id);
  // @@protoc_insertion_point(field_set_allocated:ProcessCtrl.process_id)
}

// int32 command = 2;
inline void ProcessCtrl::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 ProcessCtrl::command() const {
  // @@protoc_insertion_point(field_get:ProcessCtrl.command)
  return command_;
}
inline void ProcessCtrl::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:ProcessCtrl.command)
}

// -------------------------------------------------------------------

// RealPointValue

// string channelName = 1;
inline void RealPointValue::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealPointValue::channelname() const {
  // @@protoc_insertion_point(field_get:RealPointValue.channelName)
  return channelname_.GetNoArena();
}
inline void RealPointValue::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.channelName)
}
#if LANG_CXX11
inline void RealPointValue::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.channelName)
}
#endif
inline void RealPointValue::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.channelName)
}
inline void RealPointValue::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.channelName)
}
inline ::std::string* RealPointValue::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealPointValue::release_channelname() {
  // @@protoc_insertion_point(field_release:RealPointValue.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealPointValue::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.channelName)
}

// string deviceName = 2;
inline void RealPointValue::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealPointValue::devicename() const {
  // @@protoc_insertion_point(field_get:RealPointValue.deviceName)
  return devicename_.GetNoArena();
}
inline void RealPointValue::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.deviceName)
}
#if LANG_CXX11
inline void RealPointValue::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.deviceName)
}
#endif
inline void RealPointValue::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.deviceName)
}
inline void RealPointValue::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.deviceName)
}
inline ::std::string* RealPointValue::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealPointValue::release_devicename() {
  // @@protoc_insertion_point(field_release:RealPointValue.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealPointValue::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.deviceName)
}

// string pointValue = 3;
inline void RealPointValue::clear_pointvalue() {
  pointvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealPointValue::pointvalue() const {
  // @@protoc_insertion_point(field_get:RealPointValue.pointValue)
  return pointvalue_.GetNoArena();
}
inline void RealPointValue::set_pointvalue(const ::std::string& value) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.pointValue)
}
#if LANG_CXX11
inline void RealPointValue::set_pointvalue(::std::string&& value) {
  
  pointvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.pointValue)
}
#endif
inline void RealPointValue::set_pointvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.pointValue)
}
inline void RealPointValue::set_pointvalue(const char* value, size_t size) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.pointValue)
}
inline ::std::string* RealPointValue::mutable_pointvalue() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.pointValue)
  return pointvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealPointValue::release_pointvalue() {
  // @@protoc_insertion_point(field_release:RealPointValue.pointValue)
  
  return pointvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealPointValue::set_allocated_pointvalue(::std::string* pointvalue) {
  if (pointvalue != NULL) {
    
  } else {
    
  }
  pointvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointvalue);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.pointValue)
}

// string pointAddr = 4;
inline void RealPointValue::clear_pointaddr() {
  pointaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealPointValue::pointaddr() const {
  // @@protoc_insertion_point(field_get:RealPointValue.pointAddr)
  return pointaddr_.GetNoArena();
}
inline void RealPointValue::set_pointaddr(const ::std::string& value) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.pointAddr)
}
#if LANG_CXX11
inline void RealPointValue::set_pointaddr(::std::string&& value) {
  
  pointaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.pointAddr)
}
#endif
inline void RealPointValue::set_pointaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.pointAddr)
}
inline void RealPointValue::set_pointaddr(const char* value, size_t size) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.pointAddr)
}
inline ::std::string* RealPointValue::mutable_pointaddr() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.pointAddr)
  return pointaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealPointValue::release_pointaddr() {
  // @@protoc_insertion_point(field_release:RealPointValue.pointAddr)
  
  return pointaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealPointValue::set_allocated_pointaddr(::std::string* pointaddr) {
  if (pointaddr != NULL) {
    
  } else {
    
  }
  pointaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointaddr);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.pointAddr)
}

// .PointValueType valueType = 5;
inline void RealPointValue::clear_valuetype() {
  valuetype_ = 0;
}
inline ::PointValueType RealPointValue::valuetype() const {
  // @@protoc_insertion_point(field_get:RealPointValue.valueType)
  return static_cast< ::PointValueType >(valuetype_);
}
inline void RealPointValue::set_valuetype(::PointValueType value) {
  
  valuetype_ = value;
  // @@protoc_insertion_point(field_set:RealPointValue.valueType)
}

// int32 channelType = 6;
inline void RealPointValue::clear_channeltype() {
  channeltype_ = 0;
}
inline ::google::protobuf::int32 RealPointValue::channeltype() const {
  // @@protoc_insertion_point(field_get:RealPointValue.channelType)
  return channeltype_;
}
inline void RealPointValue::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:RealPointValue.channelType)
}

// -------------------------------------------------------------------

// HeartBeatMessage

// string channelName = 1;
inline void HeartBeatMessage::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatMessage::channelname() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.channelName)
  return channelname_.GetNoArena();
}
inline void HeartBeatMessage::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.channelName)
}
#if LANG_CXX11
inline void HeartBeatMessage::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.channelName)
}
#endif
inline void HeartBeatMessage::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.channelName)
}
inline void HeartBeatMessage::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.channelName)
}
inline ::std::string* HeartBeatMessage::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatMessage::release_channelname() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMessage::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.channelName)
}

// int32 time = 2;
inline void HeartBeatMessage::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 HeartBeatMessage::time() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.time)
  return time_;
}
inline void HeartBeatMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.time)
}

// -------------------------------------------------------------------

// CommunicationPair

// string type = 1;
inline void CommunicationPair::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::type() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.type)
  return type_.GetNoArena();
}
inline void CommunicationPair::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.type)
}
#if LANG_CXX11
inline void CommunicationPair::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.type)
}
#endif
inline void CommunicationPair::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.type)
}
inline void CommunicationPair::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.type)
}
inline ::std::string* CommunicationPair::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_type() {
  // @@protoc_insertion_point(field_release:CommunicationPair.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.type)
}

// string source_ip = 2;
inline void CommunicationPair::clear_source_ip() {
  source_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::source_ip() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.source_ip)
  return source_ip_.GetNoArena();
}
inline void CommunicationPair::set_source_ip(const ::std::string& value) {
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.source_ip)
}
#if LANG_CXX11
inline void CommunicationPair::set_source_ip(::std::string&& value) {
  
  source_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.source_ip)
}
#endif
inline void CommunicationPair::set_source_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.source_ip)
}
inline void CommunicationPair::set_source_ip(const char* value, size_t size) {
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.source_ip)
}
inline ::std::string* CommunicationPair::mutable_source_ip() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.source_ip)
  return source_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_source_ip() {
  // @@protoc_insertion_point(field_release:CommunicationPair.source_ip)
  
  return source_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_source_ip(::std::string* source_ip) {
  if (source_ip != NULL) {
    
  } else {
    
  }
  source_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_ip);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.source_ip)
}

// string source_mac = 3;
inline void CommunicationPair::clear_source_mac() {
  source_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::source_mac() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.source_mac)
  return source_mac_.GetNoArena();
}
inline void CommunicationPair::set_source_mac(const ::std::string& value) {
  
  source_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.source_mac)
}
#if LANG_CXX11
inline void CommunicationPair::set_source_mac(::std::string&& value) {
  
  source_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.source_mac)
}
#endif
inline void CommunicationPair::set_source_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.source_mac)
}
inline void CommunicationPair::set_source_mac(const char* value, size_t size) {
  
  source_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.source_mac)
}
inline ::std::string* CommunicationPair::mutable_source_mac() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.source_mac)
  return source_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_source_mac() {
  // @@protoc_insertion_point(field_release:CommunicationPair.source_mac)
  
  return source_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_source_mac(::std::string* source_mac) {
  if (source_mac != NULL) {
    
  } else {
    
  }
  source_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_mac);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.source_mac)
}

// int32 soure_port = 4;
inline void CommunicationPair::clear_soure_port() {
  soure_port_ = 0;
}
inline ::google::protobuf::int32 CommunicationPair::soure_port() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.soure_port)
  return soure_port_;
}
inline void CommunicationPair::set_soure_port(::google::protobuf::int32 value) {
  
  soure_port_ = value;
  // @@protoc_insertion_point(field_set:CommunicationPair.soure_port)
}

// string dest_ip = 5;
inline void CommunicationPair::clear_dest_ip() {
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::dest_ip() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.dest_ip)
  return dest_ip_.GetNoArena();
}
inline void CommunicationPair::set_dest_ip(const ::std::string& value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.dest_ip)
}
#if LANG_CXX11
inline void CommunicationPair::set_dest_ip(::std::string&& value) {
  
  dest_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.dest_ip)
}
#endif
inline void CommunicationPair::set_dest_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.dest_ip)
}
inline void CommunicationPair::set_dest_ip(const char* value, size_t size) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.dest_ip)
}
inline ::std::string* CommunicationPair::mutable_dest_ip() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.dest_ip)
  return dest_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_dest_ip() {
  // @@protoc_insertion_point(field_release:CommunicationPair.dest_ip)
  
  return dest_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_dest_ip(::std::string* dest_ip) {
  if (dest_ip != NULL) {
    
  } else {
    
  }
  dest_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_ip);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.dest_ip)
}

// string dest_mac = 6;
inline void CommunicationPair::clear_dest_mac() {
  dest_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::dest_mac() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.dest_mac)
  return dest_mac_.GetNoArena();
}
inline void CommunicationPair::set_dest_mac(const ::std::string& value) {
  
  dest_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.dest_mac)
}
#if LANG_CXX11
inline void CommunicationPair::set_dest_mac(::std::string&& value) {
  
  dest_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.dest_mac)
}
#endif
inline void CommunicationPair::set_dest_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.dest_mac)
}
inline void CommunicationPair::set_dest_mac(const char* value, size_t size) {
  
  dest_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.dest_mac)
}
inline ::std::string* CommunicationPair::mutable_dest_mac() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.dest_mac)
  return dest_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_dest_mac() {
  // @@protoc_insertion_point(field_release:CommunicationPair.dest_mac)
  
  return dest_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_dest_mac(::std::string* dest_mac) {
  if (dest_mac != NULL) {
    
  } else {
    
  }
  dest_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_mac);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.dest_mac)
}

// int32 dest_port = 7;
inline void CommunicationPair::clear_dest_port() {
  dest_port_ = 0;
}
inline ::google::protobuf::int32 CommunicationPair::dest_port() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.dest_port)
  return dest_port_;
}
inline void CommunicationPair::set_dest_port(::google::protobuf::int32 value) {
  
  dest_port_ = value;
  // @@protoc_insertion_point(field_set:CommunicationPair.dest_port)
}

// int32 netstatus = 8;
inline void CommunicationPair::clear_netstatus() {
  netstatus_ = 0;
}
inline ::google::protobuf::int32 CommunicationPair::netstatus() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.netstatus)
  return netstatus_;
}
inline void CommunicationPair::set_netstatus(::google::protobuf::int32 value) {
  
  netstatus_ = value;
  // @@protoc_insertion_point(field_set:CommunicationPair.netstatus)
}

// string lastTime = 9;
inline void CommunicationPair::clear_lasttime() {
  lasttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::lasttime() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.lastTime)
  return lasttime_.GetNoArena();
}
inline void CommunicationPair::set_lasttime(const ::std::string& value) {
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.lastTime)
}
#if LANG_CXX11
inline void CommunicationPair::set_lasttime(::std::string&& value) {
  
  lasttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.lastTime)
}
#endif
inline void CommunicationPair::set_lasttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.lastTime)
}
inline void CommunicationPair::set_lasttime(const char* value, size_t size) {
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.lastTime)
}
inline ::std::string* CommunicationPair::mutable_lasttime() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.lastTime)
  return lasttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_lasttime() {
  // @@protoc_insertion_point(field_release:CommunicationPair.lastTime)
  
  return lasttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_lasttime(::std::string* lasttime) {
  if (lasttime != NULL) {
    
  } else {
    
  }
  lasttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttime);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.lastTime)
}

// string eth_name = 10;
inline void CommunicationPair::clear_eth_name() {
  eth_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::eth_name() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.eth_name)
  return eth_name_.GetNoArena();
}
inline void CommunicationPair::set_eth_name(const ::std::string& value) {
  
  eth_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.eth_name)
}
#if LANG_CXX11
inline void CommunicationPair::set_eth_name(::std::string&& value) {
  
  eth_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.eth_name)
}
#endif
inline void CommunicationPair::set_eth_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eth_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.eth_name)
}
inline void CommunicationPair::set_eth_name(const char* value, size_t size) {
  
  eth_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.eth_name)
}
inline ::std::string* CommunicationPair::mutable_eth_name() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.eth_name)
  return eth_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_eth_name() {
  // @@protoc_insertion_point(field_release:CommunicationPair.eth_name)
  
  return eth_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_eth_name(::std::string* eth_name) {
  if (eth_name != NULL) {
    
  } else {
    
  }
  eth_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eth_name);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.eth_name)
}

// string conn_start_time = 11;
inline void CommunicationPair::clear_conn_start_time() {
  conn_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::conn_start_time() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.conn_start_time)
  return conn_start_time_.GetNoArena();
}
inline void CommunicationPair::set_conn_start_time(const ::std::string& value) {
  
  conn_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.conn_start_time)
}
#if LANG_CXX11
inline void CommunicationPair::set_conn_start_time(::std::string&& value) {
  
  conn_start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.conn_start_time)
}
#endif
inline void CommunicationPair::set_conn_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conn_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.conn_start_time)
}
inline void CommunicationPair::set_conn_start_time(const char* value, size_t size) {
  
  conn_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.conn_start_time)
}
inline ::std::string* CommunicationPair::mutable_conn_start_time() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.conn_start_time)
  return conn_start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_conn_start_time() {
  // @@protoc_insertion_point(field_release:CommunicationPair.conn_start_time)
  
  return conn_start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_conn_start_time(::std::string* conn_start_time) {
  if (conn_start_time != NULL) {
    
  } else {
    
  }
  conn_start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_start_time);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.conn_start_time)
}

// string conn_end_time = 12;
inline void CommunicationPair::clear_conn_end_time() {
  conn_end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::conn_end_time() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.conn_end_time)
  return conn_end_time_.GetNoArena();
}
inline void CommunicationPair::set_conn_end_time(const ::std::string& value) {
  
  conn_end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.conn_end_time)
}
#if LANG_CXX11
inline void CommunicationPair::set_conn_end_time(::std::string&& value) {
  
  conn_end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.conn_end_time)
}
#endif
inline void CommunicationPair::set_conn_end_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conn_end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.conn_end_time)
}
inline void CommunicationPair::set_conn_end_time(const char* value, size_t size) {
  
  conn_end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.conn_end_time)
}
inline ::std::string* CommunicationPair::mutable_conn_end_time() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.conn_end_time)
  return conn_end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_conn_end_time() {
  // @@protoc_insertion_point(field_release:CommunicationPair.conn_end_time)
  
  return conn_end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_conn_end_time(::std::string* conn_end_time) {
  if (conn_end_time != NULL) {
    
  } else {
    
  }
  conn_end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_end_time);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.conn_end_time)
}

// string packagename = 13;
inline void CommunicationPair::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::packagename() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.packagename)
  return packagename_.GetNoArena();
}
inline void CommunicationPair::set_packagename(const ::std::string& value) {
  
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.packagename)
}
#if LANG_CXX11
inline void CommunicationPair::set_packagename(::std::string&& value) {
  
  packagename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.packagename)
}
#endif
inline void CommunicationPair::set_packagename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.packagename)
}
inline void CommunicationPair::set_packagename(const char* value, size_t size) {
  
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.packagename)
}
inline ::std::string* CommunicationPair::mutable_packagename() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.packagename)
  return packagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_packagename() {
  // @@protoc_insertion_point(field_release:CommunicationPair.packagename)
  
  return packagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_packagename(::std::string* packagename) {
  if (packagename != NULL) {
    
  } else {
    
  }
  packagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.packagename)
}

// string packageline = 14;
inline void CommunicationPair::clear_packageline() {
  packageline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommunicationPair::packageline() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.packageline)
  return packageline_.GetNoArena();
}
inline void CommunicationPair::set_packageline(const ::std::string& value) {
  
  packageline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.packageline)
}
#if LANG_CXX11
inline void CommunicationPair::set_packageline(::std::string&& value) {
  
  packageline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.packageline)
}
#endif
inline void CommunicationPair::set_packageline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  packageline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.packageline)
}
inline void CommunicationPair::set_packageline(const char* value, size_t size) {
  
  packageline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.packageline)
}
inline ::std::string* CommunicationPair::mutable_packageline() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.packageline)
  return packageline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommunicationPair::release_packageline() {
  // @@protoc_insertion_point(field_release:CommunicationPair.packageline)
  
  return packageline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommunicationPair::set_allocated_packageline(::std::string* packageline) {
  if (packageline != NULL) {
    
  } else {
    
  }
  packageline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packageline);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.packageline)
}

// -------------------------------------------------------------------

// UPRealPointValue

// string channelName = 1;
inline void UPRealPointValue::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UPRealPointValue::channelname() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.channelName)
  return channelname_.GetNoArena();
}
inline void UPRealPointValue::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.channelName)
}
#if LANG_CXX11
inline void UPRealPointValue::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.channelName)
}
#endif
inline void UPRealPointValue::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.channelName)
}
inline void UPRealPointValue::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.channelName)
}
inline ::std::string* UPRealPointValue::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UPRealPointValue::release_channelname() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UPRealPointValue::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.channelName)
}

// string deviceName = 2;
inline void UPRealPointValue::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UPRealPointValue::devicename() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.deviceName)
  return devicename_.GetNoArena();
}
inline void UPRealPointValue::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.deviceName)
}
#if LANG_CXX11
inline void UPRealPointValue::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.deviceName)
}
#endif
inline void UPRealPointValue::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.deviceName)
}
inline void UPRealPointValue::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.deviceName)
}
inline ::std::string* UPRealPointValue::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UPRealPointValue::release_devicename() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UPRealPointValue::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.deviceName)
}

// string pointValue = 3;
inline void UPRealPointValue::clear_pointvalue() {
  pointvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UPRealPointValue::pointvalue() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.pointValue)
  return pointvalue_.GetNoArena();
}
inline void UPRealPointValue::set_pointvalue(const ::std::string& value) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.pointValue)
}
#if LANG_CXX11
inline void UPRealPointValue::set_pointvalue(::std::string&& value) {
  
  pointvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.pointValue)
}
#endif
inline void UPRealPointValue::set_pointvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.pointValue)
}
inline void UPRealPointValue::set_pointvalue(const char* value, size_t size) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.pointValue)
}
inline ::std::string* UPRealPointValue::mutable_pointvalue() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.pointValue)
  return pointvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UPRealPointValue::release_pointvalue() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.pointValue)
  
  return pointvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UPRealPointValue::set_allocated_pointvalue(::std::string* pointvalue) {
  if (pointvalue != NULL) {
    
  } else {
    
  }
  pointvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointvalue);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.pointValue)
}

// string pointAddr = 4;
inline void UPRealPointValue::clear_pointaddr() {
  pointaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UPRealPointValue::pointaddr() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.pointAddr)
  return pointaddr_.GetNoArena();
}
inline void UPRealPointValue::set_pointaddr(const ::std::string& value) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.pointAddr)
}
#if LANG_CXX11
inline void UPRealPointValue::set_pointaddr(::std::string&& value) {
  
  pointaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.pointAddr)
}
#endif
inline void UPRealPointValue::set_pointaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.pointAddr)
}
inline void UPRealPointValue::set_pointaddr(const char* value, size_t size) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.pointAddr)
}
inline ::std::string* UPRealPointValue::mutable_pointaddr() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.pointAddr)
  return pointaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UPRealPointValue::release_pointaddr() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.pointAddr)
  
  return pointaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UPRealPointValue::set_allocated_pointaddr(::std::string* pointaddr) {
  if (pointaddr != NULL) {
    
  } else {
    
  }
  pointaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointaddr);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.pointAddr)
}

// .PointValueType valueType = 5;
inline void UPRealPointValue::clear_valuetype() {
  valuetype_ = 0;
}
inline ::PointValueType UPRealPointValue::valuetype() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.valueType)
  return static_cast< ::PointValueType >(valuetype_);
}
inline void UPRealPointValue::set_valuetype(::PointValueType value) {
  
  valuetype_ = value;
  // @@protoc_insertion_point(field_set:UPRealPointValue.valueType)
}

// int32 channelType = 6;
inline void UPRealPointValue::clear_channeltype() {
  channeltype_ = 0;
}
inline ::google::protobuf::int32 UPRealPointValue::channeltype() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.channelType)
  return channeltype_;
}
inline void UPRealPointValue::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:UPRealPointValue.channelType)
}

// -------------------------------------------------------------------

// FlowThreshold

// string messageCount = 1;
inline void FlowThreshold::clear_messagecount() {
  messagecount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowThreshold::messagecount() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.messageCount)
  return messagecount_.GetNoArena();
}
inline void FlowThreshold::set_messagecount(const ::std::string& value) {
  
  messagecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.messageCount)
}
#if LANG_CXX11
inline void FlowThreshold::set_messagecount(::std::string&& value) {
  
  messagecount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.messageCount)
}
#endif
inline void FlowThreshold::set_messagecount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messagecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.messageCount)
}
inline void FlowThreshold::set_messagecount(const char* value, size_t size) {
  
  messagecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.messageCount)
}
inline ::std::string* FlowThreshold::mutable_messagecount() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.messageCount)
  return messagecount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowThreshold::release_messagecount() {
  // @@protoc_insertion_point(field_release:FlowThreshold.messageCount)
  
  return messagecount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowThreshold::set_allocated_messagecount(::std::string* messagecount) {
  if (messagecount != NULL) {
    
  } else {
    
  }
  messagecount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagecount);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.messageCount)
}

// string flowMax = 2;
inline void FlowThreshold::clear_flowmax() {
  flowmax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowThreshold::flowmax() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.flowMax)
  return flowmax_.GetNoArena();
}
inline void FlowThreshold::set_flowmax(const ::std::string& value) {
  
  flowmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.flowMax)
}
#if LANG_CXX11
inline void FlowThreshold::set_flowmax(::std::string&& value) {
  
  flowmax_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.flowMax)
}
#endif
inline void FlowThreshold::set_flowmax(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flowmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.flowMax)
}
inline void FlowThreshold::set_flowmax(const char* value, size_t size) {
  
  flowmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.flowMax)
}
inline ::std::string* FlowThreshold::mutable_flowmax() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.flowMax)
  return flowmax_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowThreshold::release_flowmax() {
  // @@protoc_insertion_point(field_release:FlowThreshold.flowMax)
  
  return flowmax_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowThreshold::set_allocated_flowmax(::std::string* flowmax) {
  if (flowmax != NULL) {
    
  } else {
    
  }
  flowmax_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flowmax);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.flowMax)
}

// string noFlowTime = 3;
inline void FlowThreshold::clear_noflowtime() {
  noflowtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowThreshold::noflowtime() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.noFlowTime)
  return noflowtime_.GetNoArena();
}
inline void FlowThreshold::set_noflowtime(const ::std::string& value) {
  
  noflowtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.noFlowTime)
}
#if LANG_CXX11
inline void FlowThreshold::set_noflowtime(::std::string&& value) {
  
  noflowtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.noFlowTime)
}
#endif
inline void FlowThreshold::set_noflowtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  noflowtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.noFlowTime)
}
inline void FlowThreshold::set_noflowtime(const char* value, size_t size) {
  
  noflowtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.noFlowTime)
}
inline ::std::string* FlowThreshold::mutable_noflowtime() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.noFlowTime)
  return noflowtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowThreshold::release_noflowtime() {
  // @@protoc_insertion_point(field_release:FlowThreshold.noFlowTime)
  
  return noflowtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowThreshold::set_allocated_noflowtime(::std::string* noflowtime) {
  if (noflowtime != NULL) {
    
  } else {
    
  }
  noflowtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noflowtime);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.noFlowTime)
}

// string linkMax = 4;
inline void FlowThreshold::clear_linkmax() {
  linkmax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowThreshold::linkmax() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.linkMax)
  return linkmax_.GetNoArena();
}
inline void FlowThreshold::set_linkmax(const ::std::string& value) {
  
  linkmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.linkMax)
}
#if LANG_CXX11
inline void FlowThreshold::set_linkmax(::std::string&& value) {
  
  linkmax_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.linkMax)
}
#endif
inline void FlowThreshold::set_linkmax(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.linkMax)
}
inline void FlowThreshold::set_linkmax(const char* value, size_t size) {
  
  linkmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.linkMax)
}
inline ::std::string* FlowThreshold::mutable_linkmax() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.linkMax)
  return linkmax_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowThreshold::release_linkmax() {
  // @@protoc_insertion_point(field_release:FlowThreshold.linkMax)
  
  return linkmax_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowThreshold::set_allocated_linkmax(::std::string* linkmax) {
  if (linkmax != NULL) {
    
  } else {
    
  }
  linkmax_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkmax);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.linkMax)
}

// -------------------------------------------------------------------

// AlarmDataMsg

// int32 type = 1;
inline void AlarmDataMsg::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 AlarmDataMsg::type() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.type)
  return type_;
}
inline void AlarmDataMsg::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AlarmDataMsg.type)
}

// string id = 2;
inline void AlarmDataMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::id() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.id)
  return id_.GetNoArena();
}
inline void AlarmDataMsg::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.id)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.id)
}
#endif
inline void AlarmDataMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.id)
}
inline void AlarmDataMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.id)
}
inline ::std::string* AlarmDataMsg::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_id() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.id)
}

// int32 level = 3;
inline void AlarmDataMsg::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 AlarmDataMsg::level() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.level)
  return level_;
}
inline void AlarmDataMsg::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:AlarmDataMsg.level)
}

// string time = 4;
inline void AlarmDataMsg::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::time() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.time)
  return time_.GetNoArena();
}
inline void AlarmDataMsg::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.time)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.time)
}
#endif
inline void AlarmDataMsg::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.time)
}
inline void AlarmDataMsg::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.time)
}
inline ::std::string* AlarmDataMsg::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_time() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.time)
}

// bytes devicename = 5;
inline void AlarmDataMsg::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::devicename() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.devicename)
  return devicename_.GetNoArena();
}
inline void AlarmDataMsg::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.devicename)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.devicename)
}
#endif
inline void AlarmDataMsg::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.devicename)
}
inline void AlarmDataMsg::set_devicename(const void* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.devicename)
}
inline ::std::string* AlarmDataMsg::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_devicename() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.devicename)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.devicename)
}

// bytes msg = 6;
inline void AlarmDataMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::msg() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.msg)
  return msg_.GetNoArena();
}
inline void AlarmDataMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.msg)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.msg)
}
#endif
inline void AlarmDataMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.msg)
}
inline void AlarmDataMsg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.msg)
}
inline ::std::string* AlarmDataMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_msg() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.msg)
}

// bytes Reason = 7;
inline void AlarmDataMsg::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::reason() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.Reason)
  return reason_.GetNoArena();
}
inline void AlarmDataMsg::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.Reason)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.Reason)
}
#endif
inline void AlarmDataMsg::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.Reason)
}
inline void AlarmDataMsg::set_reason(const void* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.Reason)
}
inline ::std::string* AlarmDataMsg::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_reason() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.Reason)
}

// string confirmed = 8;
inline void AlarmDataMsg::clear_confirmed() {
  confirmed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::confirmed() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.confirmed)
  return confirmed_.GetNoArena();
}
inline void AlarmDataMsg::set_confirmed(const ::std::string& value) {
  
  confirmed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.confirmed)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_confirmed(::std::string&& value) {
  
  confirmed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.confirmed)
}
#endif
inline void AlarmDataMsg::set_confirmed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  confirmed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.confirmed)
}
inline void AlarmDataMsg::set_confirmed(const char* value, size_t size) {
  
  confirmed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.confirmed)
}
inline ::std::string* AlarmDataMsg::mutable_confirmed() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.confirmed)
  return confirmed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_confirmed() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.confirmed)
  
  return confirmed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_confirmed(::std::string* confirmed) {
  if (confirmed != NULL) {
    
  } else {
    
  }
  confirmed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmed);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.confirmed)
}

// string filename = 9;
inline void AlarmDataMsg::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmDataMsg::filename() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.filename)
  return filename_.GetNoArena();
}
inline void AlarmDataMsg::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.filename)
}
#if LANG_CXX11
inline void AlarmDataMsg::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.filename)
}
#endif
inline void AlarmDataMsg::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.filename)
}
inline void AlarmDataMsg::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.filename)
}
inline ::std::string* AlarmDataMsg::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmDataMsg::release_filename() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmDataMsg::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.filename)
}

// -------------------------------------------------------------------

// RemoteControl

// string protocolName = 1;
inline void RemoteControl::clear_protocolname() {
  protocolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::protocolname() const {
  // @@protoc_insertion_point(field_get:RemoteControl.protocolName)
  return protocolname_.GetNoArena();
}
inline void RemoteControl::set_protocolname(const ::std::string& value) {
  
  protocolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.protocolName)
}
#if LANG_CXX11
inline void RemoteControl::set_protocolname(::std::string&& value) {
  
  protocolname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.protocolName)
}
#endif
inline void RemoteControl::set_protocolname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.protocolName)
}
inline void RemoteControl::set_protocolname(const char* value, size_t size) {
  
  protocolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.protocolName)
}
inline ::std::string* RemoteControl::mutable_protocolname() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.protocolName)
  return protocolname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_protocolname() {
  // @@protoc_insertion_point(field_release:RemoteControl.protocolName)
  
  return protocolname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_protocolname(::std::string* protocolname) {
  if (protocolname != NULL) {
    
  } else {
    
  }
  protocolname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocolname);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.protocolName)
}

// string timeStamp = 2;
inline void RemoteControl::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::timestamp() const {
  // @@protoc_insertion_point(field_get:RemoteControl.timeStamp)
  return timestamp_.GetNoArena();
}
inline void RemoteControl::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.timeStamp)
}
#if LANG_CXX11
inline void RemoteControl::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.timeStamp)
}
#endif
inline void RemoteControl::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.timeStamp)
}
inline void RemoteControl::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.timeStamp)
}
inline ::std::string* RemoteControl::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.timeStamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_timestamp() {
  // @@protoc_insertion_point(field_release:RemoteControl.timeStamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.timeStamp)
}

// string srcIp = 3;
inline void RemoteControl::clear_srcip() {
  srcip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::srcip() const {
  // @@protoc_insertion_point(field_get:RemoteControl.srcIp)
  return srcip_.GetNoArena();
}
inline void RemoteControl::set_srcip(const ::std::string& value) {
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.srcIp)
}
#if LANG_CXX11
inline void RemoteControl::set_srcip(::std::string&& value) {
  
  srcip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.srcIp)
}
#endif
inline void RemoteControl::set_srcip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.srcIp)
}
inline void RemoteControl::set_srcip(const char* value, size_t size) {
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.srcIp)
}
inline ::std::string* RemoteControl::mutable_srcip() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.srcIp)
  return srcip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_srcip() {
  // @@protoc_insertion_point(field_release:RemoteControl.srcIp)
  
  return srcip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_srcip(::std::string* srcip) {
  if (srcip != NULL) {
    
  } else {
    
  }
  srcip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcip);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.srcIp)
}

// string srcDevice = 4;
inline void RemoteControl::clear_srcdevice() {
  srcdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::srcdevice() const {
  // @@protoc_insertion_point(field_get:RemoteControl.srcDevice)
  return srcdevice_.GetNoArena();
}
inline void RemoteControl::set_srcdevice(const ::std::string& value) {
  
  srcdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.srcDevice)
}
#if LANG_CXX11
inline void RemoteControl::set_srcdevice(::std::string&& value) {
  
  srcdevice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.srcDevice)
}
#endif
inline void RemoteControl::set_srcdevice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srcdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.srcDevice)
}
inline void RemoteControl::set_srcdevice(const char* value, size_t size) {
  
  srcdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.srcDevice)
}
inline ::std::string* RemoteControl::mutable_srcdevice() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.srcDevice)
  return srcdevice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_srcdevice() {
  // @@protoc_insertion_point(field_release:RemoteControl.srcDevice)
  
  return srcdevice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_srcdevice(::std::string* srcdevice) {
  if (srcdevice != NULL) {
    
  } else {
    
  }
  srcdevice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcdevice);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.srcDevice)
}

// string dstIp = 5;
inline void RemoteControl::clear_dstip() {
  dstip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::dstip() const {
  // @@protoc_insertion_point(field_get:RemoteControl.dstIp)
  return dstip_.GetNoArena();
}
inline void RemoteControl::set_dstip(const ::std::string& value) {
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.dstIp)
}
#if LANG_CXX11
inline void RemoteControl::set_dstip(::std::string&& value) {
  
  dstip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.dstIp)
}
#endif
inline void RemoteControl::set_dstip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.dstIp)
}
inline void RemoteControl::set_dstip(const char* value, size_t size) {
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.dstIp)
}
inline ::std::string* RemoteControl::mutable_dstip() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.dstIp)
  return dstip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_dstip() {
  // @@protoc_insertion_point(field_release:RemoteControl.dstIp)
  
  return dstip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_dstip(::std::string* dstip) {
  if (dstip != NULL) {
    
  } else {
    
  }
  dstip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstip);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.dstIp)
}

// string dstDevice = 6;
inline void RemoteControl::clear_dstdevice() {
  dstdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::dstdevice() const {
  // @@protoc_insertion_point(field_get:RemoteControl.dstDevice)
  return dstdevice_.GetNoArena();
}
inline void RemoteControl::set_dstdevice(const ::std::string& value) {
  
  dstdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.dstDevice)
}
#if LANG_CXX11
inline void RemoteControl::set_dstdevice(::std::string&& value) {
  
  dstdevice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.dstDevice)
}
#endif
inline void RemoteControl::set_dstdevice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dstdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.dstDevice)
}
inline void RemoteControl::set_dstdevice(const char* value, size_t size) {
  
  dstdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.dstDevice)
}
inline ::std::string* RemoteControl::mutable_dstdevice() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.dstDevice)
  return dstdevice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_dstdevice() {
  // @@protoc_insertion_point(field_release:RemoteControl.dstDevice)
  
  return dstdevice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_dstdevice(::std::string* dstdevice) {
  if (dstdevice != NULL) {
    
  } else {
    
  }
  dstdevice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstdevice);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.dstDevice)
}

// string iedName = 7;
inline void RemoteControl::clear_iedname() {
  iedname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::iedname() const {
  // @@protoc_insertion_point(field_get:RemoteControl.iedName)
  return iedname_.GetNoArena();
}
inline void RemoteControl::set_iedname(const ::std::string& value) {
  
  iedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.iedName)
}
#if LANG_CXX11
inline void RemoteControl::set_iedname(::std::string&& value) {
  
  iedname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.iedName)
}
#endif
inline void RemoteControl::set_iedname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.iedName)
}
inline void RemoteControl::set_iedname(const char* value, size_t size) {
  
  iedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.iedName)
}
inline ::std::string* RemoteControl::mutable_iedname() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.iedName)
  return iedname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_iedname() {
  // @@protoc_insertion_point(field_release:RemoteControl.iedName)
  
  return iedname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_iedname(::std::string* iedname) {
  if (iedname != NULL) {
    
  } else {
    
  }
  iedname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iedname);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.iedName)
}

// string pointName = 8;
inline void RemoteControl::clear_pointname() {
  pointname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::pointname() const {
  // @@protoc_insertion_point(field_get:RemoteControl.pointName)
  return pointname_.GetNoArena();
}
inline void RemoteControl::set_pointname(const ::std::string& value) {
  
  pointname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.pointName)
}
#if LANG_CXX11
inline void RemoteControl::set_pointname(::std::string&& value) {
  
  pointname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.pointName)
}
#endif
inline void RemoteControl::set_pointname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.pointName)
}
inline void RemoteControl::set_pointname(const char* value, size_t size) {
  
  pointname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.pointName)
}
inline ::std::string* RemoteControl::mutable_pointname() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.pointName)
  return pointname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_pointname() {
  // @@protoc_insertion_point(field_release:RemoteControl.pointName)
  
  return pointname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_pointname(::std::string* pointname) {
  if (pointname != NULL) {
    
  } else {
    
  }
  pointname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointname);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.pointName)
}

// bytes pointDesc = 9;
inline void RemoteControl::clear_pointdesc() {
  pointdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteControl::pointdesc() const {
  // @@protoc_insertion_point(field_get:RemoteControl.pointDesc)
  return pointdesc_.GetNoArena();
}
inline void RemoteControl::set_pointdesc(const ::std::string& value) {
  
  pointdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.pointDesc)
}
#if LANG_CXX11
inline void RemoteControl::set_pointdesc(::std::string&& value) {
  
  pointdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.pointDesc)
}
#endif
inline void RemoteControl::set_pointdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.pointDesc)
}
inline void RemoteControl::set_pointdesc(const void* value, size_t size) {
  
  pointdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.pointDesc)
}
inline ::std::string* RemoteControl::mutable_pointdesc() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.pointDesc)
  return pointdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteControl::release_pointdesc() {
  // @@protoc_insertion_point(field_release:RemoteControl.pointDesc)
  
  return pointdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteControl::set_allocated_pointdesc(::std::string* pointdesc) {
  if (pointdesc != NULL) {
    
  } else {
    
  }
  pointdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointdesc);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.pointDesc)
}

// int32 result = 10;
inline void RemoteControl::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RemoteControl::result() const {
  // @@protoc_insertion_point(field_get:RemoteControl.result)
  return result_;
}
inline void RemoteControl::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.result)
}

// int32 deviceNo = 11;
inline void RemoteControl::clear_deviceno() {
  deviceno_ = 0;
}
inline ::google::protobuf::int32 RemoteControl::deviceno() const {
  // @@protoc_insertion_point(field_get:RemoteControl.deviceNo)
  return deviceno_;
}
inline void RemoteControl::set_deviceno(::google::protobuf::int32 value) {
  
  deviceno_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.deviceNo)
}

// int32 pointNo = 12;
inline void RemoteControl::clear_pointno() {
  pointno_ = 0;
}
inline ::google::protobuf::int32 RemoteControl::pointno() const {
  // @@protoc_insertion_point(field_get:RemoteControl.pointNo)
  return pointno_;
}
inline void RemoteControl::set_pointno(::google::protobuf::int32 value) {
  
  pointno_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.pointNo)
}

// int32 sbo = 13;
inline void RemoteControl::clear_sbo() {
  sbo_ = 0;
}
inline ::google::protobuf::int32 RemoteControl::sbo() const {
  // @@protoc_insertion_point(field_get:RemoteControl.sbo)
  return sbo_;
}
inline void RemoteControl::set_sbo(::google::protobuf::int32 value) {
  
  sbo_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.sbo)
}

// -------------------------------------------------------------------

// RtdbMessage

// int32 fromObject = 1;
inline void RtdbMessage::clear_fromobject() {
  fromobject_ = 0;
}
inline ::google::protobuf::int32 RtdbMessage::fromobject() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.fromObject)
  return fromobject_;
}
inline void RtdbMessage::set_fromobject(::google::protobuf::int32 value) {
  
  fromobject_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.fromObject)
}

// int32 toObject = 2;
inline void RtdbMessage::clear_toobject() {
  toobject_ = 0;
}
inline ::google::protobuf::int32 RtdbMessage::toobject() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.toObject)
  return toobject_;
}
inline void RtdbMessage::set_toobject(::google::protobuf::int32 value) {
  
  toobject_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.toObject)
}

// .ObjectType fromObjectType = 3;
inline void RtdbMessage::clear_fromobjecttype() {
  fromobjecttype_ = 0;
}
inline ::ObjectType RtdbMessage::fromobjecttype() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.fromObjectType)
  return static_cast< ::ObjectType >(fromobjecttype_);
}
inline void RtdbMessage::set_fromobjecttype(::ObjectType value) {
  
  fromobjecttype_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.fromObjectType)
}

// .ObjectType toObjectType = 4;
inline void RtdbMessage::clear_toobjecttype() {
  toobjecttype_ = 0;
}
inline ::ObjectType RtdbMessage::toobjecttype() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.toObjectType)
  return static_cast< ::ObjectType >(toobjecttype_);
}
inline void RtdbMessage::set_toobjecttype(::ObjectType value) {
  
  toobjecttype_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.toObjectType)
}

// .RtdbMessageType messageType = 5;
inline void RtdbMessage::clear_messagetype() {
  messagetype_ = 0;
}
inline ::RtdbMessageType RtdbMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.messageType)
  return static_cast< ::RtdbMessageType >(messagetype_);
}
inline void RtdbMessage::set_messagetype(::RtdbMessageType value) {
  
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.messageType)
}

// int32 transactionId = 6;
inline void RtdbMessage::clear_transactionid() {
  transactionid_ = 0;
}
inline ::google::protobuf::int32 RtdbMessage::transactionid() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.transactionId)
  return transactionid_;
}
inline void RtdbMessage::set_transactionid(::google::protobuf::int32 value) {
  
  transactionid_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.transactionId)
}

// .LogRequest logRequest = 8;
inline bool RtdbMessage::has_logrequest() const {
  return this != internal_default_instance() && logrequest_ != NULL;
}
inline void RtdbMessage::clear_logrequest() {
  if (GetArenaNoVirtual() == NULL && logrequest_ != NULL) delete logrequest_;
  logrequest_ = NULL;
}
inline const ::LogRequest& RtdbMessage::logrequest() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.logRequest)
  return logrequest_ != NULL ? *logrequest_
                         : *::LogRequest::internal_default_instance();
}
inline ::LogRequest* RtdbMessage::mutable_logrequest() {
  
  if (logrequest_ == NULL) {
    logrequest_ = new ::LogRequest;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.logRequest)
  return logrequest_;
}
inline ::LogRequest* RtdbMessage::release_logrequest() {
  // @@protoc_insertion_point(field_release:RtdbMessage.logRequest)
  
  ::LogRequest* temp = logrequest_;
  logrequest_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_logrequest(::LogRequest* logrequest) {
  delete logrequest_;
  logrequest_ = logrequest;
  if (logrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.logRequest)
}

// .RealLogResponse realLogResponse = 9;
inline bool RtdbMessage::has_reallogresponse() const {
  return this != internal_default_instance() && reallogresponse_ != NULL;
}
inline void RtdbMessage::clear_reallogresponse() {
  if (GetArenaNoVirtual() == NULL && reallogresponse_ != NULL) delete reallogresponse_;
  reallogresponse_ = NULL;
}
inline const ::RealLogResponse& RtdbMessage::reallogresponse() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.realLogResponse)
  return reallogresponse_ != NULL ? *reallogresponse_
                         : *::RealLogResponse::internal_default_instance();
}
inline ::RealLogResponse* RtdbMessage::mutable_reallogresponse() {
  
  if (reallogresponse_ == NULL) {
    reallogresponse_ = new ::RealLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.realLogResponse)
  return reallogresponse_;
}
inline ::RealLogResponse* RtdbMessage::release_reallogresponse() {
  // @@protoc_insertion_point(field_release:RtdbMessage.realLogResponse)
  
  ::RealLogResponse* temp = reallogresponse_;
  reallogresponse_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_reallogresponse(::RealLogResponse* reallogresponse) {
  delete reallogresponse_;
  reallogresponse_ = reallogresponse;
  if (reallogresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.realLogResponse)
}

// .LogQuery hisLogQuery = 10;
inline bool RtdbMessage::has_hislogquery() const {
  return this != internal_default_instance() && hislogquery_ != NULL;
}
inline void RtdbMessage::clear_hislogquery() {
  if (GetArenaNoVirtual() == NULL && hislogquery_ != NULL) delete hislogquery_;
  hislogquery_ = NULL;
}
inline const ::LogQuery& RtdbMessage::hislogquery() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.hisLogQuery)
  return hislogquery_ != NULL ? *hislogquery_
                         : *::LogQuery::internal_default_instance();
}
inline ::LogQuery* RtdbMessage::mutable_hislogquery() {
  
  if (hislogquery_ == NULL) {
    hislogquery_ = new ::LogQuery;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.hisLogQuery)
  return hislogquery_;
}
inline ::LogQuery* RtdbMessage::release_hislogquery() {
  // @@protoc_insertion_point(field_release:RtdbMessage.hisLogQuery)
  
  ::LogQuery* temp = hislogquery_;
  hislogquery_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_hislogquery(::LogQuery* hislogquery) {
  delete hislogquery_;
  hislogquery_ = hislogquery;
  if (hislogquery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.hisLogQuery)
}

// .HisLogResponse hisLogResponse = 11;
inline bool RtdbMessage::has_hislogresponse() const {
  return this != internal_default_instance() && hislogresponse_ != NULL;
}
inline void RtdbMessage::clear_hislogresponse() {
  if (GetArenaNoVirtual() == NULL && hislogresponse_ != NULL) delete hislogresponse_;
  hislogresponse_ = NULL;
}
inline const ::HisLogResponse& RtdbMessage::hislogresponse() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.hisLogResponse)
  return hislogresponse_ != NULL ? *hislogresponse_
                         : *::HisLogResponse::internal_default_instance();
}
inline ::HisLogResponse* RtdbMessage::mutable_hislogresponse() {
  
  if (hislogresponse_ == NULL) {
    hislogresponse_ = new ::HisLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.hisLogResponse)
  return hislogresponse_;
}
inline ::HisLogResponse* RtdbMessage::release_hislogresponse() {
  // @@protoc_insertion_point(field_release:RtdbMessage.hisLogResponse)
  
  ::HisLogResponse* temp = hislogresponse_;
  hislogresponse_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_hislogresponse(::HisLogResponse* hislogresponse) {
  delete hislogresponse_;
  hislogresponse_ = hislogresponse;
  if (hislogresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.hisLogResponse)
}

// .NetcardInfoRequest netCardInfoRequest = 12;
inline bool RtdbMessage::has_netcardinforequest() const {
  return this != internal_default_instance() && netcardinforequest_ != NULL;
}
inline void RtdbMessage::clear_netcardinforequest() {
  if (GetArenaNoVirtual() == NULL && netcardinforequest_ != NULL) delete netcardinforequest_;
  netcardinforequest_ = NULL;
}
inline const ::NetcardInfoRequest& RtdbMessage::netcardinforequest() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.netCardInfoRequest)
  return netcardinforequest_ != NULL ? *netcardinforequest_
                         : *::NetcardInfoRequest::internal_default_instance();
}
inline ::NetcardInfoRequest* RtdbMessage::mutable_netcardinforequest() {
  
  if (netcardinforequest_ == NULL) {
    netcardinforequest_ = new ::NetcardInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.netCardInfoRequest)
  return netcardinforequest_;
}
inline ::NetcardInfoRequest* RtdbMessage::release_netcardinforequest() {
  // @@protoc_insertion_point(field_release:RtdbMessage.netCardInfoRequest)
  
  ::NetcardInfoRequest* temp = netcardinforequest_;
  netcardinforequest_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_netcardinforequest(::NetcardInfoRequest* netcardinforequest) {
  delete netcardinforequest_;
  netcardinforequest_ = netcardinforequest;
  if (netcardinforequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.netCardInfoRequest)
}

// .NetcardInfoResponse netCardInfoResponse = 13;
inline bool RtdbMessage::has_netcardinforesponse() const {
  return this != internal_default_instance() && netcardinforesponse_ != NULL;
}
inline void RtdbMessage::clear_netcardinforesponse() {
  if (GetArenaNoVirtual() == NULL && netcardinforesponse_ != NULL) delete netcardinforesponse_;
  netcardinforesponse_ = NULL;
}
inline const ::NetcardInfoResponse& RtdbMessage::netcardinforesponse() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.netCardInfoResponse)
  return netcardinforesponse_ != NULL ? *netcardinforesponse_
                         : *::NetcardInfoResponse::internal_default_instance();
}
inline ::NetcardInfoResponse* RtdbMessage::mutable_netcardinforesponse() {
  
  if (netcardinforesponse_ == NULL) {
    netcardinforesponse_ = new ::NetcardInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.netCardInfoResponse)
  return netcardinforesponse_;
}
inline ::NetcardInfoResponse* RtdbMessage::release_netcardinforesponse() {
  // @@protoc_insertion_point(field_release:RtdbMessage.netCardInfoResponse)
  
  ::NetcardInfoResponse* temp = netcardinforesponse_;
  netcardinforesponse_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_netcardinforesponse(::NetcardInfoResponse* netcardinforesponse) {
  delete netcardinforesponse_;
  netcardinforesponse_ = netcardinforesponse;
  if (netcardinforesponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.netCardInfoResponse)
}

// .ProcessData processData = 14;
inline bool RtdbMessage::has_processdata() const {
  return this != internal_default_instance() && processdata_ != NULL;
}
inline void RtdbMessage::clear_processdata() {
  if (GetArenaNoVirtual() == NULL && processdata_ != NULL) delete processdata_;
  processdata_ = NULL;
}
inline const ::ProcessData& RtdbMessage::processdata() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.processData)
  return processdata_ != NULL ? *processdata_
                         : *::ProcessData::internal_default_instance();
}
inline ::ProcessData* RtdbMessage::mutable_processdata() {
  
  if (processdata_ == NULL) {
    processdata_ = new ::ProcessData;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.processData)
  return processdata_;
}
inline ::ProcessData* RtdbMessage::release_processdata() {
  // @@protoc_insertion_point(field_release:RtdbMessage.processData)
  
  ::ProcessData* temp = processdata_;
  processdata_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_processdata(::ProcessData* processdata) {
  delete processdata_;
  processdata_ = processdata;
  if (processdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.processData)
}

// .ProcessCtrl processCtrl = 15;
inline bool RtdbMessage::has_processctrl() const {
  return this != internal_default_instance() && processctrl_ != NULL;
}
inline void RtdbMessage::clear_processctrl() {
  if (GetArenaNoVirtual() == NULL && processctrl_ != NULL) delete processctrl_;
  processctrl_ = NULL;
}
inline const ::ProcessCtrl& RtdbMessage::processctrl() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.processCtrl)
  return processctrl_ != NULL ? *processctrl_
                         : *::ProcessCtrl::internal_default_instance();
}
inline ::ProcessCtrl* RtdbMessage::mutable_processctrl() {
  
  if (processctrl_ == NULL) {
    processctrl_ = new ::ProcessCtrl;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.processCtrl)
  return processctrl_;
}
inline ::ProcessCtrl* RtdbMessage::release_processctrl() {
  // @@protoc_insertion_point(field_release:RtdbMessage.processCtrl)
  
  ::ProcessCtrl* temp = processctrl_;
  processctrl_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_processctrl(::ProcessCtrl* processctrl) {
  delete processctrl_;
  processctrl_ = processctrl;
  if (processctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.processCtrl)
}

// .RealPointValue realPointValue = 16;
inline bool RtdbMessage::has_realpointvalue() const {
  return this != internal_default_instance() && realpointvalue_ != NULL;
}
inline void RtdbMessage::clear_realpointvalue() {
  if (GetArenaNoVirtual() == NULL && realpointvalue_ != NULL) delete realpointvalue_;
  realpointvalue_ = NULL;
}
inline const ::RealPointValue& RtdbMessage::realpointvalue() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.realPointValue)
  return realpointvalue_ != NULL ? *realpointvalue_
                         : *::RealPointValue::internal_default_instance();
}
inline ::RealPointValue* RtdbMessage::mutable_realpointvalue() {
  
  if (realpointvalue_ == NULL) {
    realpointvalue_ = new ::RealPointValue;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.realPointValue)
  return realpointvalue_;
}
inline ::RealPointValue* RtdbMessage::release_realpointvalue() {
  // @@protoc_insertion_point(field_release:RtdbMessage.realPointValue)
  
  ::RealPointValue* temp = realpointvalue_;
  realpointvalue_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_realpointvalue(::RealPointValue* realpointvalue) {
  delete realpointvalue_;
  realpointvalue_ = realpointvalue;
  if (realpointvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.realPointValue)
}

// .HeartBeatMessage heartBeatMessage = 17;
inline bool RtdbMessage::has_heartbeatmessage() const {
  return this != internal_default_instance() && heartbeatmessage_ != NULL;
}
inline void RtdbMessage::clear_heartbeatmessage() {
  if (GetArenaNoVirtual() == NULL && heartbeatmessage_ != NULL) delete heartbeatmessage_;
  heartbeatmessage_ = NULL;
}
inline const ::HeartBeatMessage& RtdbMessage::heartbeatmessage() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.heartBeatMessage)
  return heartbeatmessage_ != NULL ? *heartbeatmessage_
                         : *::HeartBeatMessage::internal_default_instance();
}
inline ::HeartBeatMessage* RtdbMessage::mutable_heartbeatmessage() {
  
  if (heartbeatmessage_ == NULL) {
    heartbeatmessage_ = new ::HeartBeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.heartBeatMessage)
  return heartbeatmessage_;
}
inline ::HeartBeatMessage* RtdbMessage::release_heartbeatmessage() {
  // @@protoc_insertion_point(field_release:RtdbMessage.heartBeatMessage)
  
  ::HeartBeatMessage* temp = heartbeatmessage_;
  heartbeatmessage_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_heartbeatmessage(::HeartBeatMessage* heartbeatmessage) {
  delete heartbeatmessage_;
  heartbeatmessage_ = heartbeatmessage;
  if (heartbeatmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.heartBeatMessage)
}

// .AlarmMessage alarmMessage = 18;
inline bool RtdbMessage::has_alarmmessage() const {
  return this != internal_default_instance() && alarmmessage_ != NULL;
}
inline void RtdbMessage::clear_alarmmessage() {
  if (GetArenaNoVirtual() == NULL && alarmmessage_ != NULL) delete alarmmessage_;
  alarmmessage_ = NULL;
}
inline const ::AlarmMessage& RtdbMessage::alarmmessage() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.alarmMessage)
  return alarmmessage_ != NULL ? *alarmmessage_
                         : *::AlarmMessage::internal_default_instance();
}
inline ::AlarmMessage* RtdbMessage::mutable_alarmmessage() {
  
  if (alarmmessage_ == NULL) {
    alarmmessage_ = new ::AlarmMessage;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.alarmMessage)
  return alarmmessage_;
}
inline ::AlarmMessage* RtdbMessage::release_alarmmessage() {
  // @@protoc_insertion_point(field_release:RtdbMessage.alarmMessage)
  
  ::AlarmMessage* temp = alarmmessage_;
  alarmmessage_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_alarmmessage(::AlarmMessage* alarmmessage) {
  delete alarmmessage_;
  alarmmessage_ = alarmmessage;
  if (alarmmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.alarmMessage)
}

// .CommunicationPair CommunicationPair = 19;
inline bool RtdbMessage::has_communicationpair() const {
  return this != internal_default_instance() && communicationpair_ != NULL;
}
inline void RtdbMessage::clear_communicationpair() {
  if (GetArenaNoVirtual() == NULL && communicationpair_ != NULL) delete communicationpair_;
  communicationpair_ = NULL;
}
inline const ::CommunicationPair& RtdbMessage::communicationpair() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.CommunicationPair)
  return communicationpair_ != NULL ? *communicationpair_
                         : *::CommunicationPair::internal_default_instance();
}
inline ::CommunicationPair* RtdbMessage::mutable_communicationpair() {
  
  if (communicationpair_ == NULL) {
    communicationpair_ = new ::CommunicationPair;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.CommunicationPair)
  return communicationpair_;
}
inline ::CommunicationPair* RtdbMessage::release_communicationpair() {
  // @@protoc_insertion_point(field_release:RtdbMessage.CommunicationPair)
  
  ::CommunicationPair* temp = communicationpair_;
  communicationpair_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_communicationpair(::CommunicationPair* communicationpair) {
  delete communicationpair_;
  communicationpair_ = communicationpair;
  if (communicationpair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.CommunicationPair)
}

// .FlowThreshold flowThreshold = 20;
inline bool RtdbMessage::has_flowthreshold() const {
  return this != internal_default_instance() && flowthreshold_ != NULL;
}
inline void RtdbMessage::clear_flowthreshold() {
  if (GetArenaNoVirtual() == NULL && flowthreshold_ != NULL) delete flowthreshold_;
  flowthreshold_ = NULL;
}
inline const ::FlowThreshold& RtdbMessage::flowthreshold() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.flowThreshold)
  return flowthreshold_ != NULL ? *flowthreshold_
                         : *::FlowThreshold::internal_default_instance();
}
inline ::FlowThreshold* RtdbMessage::mutable_flowthreshold() {
  
  if (flowthreshold_ == NULL) {
    flowthreshold_ = new ::FlowThreshold;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.flowThreshold)
  return flowthreshold_;
}
inline ::FlowThreshold* RtdbMessage::release_flowthreshold() {
  // @@protoc_insertion_point(field_release:RtdbMessage.flowThreshold)
  
  ::FlowThreshold* temp = flowthreshold_;
  flowthreshold_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_flowthreshold(::FlowThreshold* flowthreshold) {
  delete flowthreshold_;
  flowthreshold_ = flowthreshold;
  if (flowthreshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.flowThreshold)
}

// .AlarmDataMsg alarmDataMsg = 21;
inline bool RtdbMessage::has_alarmdatamsg() const {
  return this != internal_default_instance() && alarmdatamsg_ != NULL;
}
inline void RtdbMessage::clear_alarmdatamsg() {
  if (GetArenaNoVirtual() == NULL && alarmdatamsg_ != NULL) delete alarmdatamsg_;
  alarmdatamsg_ = NULL;
}
inline const ::AlarmDataMsg& RtdbMessage::alarmdatamsg() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.alarmDataMsg)
  return alarmdatamsg_ != NULL ? *alarmdatamsg_
                         : *::AlarmDataMsg::internal_default_instance();
}
inline ::AlarmDataMsg* RtdbMessage::mutable_alarmdatamsg() {
  
  if (alarmdatamsg_ == NULL) {
    alarmdatamsg_ = new ::AlarmDataMsg;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.alarmDataMsg)
  return alarmdatamsg_;
}
inline ::AlarmDataMsg* RtdbMessage::release_alarmdatamsg() {
  // @@protoc_insertion_point(field_release:RtdbMessage.alarmDataMsg)
  
  ::AlarmDataMsg* temp = alarmdatamsg_;
  alarmdatamsg_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_alarmdatamsg(::AlarmDataMsg* alarmdatamsg) {
  delete alarmdatamsg_;
  alarmdatamsg_ = alarmdatamsg;
  if (alarmdatamsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.alarmDataMsg)
}

// .UPRealPointValue upRealPointValue = 22;
inline bool RtdbMessage::has_uprealpointvalue() const {
  return this != internal_default_instance() && uprealpointvalue_ != NULL;
}
inline void RtdbMessage::clear_uprealpointvalue() {
  if (GetArenaNoVirtual() == NULL && uprealpointvalue_ != NULL) delete uprealpointvalue_;
  uprealpointvalue_ = NULL;
}
inline const ::UPRealPointValue& RtdbMessage::uprealpointvalue() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.upRealPointValue)
  return uprealpointvalue_ != NULL ? *uprealpointvalue_
                         : *::UPRealPointValue::internal_default_instance();
}
inline ::UPRealPointValue* RtdbMessage::mutable_uprealpointvalue() {
  
  if (uprealpointvalue_ == NULL) {
    uprealpointvalue_ = new ::UPRealPointValue;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.upRealPointValue)
  return uprealpointvalue_;
}
inline ::UPRealPointValue* RtdbMessage::release_uprealpointvalue() {
  // @@protoc_insertion_point(field_release:RtdbMessage.upRealPointValue)
  
  ::UPRealPointValue* temp = uprealpointvalue_;
  uprealpointvalue_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_uprealpointvalue(::UPRealPointValue* uprealpointvalue) {
  delete uprealpointvalue_;
  uprealpointvalue_ = uprealpointvalue;
  if (uprealpointvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.upRealPointValue)
}

// .RemoteControl remoteControl = 23;
inline bool RtdbMessage::has_remotecontrol() const {
  return this != internal_default_instance() && remotecontrol_ != NULL;
}
inline void RtdbMessage::clear_remotecontrol() {
  if (GetArenaNoVirtual() == NULL && remotecontrol_ != NULL) delete remotecontrol_;
  remotecontrol_ = NULL;
}
inline const ::RemoteControl& RtdbMessage::remotecontrol() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.remoteControl)
  return remotecontrol_ != NULL ? *remotecontrol_
                         : *::RemoteControl::internal_default_instance();
}
inline ::RemoteControl* RtdbMessage::mutable_remotecontrol() {
  
  if (remotecontrol_ == NULL) {
    remotecontrol_ = new ::RemoteControl;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.remoteControl)
  return remotecontrol_;
}
inline ::RemoteControl* RtdbMessage::release_remotecontrol() {
  // @@protoc_insertion_point(field_release:RtdbMessage.remoteControl)
  
  ::RemoteControl* temp = remotecontrol_;
  remotecontrol_ = NULL;
  return temp;
}
inline void RtdbMessage::set_allocated_remotecontrol(::RemoteControl* remotecontrol) {
  delete remotecontrol_;
  remotecontrol_ = remotecontrol;
  if (remotecontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.remoteControl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PointValueType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::RtdbMessageType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::ObjectType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RtdbMessage_2eproto__INCLUDED
