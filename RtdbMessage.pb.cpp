// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtdbMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RtdbMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class RawMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RawMessage> {
} _RawMessage_default_instance_;
class AlarmMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AlarmMessage> {
} _AlarmMessage_default_instance_;
class DebugRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DebugRequest> {
} _DebugRequest_default_instance_;
class SOEMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SOEMessage> {
} _SOEMessage_default_instance_;
class ControlRequetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControlRequet> {
} _ControlRequet_default_instance_;
class LogRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogRequest> {
} _LogRequest_default_instance_;
class RealLogResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RealLogResponse> {
} _RealLogResponse_default_instance_;
class LogQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogQuery> {
} _LogQuery_default_instance_;
class HisLogResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HisLogResponse> {
} _HisLogResponse_default_instance_;
class NetcardInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetcardInfoRequest> {
} _NetcardInfoRequest_default_instance_;
class NetcardInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetcardInfo> {
} _NetcardInfo_default_instance_;
class NetcardInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetcardInfoResponse> {
} _NetcardInfoResponse_default_instance_;
class ProcessDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessData> {
} _ProcessData_default_instance_;
class ProcessCtrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessCtrl> {
} _ProcessCtrl_default_instance_;
class RealPointValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RealPointValue> {
} _RealPointValue_default_instance_;
class HeartBeatMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatMessage> {
} _HeartBeatMessage_default_instance_;
class CommunicationPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommunicationPair> {
} _CommunicationPair_default_instance_;
class UPRealPointValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UPRealPointValue> {
} _UPRealPointValue_default_instance_;
class FlowThresholdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlowThreshold> {
} _FlowThreshold_default_instance_;
class AlarmDataMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AlarmDataMsg> {
} _AlarmDataMsg_default_instance_;
class RemoteControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoteControl> {
} _RemoteControl_default_instance_;
class RtdbMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RtdbMessage> {
} _RtdbMessage_default_instance_;

namespace protobuf_RtdbMessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _RawMessage_default_instance_.Shutdown();
  _AlarmMessage_default_instance_.Shutdown();
  _DebugRequest_default_instance_.Shutdown();
  _SOEMessage_default_instance_.Shutdown();
  _ControlRequet_default_instance_.Shutdown();
  _LogRequest_default_instance_.Shutdown();
  _RealLogResponse_default_instance_.Shutdown();
  _LogQuery_default_instance_.Shutdown();
  _HisLogResponse_default_instance_.Shutdown();
  _NetcardInfoRequest_default_instance_.Shutdown();
  _NetcardInfo_default_instance_.Shutdown();
  _NetcardInfoResponse_default_instance_.Shutdown();
  _ProcessData_default_instance_.Shutdown();
  _ProcessCtrl_default_instance_.Shutdown();
  _RealPointValue_default_instance_.Shutdown();
  _HeartBeatMessage_default_instance_.Shutdown();
  _CommunicationPair_default_instance_.Shutdown();
  _UPRealPointValue_default_instance_.Shutdown();
  _FlowThreshold_default_instance_.Shutdown();
  _AlarmDataMsg_default_instance_.Shutdown();
  _RemoteControl_default_instance_.Shutdown();
  _RtdbMessage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RawMessage_default_instance_.DefaultConstruct();
  _AlarmMessage_default_instance_.DefaultConstruct();
  _DebugRequest_default_instance_.DefaultConstruct();
  _SOEMessage_default_instance_.DefaultConstruct();
  _ControlRequet_default_instance_.DefaultConstruct();
  _LogRequest_default_instance_.DefaultConstruct();
  _RealLogResponse_default_instance_.DefaultConstruct();
  _LogQuery_default_instance_.DefaultConstruct();
  _HisLogResponse_default_instance_.DefaultConstruct();
  _NetcardInfoRequest_default_instance_.DefaultConstruct();
  _NetcardInfo_default_instance_.DefaultConstruct();
  _NetcardInfoResponse_default_instance_.DefaultConstruct();
  _ProcessData_default_instance_.DefaultConstruct();
  _ProcessCtrl_default_instance_.DefaultConstruct();
  _RealPointValue_default_instance_.DefaultConstruct();
  _HeartBeatMessage_default_instance_.DefaultConstruct();
  _CommunicationPair_default_instance_.DefaultConstruct();
  _UPRealPointValue_default_instance_.DefaultConstruct();
  _FlowThreshold_default_instance_.DefaultConstruct();
  _AlarmDataMsg_default_instance_.DefaultConstruct();
  _RemoteControl_default_instance_.DefaultConstruct();
  _RtdbMessage_default_instance_.DefaultConstruct();
  _RtdbMessage_default_instance_.get_mutable()->logrequest_ = const_cast< ::LogRequest*>(
      ::LogRequest::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->reallogresponse_ = const_cast< ::RealLogResponse*>(
      ::RealLogResponse::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->hislogquery_ = const_cast< ::LogQuery*>(
      ::LogQuery::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->hislogresponse_ = const_cast< ::HisLogResponse*>(
      ::HisLogResponse::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->netcardinforequest_ = const_cast< ::NetcardInfoRequest*>(
      ::NetcardInfoRequest::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->netcardinforesponse_ = const_cast< ::NetcardInfoResponse*>(
      ::NetcardInfoResponse::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->processdata_ = const_cast< ::ProcessData*>(
      ::ProcessData::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->processctrl_ = const_cast< ::ProcessCtrl*>(
      ::ProcessCtrl::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->realpointvalue_ = const_cast< ::RealPointValue*>(
      ::RealPointValue::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->heartbeatmessage_ = const_cast< ::HeartBeatMessage*>(
      ::HeartBeatMessage::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->alarmmessage_ = const_cast< ::AlarmMessage*>(
      ::AlarmMessage::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->communicationpair_ = const_cast< ::CommunicationPair*>(
      ::CommunicationPair::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->flowthreshold_ = const_cast< ::FlowThreshold*>(
      ::FlowThreshold::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->alarmdatamsg_ = const_cast< ::AlarmDataMsg*>(
      ::AlarmDataMsg::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->uprealpointvalue_ = const_cast< ::UPRealPointValue*>(
      ::UPRealPointValue::internal_default_instance());
  _RtdbMessage_default_instance_.get_mutable()->remotecontrol_ = const_cast< ::RemoteControl*>(
      ::RemoteControl::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_RtdbMessage_2eproto

bool PointValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

bool RtdbMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawMessage::kDataFieldNumber;
const int RawMessage::kFileNameFieldNumber;
const int RawMessage::kStartOffsetFieldNumber;
const int RawMessage::kMessageNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawMessage::RawMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RawMessage)
}
RawMessage::RawMessage(const RawMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&startoffset_, &from.startoffset_,
    reinterpret_cast<char*>(&messagenumber_) -
    reinterpret_cast<char*>(&startoffset_) + sizeof(messagenumber_));
  // @@protoc_insertion_point(copy_constructor:RawMessage)
}

void RawMessage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startoffset_, 0, reinterpret_cast<char*>(&messagenumber_) -
    reinterpret_cast<char*>(&startoffset_) + sizeof(messagenumber_));
  _cached_size_ = 0;
}

RawMessage::~RawMessage() {
  // @@protoc_insertion_point(destructor:RawMessage)
  SharedDtor();
}

void RawMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RawMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RawMessage& RawMessage::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RawMessage* RawMessage::New(::google::protobuf::Arena* arena) const {
  RawMessage* n = new RawMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RawMessage)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startoffset_, 0, reinterpret_cast<char*>(&messagenumber_) -
    reinterpret_cast<char*>(&startoffset_) + sizeof(messagenumber_));
}

bool RawMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RawMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RawMessage.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RawMessage.fileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 startOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 messageNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RawMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RawMessage)
  return false;
#undef DO_
}

void RawMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RawMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RawMessage.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RawMessage.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // int32 startOffset = 3;
  if (this->startoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startoffset(), output);
  }

  // int32 messageNumber = 4;
  if (this->messagenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->messagenumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:RawMessage)
}

size_t RawMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawMessage)
  size_t total_size = 0;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 startOffset = 3;
  if (this->startoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startoffset());
  }

  // int32 messageNumber = 4;
  if (this->messagenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagenumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RawMessage*>(&from));
}

void RawMessage::MergeFrom(const RawMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.startoffset() != 0) {
    set_startoffset(from.startoffset());
  }
  if (from.messagenumber() != 0) {
    set_messagenumber(from.messagenumber());
  }
}

void RawMessage::CopyFrom(const RawMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawMessage::IsInitialized() const {
  return true;
}

void RawMessage::Swap(RawMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawMessage::InternalSwap(RawMessage* other) {
  data_.Swap(&other->data_);
  filename_.Swap(&other->filename_);
  std::swap(startoffset_, other->startoffset_);
  std::swap(messagenumber_, other->messagenumber_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RawMessage::GetTypeName() const {
  return "RawMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawMessage

// string data = 1;
void RawMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawMessage::data() const {
  // @@protoc_insertion_point(field_get:RawMessage.data)
  return data_.GetNoArena();
}
void RawMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RawMessage.data)
}
#if LANG_CXX11
void RawMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RawMessage.data)
}
#endif
void RawMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RawMessage.data)
}
void RawMessage::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RawMessage.data)
}
::std::string* RawMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:RawMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawMessage::release_data() {
  // @@protoc_insertion_point(field_release:RawMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:RawMessage.data)
}

// string fileName = 2;
void RawMessage::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawMessage::filename() const {
  // @@protoc_insertion_point(field_get:RawMessage.fileName)
  return filename_.GetNoArena();
}
void RawMessage::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RawMessage.fileName)
}
#if LANG_CXX11
void RawMessage::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RawMessage.fileName)
}
#endif
void RawMessage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RawMessage.fileName)
}
void RawMessage::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RawMessage.fileName)
}
::std::string* RawMessage::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:RawMessage.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawMessage::release_filename() {
  // @@protoc_insertion_point(field_release:RawMessage.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawMessage::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RawMessage.fileName)
}

// int32 startOffset = 3;
void RawMessage::clear_startoffset() {
  startoffset_ = 0;
}
::google::protobuf::int32 RawMessage::startoffset() const {
  // @@protoc_insertion_point(field_get:RawMessage.startOffset)
  return startoffset_;
}
void RawMessage::set_startoffset(::google::protobuf::int32 value) {
  
  startoffset_ = value;
  // @@protoc_insertion_point(field_set:RawMessage.startOffset)
}

// int32 messageNumber = 4;
void RawMessage::clear_messagenumber() {
  messagenumber_ = 0;
}
::google::protobuf::int32 RawMessage::messagenumber() const {
  // @@protoc_insertion_point(field_get:RawMessage.messageNumber)
  return messagenumber_;
}
void RawMessage::set_messagenumber(::google::protobuf::int32 value) {
  
  messagenumber_ = value;
  // @@protoc_insertion_point(field_set:RawMessage.messageNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlarmMessage::kTypeFieldNumber;
const int AlarmMessage::kEthNameFieldNumber;
const int AlarmMessage::kMacFieldNumber;
const int AlarmMessage::kIpFieldNumber;
const int AlarmMessage::kTimeFieldNumber;
const int AlarmMessage::kPortFieldNumber;
const int AlarmMessage::kAlarmIdFieldNumber;
const int AlarmMessage::kAlarmStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlarmMessage::AlarmMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AlarmMessage)
}
AlarmMessage::AlarmMessage(const AlarmMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ethname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ethname().size() > 0) {
    ethname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ethname_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&alarmstatus_) -
    reinterpret_cast<char*>(&time_) + sizeof(alarmstatus_));
  // @@protoc_insertion_point(copy_constructor:AlarmMessage)
}

void AlarmMessage::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ethname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&alarmstatus_) -
    reinterpret_cast<char*>(&time_) + sizeof(alarmstatus_));
  _cached_size_ = 0;
}

AlarmMessage::~AlarmMessage() {
  // @@protoc_insertion_point(destructor:AlarmMessage)
  SharedDtor();
}

void AlarmMessage::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ethname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlarmMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AlarmMessage& AlarmMessage::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlarmMessage* AlarmMessage::New(::google::protobuf::Arena* arena) const {
  AlarmMessage* n = new AlarmMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlarmMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AlarmMessage)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ethname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&alarmstatus_) -
    reinterpret_cast<char*>(&time_) + sizeof(alarmstatus_));
}

bool AlarmMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AlarmMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmMessage.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ethName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ethname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ethname().data(), this->ethname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmMessage.ethName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmMessage.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmMessage.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 alarmId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 alarmStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AlarmMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AlarmMessage)
  return false;
#undef DO_
}

void AlarmMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AlarmMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmMessage.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string ethName = 2;
  if (this->ethname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ethname().data(), this->ethname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmMessage.ethName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ethname(), output);
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmMessage.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mac(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmMessage.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // int32 time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // int32 port = 6;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  // int32 alarmId = 7;
  if (this->alarmid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->alarmid(), output);
  }

  // int32 alarmStatus = 8;
  if (this->alarmstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->alarmstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:AlarmMessage)
}

size_t AlarmMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlarmMessage)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string ethName = 2;
  if (this->ethname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ethname());
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 port = 6;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 alarmId = 7;
  if (this->alarmid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alarmid());
  }

  // int32 alarmStatus = 8;
  if (this->alarmstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alarmstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlarmMessage*>(&from));
}

void AlarmMessage::MergeFrom(const AlarmMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlarmMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.ethname().size() > 0) {

    ethname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ethname_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.alarmid() != 0) {
    set_alarmid(from.alarmid());
  }
  if (from.alarmstatus() != 0) {
    set_alarmstatus(from.alarmstatus());
  }
}

void AlarmMessage::CopyFrom(const AlarmMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlarmMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMessage::IsInitialized() const {
  return true;
}

void AlarmMessage::Swap(AlarmMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlarmMessage::InternalSwap(AlarmMessage* other) {
  type_.Swap(&other->type_);
  ethname_.Swap(&other->ethname_);
  mac_.Swap(&other->mac_);
  ip_.Swap(&other->ip_);
  std::swap(time_, other->time_);
  std::swap(port_, other->port_);
  std::swap(alarmid_, other->alarmid_);
  std::swap(alarmstatus_, other->alarmstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AlarmMessage::GetTypeName() const {
  return "AlarmMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlarmMessage

// string type = 1;
void AlarmMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmMessage::type() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.type)
  return type_.GetNoArena();
}
void AlarmMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.type)
}
#if LANG_CXX11
void AlarmMessage::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.type)
}
#endif
void AlarmMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.type)
}
void AlarmMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.type)
}
::std::string* AlarmMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmMessage::release_type() {
  // @@protoc_insertion_point(field_release:AlarmMessage.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmMessage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.type)
}

// string ethName = 2;
void AlarmMessage::clear_ethname() {
  ethname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmMessage::ethname() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.ethName)
  return ethname_.GetNoArena();
}
void AlarmMessage::set_ethname(const ::std::string& value) {
  
  ethname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.ethName)
}
#if LANG_CXX11
void AlarmMessage::set_ethname(::std::string&& value) {
  
  ethname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.ethName)
}
#endif
void AlarmMessage::set_ethname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ethname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.ethName)
}
void AlarmMessage::set_ethname(const char* value, size_t size) {
  
  ethname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.ethName)
}
::std::string* AlarmMessage::mutable_ethname() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.ethName)
  return ethname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmMessage::release_ethname() {
  // @@protoc_insertion_point(field_release:AlarmMessage.ethName)
  
  return ethname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmMessage::set_allocated_ethname(::std::string* ethname) {
  if (ethname != NULL) {
    
  } else {
    
  }
  ethname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ethname);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.ethName)
}

// string mac = 3;
void AlarmMessage::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmMessage::mac() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.mac)
  return mac_.GetNoArena();
}
void AlarmMessage::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.mac)
}
#if LANG_CXX11
void AlarmMessage::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.mac)
}
#endif
void AlarmMessage::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.mac)
}
void AlarmMessage::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.mac)
}
::std::string* AlarmMessage::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmMessage::release_mac() {
  // @@protoc_insertion_point(field_release:AlarmMessage.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmMessage::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.mac)
}

// string ip = 4;
void AlarmMessage::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmMessage::ip() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.ip)
  return ip_.GetNoArena();
}
void AlarmMessage::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmMessage.ip)
}
#if LANG_CXX11
void AlarmMessage::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmMessage.ip)
}
#endif
void AlarmMessage::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmMessage.ip)
}
void AlarmMessage::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmMessage.ip)
}
::std::string* AlarmMessage::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:AlarmMessage.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmMessage::release_ip() {
  // @@protoc_insertion_point(field_release:AlarmMessage.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmMessage::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:AlarmMessage.ip)
}

// int32 time = 5;
void AlarmMessage::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 AlarmMessage::time() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.time)
  return time_;
}
void AlarmMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.time)
}

// int32 port = 6;
void AlarmMessage::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 AlarmMessage::port() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.port)
  return port_;
}
void AlarmMessage::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.port)
}

// int32 alarmId = 7;
void AlarmMessage::clear_alarmid() {
  alarmid_ = 0;
}
::google::protobuf::int32 AlarmMessage::alarmid() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.alarmId)
  return alarmid_;
}
void AlarmMessage::set_alarmid(::google::protobuf::int32 value) {
  
  alarmid_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.alarmId)
}

// int32 alarmStatus = 8;
void AlarmMessage::clear_alarmstatus() {
  alarmstatus_ = 0;
}
::google::protobuf::int32 AlarmMessage::alarmstatus() const {
  // @@protoc_insertion_point(field_get:AlarmMessage.alarmStatus)
  return alarmstatus_;
}
void AlarmMessage::set_alarmstatus(::google::protobuf::int32 value) {
  
  alarmstatus_ = value;
  // @@protoc_insertion_point(field_set:AlarmMessage.alarmStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugRequest::kAddressFieldNumber;
const int DebugRequest::kTimeFieldNumber;
const int DebugRequest::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugRequest::DebugRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DebugRequest)
}
DebugRequest::DebugRequest(const DebugRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:DebugRequest)
}

void DebugRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_) + sizeof(quality_));
  _cached_size_ = 0;
}

DebugRequest::~DebugRequest() {
  // @@protoc_insertion_point(destructor:DebugRequest)
  SharedDtor();
}

void DebugRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebugRequest& DebugRequest::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugRequest* DebugRequest::New(::google::protobuf::Arena* arena) const {
  DebugRequest* n = new DebugRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DebugRequest)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_) + sizeof(quality_));
}

bool DebugRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DebugRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DebugRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DebugRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DebugRequest)
  return false;
#undef DO_
}

void DebugRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DebugRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DebugRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // int32 quality = 4;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // @@protoc_insertion_point(serialize_end:DebugRequest)
}

size_t DebugRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DebugRequest)
  size_t total_size = 0;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 quality = 4;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebugRequest*>(&from));
}

void DebugRequest::MergeFrom(const DebugRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DebugRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void DebugRequest::CopyFrom(const DebugRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DebugRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugRequest::IsInitialized() const {
  return true;
}

void DebugRequest::Swap(DebugRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugRequest::InternalSwap(DebugRequest* other) {
  address_.Swap(&other->address_);
  std::swap(time_, other->time_);
  std::swap(quality_, other->quality_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DebugRequest::GetTypeName() const {
  return "DebugRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugRequest

// string address = 1;
void DebugRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DebugRequest::address() const {
  // @@protoc_insertion_point(field_get:DebugRequest.address)
  return address_.GetNoArena();
}
void DebugRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DebugRequest.address)
}
#if LANG_CXX11
void DebugRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DebugRequest.address)
}
#endif
void DebugRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DebugRequest.address)
}
void DebugRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DebugRequest.address)
}
::std::string* DebugRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:DebugRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DebugRequest::release_address() {
  // @@protoc_insertion_point(field_release:DebugRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:DebugRequest.address)
}

// int32 time = 3;
void DebugRequest::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 DebugRequest::time() const {
  // @@protoc_insertion_point(field_get:DebugRequest.time)
  return time_;
}
void DebugRequest::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:DebugRequest.time)
}

// int32 quality = 4;
void DebugRequest::clear_quality() {
  quality_ = 0;
}
::google::protobuf::int32 DebugRequest::quality() const {
  // @@protoc_insertion_point(field_get:DebugRequest.quality)
  return quality_;
}
void DebugRequest::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:DebugRequest.quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SOEMessage::kAddressFieldNumber;
const int SOEMessage::kTimeFieldNumber;
const int SOEMessage::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SOEMessage::SOEMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SOEMessage)
}
SOEMessage::SOEMessage(const SOEMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:SOEMessage)
}

void SOEMessage::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_) + sizeof(quality_));
  _cached_size_ = 0;
}

SOEMessage::~SOEMessage() {
  // @@protoc_insertion_point(destructor:SOEMessage)
  SharedDtor();
}

void SOEMessage::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SOEMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SOEMessage& SOEMessage::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SOEMessage* SOEMessage::New(::google::protobuf::Arena* arena) const {
  SOEMessage* n = new SOEMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SOEMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SOEMessage)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_) + sizeof(quality_));
}

bool SOEMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SOEMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SOEMessage.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SOEMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SOEMessage)
  return false;
#undef DO_
}

void SOEMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SOEMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SOEMessage.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // int32 quality = 4;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // @@protoc_insertion_point(serialize_end:SOEMessage)
}

size_t SOEMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SOEMessage)
  size_t total_size = 0;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 quality = 4;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SOEMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SOEMessage*>(&from));
}

void SOEMessage::MergeFrom(const SOEMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SOEMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void SOEMessage::CopyFrom(const SOEMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SOEMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOEMessage::IsInitialized() const {
  return true;
}

void SOEMessage::Swap(SOEMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SOEMessage::InternalSwap(SOEMessage* other) {
  address_.Swap(&other->address_);
  std::swap(time_, other->time_);
  std::swap(quality_, other->quality_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SOEMessage::GetTypeName() const {
  return "SOEMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SOEMessage

// string address = 1;
void SOEMessage::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SOEMessage::address() const {
  // @@protoc_insertion_point(field_get:SOEMessage.address)
  return address_.GetNoArena();
}
void SOEMessage::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SOEMessage.address)
}
#if LANG_CXX11
void SOEMessage::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SOEMessage.address)
}
#endif
void SOEMessage::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SOEMessage.address)
}
void SOEMessage::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SOEMessage.address)
}
::std::string* SOEMessage::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:SOEMessage.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SOEMessage::release_address() {
  // @@protoc_insertion_point(field_release:SOEMessage.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SOEMessage::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:SOEMessage.address)
}

// int32 time = 3;
void SOEMessage::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 SOEMessage::time() const {
  // @@protoc_insertion_point(field_get:SOEMessage.time)
  return time_;
}
void SOEMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SOEMessage.time)
}

// int32 quality = 4;
void SOEMessage::clear_quality() {
  quality_ = 0;
}
::google::protobuf::int32 SOEMessage::quality() const {
  // @@protoc_insertion_point(field_get:SOEMessage.quality)
  return quality_;
}
void SOEMessage::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:SOEMessage.quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlRequet::kAddressFieldNumber;
const int ControlRequet::kErrorInfoFieldNumber;
const int ControlRequet::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlRequet::ControlRequet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlRequet)
}
ControlRequet::ControlRequet(const ControlRequet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  errorinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errorinfo().size() > 0) {
    errorinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorinfo_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ControlRequet)
}

void ControlRequet::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  _cached_size_ = 0;
}

ControlRequet::~ControlRequet() {
  // @@protoc_insertion_point(destructor:ControlRequet)
  SharedDtor();
}

void ControlRequet::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControlRequet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ControlRequet& ControlRequet::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControlRequet* ControlRequet::New(::google::protobuf::Arena* arena) const {
  ControlRequet* n = new ControlRequet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlRequet::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlRequet)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

bool ControlRequet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlRequet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlRequet.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errorinfo().data(), this->errorinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlRequet.errorInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlRequet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlRequet)
  return false;
#undef DO_
}

void ControlRequet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlRequet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlRequet.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string errorInfo = 2;
  if (this->errorinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorinfo().data(), this->errorinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlRequet.errorInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errorinfo(), output);
  }

  // bool status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:ControlRequet)
}

size_t ControlRequet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlRequet)
  size_t total_size = 0;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string errorInfo = 2;
  if (this->errorinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errorinfo());
  }

  // bool status = 3;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlRequet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ControlRequet*>(&from));
}

void ControlRequet::MergeFrom(const ControlRequet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlRequet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.errorinfo().size() > 0) {

    errorinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorinfo_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ControlRequet::CopyFrom(const ControlRequet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlRequet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlRequet::IsInitialized() const {
  return true;
}

void ControlRequet::Swap(ControlRequet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlRequet::InternalSwap(ControlRequet* other) {
  address_.Swap(&other->address_);
  errorinfo_.Swap(&other->errorinfo_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ControlRequet::GetTypeName() const {
  return "ControlRequet";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlRequet

// string address = 1;
void ControlRequet::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ControlRequet::address() const {
  // @@protoc_insertion_point(field_get:ControlRequet.address)
  return address_.GetNoArena();
}
void ControlRequet::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ControlRequet.address)
}
#if LANG_CXX11
void ControlRequet::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ControlRequet.address)
}
#endif
void ControlRequet::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ControlRequet.address)
}
void ControlRequet::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ControlRequet.address)
}
::std::string* ControlRequet::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ControlRequet.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ControlRequet::release_address() {
  // @@protoc_insertion_point(field_release:ControlRequet.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControlRequet::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ControlRequet.address)
}

// string errorInfo = 2;
void ControlRequet::clear_errorinfo() {
  errorinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ControlRequet::errorinfo() const {
  // @@protoc_insertion_point(field_get:ControlRequet.errorInfo)
  return errorinfo_.GetNoArena();
}
void ControlRequet::set_errorinfo(const ::std::string& value) {
  
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ControlRequet.errorInfo)
}
#if LANG_CXX11
void ControlRequet::set_errorinfo(::std::string&& value) {
  
  errorinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ControlRequet.errorInfo)
}
#endif
void ControlRequet::set_errorinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ControlRequet.errorInfo)
}
void ControlRequet::set_errorinfo(const char* value, size_t size) {
  
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ControlRequet.errorInfo)
}
::std::string* ControlRequet::mutable_errorinfo() {
  
  // @@protoc_insertion_point(field_mutable:ControlRequet.errorInfo)
  return errorinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ControlRequet::release_errorinfo() {
  // @@protoc_insertion_point(field_release:ControlRequet.errorInfo)
  
  return errorinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControlRequet::set_allocated_errorinfo(::std::string* errorinfo) {
  if (errorinfo != NULL) {
    
  } else {
    
  }
  errorinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorinfo);
  // @@protoc_insertion_point(field_set_allocated:ControlRequet.errorInfo)
}

// bool status = 3;
void ControlRequet::clear_status() {
  status_ = false;
}
bool ControlRequet::status() const {
  // @@protoc_insertion_point(field_get:ControlRequet.status)
  return status_;
}
void ControlRequet::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ControlRequet.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRequest::kChannelNameFieldNumber;
const int LogRequest::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRequest::LogRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogRequest)
}
LogRequest::LogRequest(const LogRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:LogRequest)
}

void LogRequest::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
  _cached_size_ = 0;
}

LogRequest::~LogRequest() {
  // @@protoc_insertion_point(destructor:LogRequest)
  SharedDtor();
}

void LogRequest::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogRequest& LogRequest::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRequest* LogRequest::New(::google::protobuf::Arena* arena) const {
  LogRequest* n = new LogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LogRequest)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
}

bool LogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogRequest.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogRequest)
  return false;
#undef DO_
}

void LogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogRequest.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:LogRequest)
}

size_t LogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogRequest)
  size_t total_size = 0;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // int32 command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogRequest*>(&from));
}

void LogRequest::MergeFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void LogRequest::CopyFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {
  return true;
}

void LogRequest::Swap(LogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRequest::InternalSwap(LogRequest* other) {
  channelname_.Swap(&other->channelname_);
  std::swap(command_, other->command_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogRequest::GetTypeName() const {
  return "LogRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRequest

// string channelName = 1;
void LogRequest::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogRequest::channelname() const {
  // @@protoc_insertion_point(field_get:LogRequest.channelName)
  return channelname_.GetNoArena();
}
void LogRequest::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogRequest.channelName)
}
#if LANG_CXX11
void LogRequest::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogRequest.channelName)
}
#endif
void LogRequest::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogRequest.channelName)
}
void LogRequest::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogRequest.channelName)
}
::std::string* LogRequest::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:LogRequest.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRequest::release_channelname() {
  // @@protoc_insertion_point(field_release:LogRequest.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRequest::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:LogRequest.channelName)
}

// int32 command = 2;
void LogRequest::clear_command() {
  command_ = 0;
}
::google::protobuf::int32 LogRequest::command() const {
  // @@protoc_insertion_point(field_get:LogRequest.command)
  return command_;
}
void LogRequest::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:LogRequest.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealLogResponse::kTypeFieldNumber;
const int RealLogResponse::kLevelFieldNumber;
const int RealLogResponse::kChannelNameFieldNumber;
const int RealLogResponse::kDevNameFieldNumber;
const int RealLogResponse::kLogTimeFieldNumber;
const int RealLogResponse::kLogDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealLogResponse::RealLogResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RealLogResponse)
}
RealLogResponse::RealLogResponse(const RealLogResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  devname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devname().size() > 0) {
    devname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devname_);
  }
  logdetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logdetail().size() > 0) {
    logdetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logdetail_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&logtime_) -
    reinterpret_cast<char*>(&type_) + sizeof(logtime_));
  // @@protoc_insertion_point(copy_constructor:RealLogResponse)
}

void RealLogResponse::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logdetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&logtime_) -
    reinterpret_cast<char*>(&type_) + sizeof(logtime_));
  _cached_size_ = 0;
}

RealLogResponse::~RealLogResponse() {
  // @@protoc_insertion_point(destructor:RealLogResponse)
  SharedDtor();
}

void RealLogResponse::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logdetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RealLogResponse& RealLogResponse::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealLogResponse* RealLogResponse::New(::google::protobuf::Arena* arena) const {
  RealLogResponse* n = new RealLogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RealLogResponse)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logdetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&logtime_) -
    reinterpret_cast<char*>(&type_) + sizeof(logtime_));
}

bool RealLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RealLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channelName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealLogResponse.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string devName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devname().data(), this->devname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealLogResponse.devName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 logTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logDetail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logdetail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logdetail().data(), this->logdetail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealLogResponse.logDetail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RealLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RealLogResponse)
  return false;
#undef DO_
}

void RealLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RealLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // string channelName = 3;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealLogResponse.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelname(), output);
  }

  // string devName = 4;
  if (this->devname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealLogResponse.devName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devname(), output);
  }

  // uint64 logTime = 5;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logtime(), output);
  }

  // string logDetail = 6;
  if (this->logdetail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logdetail().data(), this->logdetail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealLogResponse.logDetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->logdetail(), output);
  }

  // @@protoc_insertion_point(serialize_end:RealLogResponse)
}

size_t RealLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RealLogResponse)
  size_t total_size = 0;

  // string channelName = 3;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // string devName = 4;
  if (this->devname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devname());
  }

  // string logDetail = 6;
  if (this->logdetail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logdetail());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // uint64 logTime = 5;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->logtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealLogResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RealLogResponse*>(&from));
}

void RealLogResponse::MergeFrom(const RealLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RealLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.devname().size() > 0) {

    devname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devname_);
  }
  if (from.logdetail().size() > 0) {

    logdetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logdetail_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
}

void RealLogResponse::CopyFrom(const RealLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RealLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealLogResponse::IsInitialized() const {
  return true;
}

void RealLogResponse::Swap(RealLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealLogResponse::InternalSwap(RealLogResponse* other) {
  channelname_.Swap(&other->channelname_);
  devname_.Swap(&other->devname_);
  logdetail_.Swap(&other->logdetail_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(logtime_, other->logtime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RealLogResponse::GetTypeName() const {
  return "RealLogResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealLogResponse

// int32 type = 1;
void RealLogResponse::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 RealLogResponse::type() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.type)
  return type_;
}
void RealLogResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:RealLogResponse.type)
}

// int32 level = 2;
void RealLogResponse::clear_level() {
  level_ = 0;
}
::google::protobuf::int32 RealLogResponse::level() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.level)
  return level_;
}
void RealLogResponse::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:RealLogResponse.level)
}

// string channelName = 3;
void RealLogResponse::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealLogResponse::channelname() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.channelName)
  return channelname_.GetNoArena();
}
void RealLogResponse::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealLogResponse.channelName)
}
#if LANG_CXX11
void RealLogResponse::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealLogResponse.channelName)
}
#endif
void RealLogResponse::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealLogResponse.channelName)
}
void RealLogResponse::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealLogResponse.channelName)
}
::std::string* RealLogResponse::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:RealLogResponse.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealLogResponse::release_channelname() {
  // @@protoc_insertion_point(field_release:RealLogResponse.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealLogResponse::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:RealLogResponse.channelName)
}

// string devName = 4;
void RealLogResponse::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealLogResponse::devname() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.devName)
  return devname_.GetNoArena();
}
void RealLogResponse::set_devname(const ::std::string& value) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealLogResponse.devName)
}
#if LANG_CXX11
void RealLogResponse::set_devname(::std::string&& value) {
  
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealLogResponse.devName)
}
#endif
void RealLogResponse::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealLogResponse.devName)
}
void RealLogResponse::set_devname(const char* value, size_t size) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealLogResponse.devName)
}
::std::string* RealLogResponse::mutable_devname() {
  
  // @@protoc_insertion_point(field_mutable:RealLogResponse.devName)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealLogResponse::release_devname() {
  // @@protoc_insertion_point(field_release:RealLogResponse.devName)
  
  return devname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealLogResponse::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    
  } else {
    
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:RealLogResponse.devName)
}

// uint64 logTime = 5;
void RealLogResponse::clear_logtime() {
  logtime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RealLogResponse::logtime() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.logTime)
  return logtime_;
}
void RealLogResponse::set_logtime(::google::protobuf::uint64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:RealLogResponse.logTime)
}

// string logDetail = 6;
void RealLogResponse::clear_logdetail() {
  logdetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealLogResponse::logdetail() const {
  // @@protoc_insertion_point(field_get:RealLogResponse.logDetail)
  return logdetail_.GetNoArena();
}
void RealLogResponse::set_logdetail(const ::std::string& value) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealLogResponse.logDetail)
}
#if LANG_CXX11
void RealLogResponse::set_logdetail(::std::string&& value) {
  
  logdetail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealLogResponse.logDetail)
}
#endif
void RealLogResponse::set_logdetail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealLogResponse.logDetail)
}
void RealLogResponse::set_logdetail(const char* value, size_t size) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealLogResponse.logDetail)
}
::std::string* RealLogResponse::mutable_logdetail() {
  
  // @@protoc_insertion_point(field_mutable:RealLogResponse.logDetail)
  return logdetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealLogResponse::release_logdetail() {
  // @@protoc_insertion_point(field_release:RealLogResponse.logDetail)
  
  return logdetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealLogResponse::set_allocated_logdetail(::std::string* logdetail) {
  if (logdetail != NULL) {
    
  } else {
    
  }
  logdetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logdetail);
  // @@protoc_insertion_point(field_set_allocated:RealLogResponse.logDetail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogQuery::kLevelFieldNumber;
const int LogQuery::kTypeFieldNumber;
const int LogQuery::kStartTimeFieldNumber;
const int LogQuery::kEndTimeFieldNumber;
const int LogQuery::kChannelNameFieldNumber;
const int LogQuery::kDevNameFieldNumber;
const int LogQuery::kStopQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogQuery::LogQuery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogQuery)
}
LogQuery::LogQuery(const LogQuery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  devname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devname().size() > 0) {
    devname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devname_);
  }
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&stopquery_) -
    reinterpret_cast<char*>(&level_) + sizeof(stopquery_));
  // @@protoc_insertion_point(copy_constructor:LogQuery)
}

void LogQuery::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, reinterpret_cast<char*>(&stopquery_) -
    reinterpret_cast<char*>(&level_) + sizeof(stopquery_));
  _cached_size_ = 0;
}

LogQuery::~LogQuery() {
  // @@protoc_insertion_point(destructor:LogQuery)
  SharedDtor();
}

void LogQuery::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogQuery& LogQuery::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogQuery* LogQuery::New(::google::protobuf::Arena* arena) const {
  LogQuery* n = new LogQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:LogQuery)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, reinterpret_cast<char*>(&stopquery_) -
    reinterpret_cast<char*>(&level_) + sizeof(stopquery_));
}

bool LogQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 startTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 endTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channelName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogQuery.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string devName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devname().data(), this->devname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogQuery.devName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stopQuery = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stopquery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogQuery)
  return false;
#undef DO_
}

void LogQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // uint64 startTime = 3;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttime(), output);
  }

  // uint64 endTime = 4;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->endtime(), output);
  }

  // string channelName = 5;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogQuery.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->channelname(), output);
  }

  // string devName = 6;
  if (this->devname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogQuery.devName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->devname(), output);
  }

  // int32 stopQuery = 7;
  if (this->stopquery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stopquery(), output);
  }

  // @@protoc_insertion_point(serialize_end:LogQuery)
}

size_t LogQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogQuery)
  size_t total_size = 0;

  // string channelName = 5;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // string devName = 6;
  if (this->devname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devname());
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // uint64 startTime = 3;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->starttime());
  }

  // uint64 endTime = 4;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->endtime());
  }

  // int32 stopQuery = 7;
  if (this->stopquery() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stopquery());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogQuery*>(&from));
}

void LogQuery::MergeFrom(const LogQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.devname().size() > 0) {

    devname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devname_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.stopquery() != 0) {
    set_stopquery(from.stopquery());
  }
}

void LogQuery::CopyFrom(const LogQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogQuery::IsInitialized() const {
  return true;
}

void LogQuery::Swap(LogQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogQuery::InternalSwap(LogQuery* other) {
  channelname_.Swap(&other->channelname_);
  devname_.Swap(&other->devname_);
  std::swap(level_, other->level_);
  std::swap(type_, other->type_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(stopquery_, other->stopquery_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogQuery::GetTypeName() const {
  return "LogQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogQuery

// int32 level = 1;
void LogQuery::clear_level() {
  level_ = 0;
}
::google::protobuf::int32 LogQuery::level() const {
  // @@protoc_insertion_point(field_get:LogQuery.level)
  return level_;
}
void LogQuery::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.level)
}

// int32 type = 2;
void LogQuery::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 LogQuery::type() const {
  // @@protoc_insertion_point(field_get:LogQuery.type)
  return type_;
}
void LogQuery::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.type)
}

// uint64 startTime = 3;
void LogQuery::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogQuery::starttime() const {
  // @@protoc_insertion_point(field_get:LogQuery.startTime)
  return starttime_;
}
void LogQuery::set_starttime(::google::protobuf::uint64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.startTime)
}

// uint64 endTime = 4;
void LogQuery::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogQuery::endtime() const {
  // @@protoc_insertion_point(field_get:LogQuery.endTime)
  return endtime_;
}
void LogQuery::set_endtime(::google::protobuf::uint64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.endTime)
}

// string channelName = 5;
void LogQuery::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogQuery::channelname() const {
  // @@protoc_insertion_point(field_get:LogQuery.channelName)
  return channelname_.GetNoArena();
}
void LogQuery::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogQuery.channelName)
}
#if LANG_CXX11
void LogQuery::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogQuery.channelName)
}
#endif
void LogQuery::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogQuery.channelName)
}
void LogQuery::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogQuery.channelName)
}
::std::string* LogQuery::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:LogQuery.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogQuery::release_channelname() {
  // @@protoc_insertion_point(field_release:LogQuery.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogQuery::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:LogQuery.channelName)
}

// string devName = 6;
void LogQuery::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogQuery::devname() const {
  // @@protoc_insertion_point(field_get:LogQuery.devName)
  return devname_.GetNoArena();
}
void LogQuery::set_devname(const ::std::string& value) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogQuery.devName)
}
#if LANG_CXX11
void LogQuery::set_devname(::std::string&& value) {
  
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogQuery.devName)
}
#endif
void LogQuery::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogQuery.devName)
}
void LogQuery::set_devname(const char* value, size_t size) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogQuery.devName)
}
::std::string* LogQuery::mutable_devname() {
  
  // @@protoc_insertion_point(field_mutable:LogQuery.devName)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogQuery::release_devname() {
  // @@protoc_insertion_point(field_release:LogQuery.devName)
  
  return devname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogQuery::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    
  } else {
    
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:LogQuery.devName)
}

// int32 stopQuery = 7;
void LogQuery::clear_stopquery() {
  stopquery_ = 0;
}
::google::protobuf::int32 LogQuery::stopquery() const {
  // @@protoc_insertion_point(field_get:LogQuery.stopQuery)
  return stopquery_;
}
void LogQuery::set_stopquery(::google::protobuf::int32 value) {
  
  stopquery_ = value;
  // @@protoc_insertion_point(field_set:LogQuery.stopQuery)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HisLogResponse::kTypeFieldNumber;
const int HisLogResponse::kLevelFieldNumber;
const int HisLogResponse::kChannelNameFieldNumber;
const int HisLogResponse::kDevNameFieldNumber;
const int HisLogResponse::kLogTimeFieldNumber;
const int HisLogResponse::kLogDetailFieldNumber;
const int HisLogResponse::kIsEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HisLogResponse::HisLogResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HisLogResponse)
}
HisLogResponse::HisLogResponse(const HisLogResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  devname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devname().size() > 0) {
    devname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devname_);
  }
  logdetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logdetail().size() > 0) {
    logdetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logdetail_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&isend_) -
    reinterpret_cast<char*>(&type_) + sizeof(isend_));
  // @@protoc_insertion_point(copy_constructor:HisLogResponse)
}

void HisLogResponse::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logdetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&isend_) -
    reinterpret_cast<char*>(&type_) + sizeof(isend_));
  _cached_size_ = 0;
}

HisLogResponse::~HisLogResponse() {
  // @@protoc_insertion_point(destructor:HisLogResponse)
  SharedDtor();
}

void HisLogResponse::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logdetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HisLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HisLogResponse& HisLogResponse::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

HisLogResponse* HisLogResponse::New(::google::protobuf::Arena* arena) const {
  HisLogResponse* n = new HisLogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HisLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HisLogResponse)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logdetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&isend_) -
    reinterpret_cast<char*>(&type_) + sizeof(isend_));
}

bool HisLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HisLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channelName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HisLogResponse.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string devName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devname().data(), this->devname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HisLogResponse.devName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 logTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logDetail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logdetail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logdetail().data(), this->logdetail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HisLogResponse.logDetail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 isEnd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HisLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HisLogResponse)
  return false;
#undef DO_
}

void HisLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HisLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // string channelName = 3;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HisLogResponse.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelname(), output);
  }

  // string devName = 4;
  if (this->devname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HisLogResponse.devName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devname(), output);
  }

  // uint64 logTime = 5;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logtime(), output);
  }

  // string logDetail = 6;
  if (this->logdetail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logdetail().data(), this->logdetail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HisLogResponse.logDetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->logdetail(), output);
  }

  // int32 isEnd = 7;
  if (this->isend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isend(), output);
  }

  // @@protoc_insertion_point(serialize_end:HisLogResponse)
}

size_t HisLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HisLogResponse)
  size_t total_size = 0;

  // string channelName = 3;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // string devName = 4;
  if (this->devname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devname());
  }

  // string logDetail = 6;
  if (this->logdetail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logdetail());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // uint64 logTime = 5;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->logtime());
  }

  // int32 isEnd = 7;
  if (this->isend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HisLogResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HisLogResponse*>(&from));
}

void HisLogResponse::MergeFrom(const HisLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HisLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.devname().size() > 0) {

    devname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devname_);
  }
  if (from.logdetail().size() > 0) {

    logdetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logdetail_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
  if (from.isend() != 0) {
    set_isend(from.isend());
  }
}

void HisLogResponse::CopyFrom(const HisLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HisLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HisLogResponse::IsInitialized() const {
  return true;
}

void HisLogResponse::Swap(HisLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HisLogResponse::InternalSwap(HisLogResponse* other) {
  channelname_.Swap(&other->channelname_);
  devname_.Swap(&other->devname_);
  logdetail_.Swap(&other->logdetail_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(logtime_, other->logtime_);
  std::swap(isend_, other->isend_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HisLogResponse::GetTypeName() const {
  return "HisLogResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HisLogResponse

// int32 type = 1;
void HisLogResponse::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 HisLogResponse::type() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.type)
  return type_;
}
void HisLogResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.type)
}

// int32 level = 2;
void HisLogResponse::clear_level() {
  level_ = 0;
}
::google::protobuf::int32 HisLogResponse::level() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.level)
  return level_;
}
void HisLogResponse::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.level)
}

// string channelName = 3;
void HisLogResponse::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HisLogResponse::channelname() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.channelName)
  return channelname_.GetNoArena();
}
void HisLogResponse::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HisLogResponse.channelName)
}
#if LANG_CXX11
void HisLogResponse::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HisLogResponse.channelName)
}
#endif
void HisLogResponse::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HisLogResponse.channelName)
}
void HisLogResponse::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HisLogResponse.channelName)
}
::std::string* HisLogResponse::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:HisLogResponse.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HisLogResponse::release_channelname() {
  // @@protoc_insertion_point(field_release:HisLogResponse.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HisLogResponse::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:HisLogResponse.channelName)
}

// string devName = 4;
void HisLogResponse::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HisLogResponse::devname() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.devName)
  return devname_.GetNoArena();
}
void HisLogResponse::set_devname(const ::std::string& value) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HisLogResponse.devName)
}
#if LANG_CXX11
void HisLogResponse::set_devname(::std::string&& value) {
  
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HisLogResponse.devName)
}
#endif
void HisLogResponse::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HisLogResponse.devName)
}
void HisLogResponse::set_devname(const char* value, size_t size) {
  
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HisLogResponse.devName)
}
::std::string* HisLogResponse::mutable_devname() {
  
  // @@protoc_insertion_point(field_mutable:HisLogResponse.devName)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HisLogResponse::release_devname() {
  // @@protoc_insertion_point(field_release:HisLogResponse.devName)
  
  return devname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HisLogResponse::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    
  } else {
    
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:HisLogResponse.devName)
}

// uint64 logTime = 5;
void HisLogResponse::clear_logtime() {
  logtime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HisLogResponse::logtime() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.logTime)
  return logtime_;
}
void HisLogResponse::set_logtime(::google::protobuf::uint64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.logTime)
}

// string logDetail = 6;
void HisLogResponse::clear_logdetail() {
  logdetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HisLogResponse::logdetail() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.logDetail)
  return logdetail_.GetNoArena();
}
void HisLogResponse::set_logdetail(const ::std::string& value) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HisLogResponse.logDetail)
}
#if LANG_CXX11
void HisLogResponse::set_logdetail(::std::string&& value) {
  
  logdetail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HisLogResponse.logDetail)
}
#endif
void HisLogResponse::set_logdetail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HisLogResponse.logDetail)
}
void HisLogResponse::set_logdetail(const char* value, size_t size) {
  
  logdetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HisLogResponse.logDetail)
}
::std::string* HisLogResponse::mutable_logdetail() {
  
  // @@protoc_insertion_point(field_mutable:HisLogResponse.logDetail)
  return logdetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HisLogResponse::release_logdetail() {
  // @@protoc_insertion_point(field_release:HisLogResponse.logDetail)
  
  return logdetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HisLogResponse::set_allocated_logdetail(::std::string* logdetail) {
  if (logdetail != NULL) {
    
  } else {
    
  }
  logdetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logdetail);
  // @@protoc_insertion_point(field_set_allocated:HisLogResponse.logDetail)
}

// int32 isEnd = 7;
void HisLogResponse::clear_isend() {
  isend_ = 0;
}
::google::protobuf::int32 HisLogResponse::isend() const {
  // @@protoc_insertion_point(field_get:HisLogResponse.isEnd)
  return isend_;
}
void HisLogResponse::set_isend(::google::protobuf::int32 value) {
  
  isend_ = value;
  // @@protoc_insertion_point(field_set:HisLogResponse.isEnd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetcardInfoRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetcardInfoRequest::NetcardInfoRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetcardInfoRequest)
}
NetcardInfoRequest::NetcardInfoRequest(const NetcardInfoRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:NetcardInfoRequest)
}

void NetcardInfoRequest::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetcardInfoRequest::~NetcardInfoRequest() {
  // @@protoc_insertion_point(destructor:NetcardInfoRequest)
  SharedDtor();
}

void NetcardInfoRequest::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetcardInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetcardInfoRequest& NetcardInfoRequest::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetcardInfoRequest* NetcardInfoRequest::New(::google::protobuf::Arena* arena) const {
  NetcardInfoRequest* n = new NetcardInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetcardInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NetcardInfoRequest)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetcardInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetcardInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetcardInfoRequest.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetcardInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetcardInfoRequest)
  return false;
#undef DO_
}

void NetcardInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetcardInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetcardInfoRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetcardInfoRequest)
}

size_t NetcardInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetcardInfoRequest)
  size_t total_size = 0;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetcardInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetcardInfoRequest*>(&from));
}

void NetcardInfoRequest::MergeFrom(const NetcardInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetcardInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void NetcardInfoRequest::CopyFrom(const NetcardInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetcardInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetcardInfoRequest::IsInitialized() const {
  return true;
}

void NetcardInfoRequest::Swap(NetcardInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetcardInfoRequest::InternalSwap(NetcardInfoRequest* other) {
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetcardInfoRequest::GetTypeName() const {
  return "NetcardInfoRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetcardInfoRequest

// string value = 1;
void NetcardInfoRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetcardInfoRequest::value() const {
  // @@protoc_insertion_point(field_get:NetcardInfoRequest.value)
  return value_.GetNoArena();
}
void NetcardInfoRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfoRequest.value)
}
#if LANG_CXX11
void NetcardInfoRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfoRequest.value)
}
#endif
void NetcardInfoRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfoRequest.value)
}
void NetcardInfoRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfoRequest.value)
}
::std::string* NetcardInfoRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfoRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetcardInfoRequest::release_value() {
  // @@protoc_insertion_point(field_release:NetcardInfoRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetcardInfoRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfoRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetcardInfo::kNameFieldNumber;
const int NetcardInfo::kIpFieldNumber;
const int NetcardInfo::kMacFieldNumber;
const int NetcardInfo::kNetworkTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetcardInfo::NetcardInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetcardInfo)
}
NetcardInfo::NetcardInfo(const NetcardInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  networktype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.networktype().size() > 0) {
    networktype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networktype_);
  }
  // @@protoc_insertion_point(copy_constructor:NetcardInfo)
}

void NetcardInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networktype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetcardInfo::~NetcardInfo() {
  // @@protoc_insertion_point(destructor:NetcardInfo)
  SharedDtor();
}

void NetcardInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networktype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetcardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetcardInfo& NetcardInfo::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetcardInfo* NetcardInfo::New(::google::protobuf::Arena* arena) const {
  NetcardInfo* n = new NetcardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetcardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetcardInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetcardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetcardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetcardInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetcardInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetcardInfo.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string networkType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networktype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->networktype().data(), this->networktype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetcardInfo.networkType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetcardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetcardInfo)
  return false;
#undef DO_
}

void NetcardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetcardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetcardInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetcardInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetcardInfo.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mac(), output);
  }

  // string networkType = 4;
  if (this->networktype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networktype().data(), this->networktype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetcardInfo.networkType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->networktype(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetcardInfo)
}

size_t NetcardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetcardInfo)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // string networkType = 4;
  if (this->networktype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->networktype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetcardInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetcardInfo*>(&from));
}

void NetcardInfo::MergeFrom(const NetcardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetcardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.networktype().size() > 0) {

    networktype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networktype_);
  }
}

void NetcardInfo::CopyFrom(const NetcardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetcardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetcardInfo::IsInitialized() const {
  return true;
}

void NetcardInfo::Swap(NetcardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetcardInfo::InternalSwap(NetcardInfo* other) {
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  mac_.Swap(&other->mac_);
  networktype_.Swap(&other->networktype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetcardInfo::GetTypeName() const {
  return "NetcardInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetcardInfo

// string name = 1;
void NetcardInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetcardInfo::name() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.name)
  return name_.GetNoArena();
}
void NetcardInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.name)
}
#if LANG_CXX11
void NetcardInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.name)
}
#endif
void NetcardInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.name)
}
void NetcardInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.name)
}
::std::string* NetcardInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetcardInfo::release_name() {
  // @@protoc_insertion_point(field_release:NetcardInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetcardInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.name)
}

// string ip = 2;
void NetcardInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetcardInfo::ip() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.ip)
  return ip_.GetNoArena();
}
void NetcardInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.ip)
}
#if LANG_CXX11
void NetcardInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.ip)
}
#endif
void NetcardInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.ip)
}
void NetcardInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.ip)
}
::std::string* NetcardInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetcardInfo::release_ip() {
  // @@protoc_insertion_point(field_release:NetcardInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetcardInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.ip)
}

// string mac = 3;
void NetcardInfo::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetcardInfo::mac() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.mac)
  return mac_.GetNoArena();
}
void NetcardInfo::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.mac)
}
#if LANG_CXX11
void NetcardInfo::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.mac)
}
#endif
void NetcardInfo::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.mac)
}
void NetcardInfo::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.mac)
}
::std::string* NetcardInfo::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetcardInfo::release_mac() {
  // @@protoc_insertion_point(field_release:NetcardInfo.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetcardInfo::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.mac)
}

// string networkType = 4;
void NetcardInfo::clear_networktype() {
  networktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetcardInfo::networktype() const {
  // @@protoc_insertion_point(field_get:NetcardInfo.networkType)
  return networktype_.GetNoArena();
}
void NetcardInfo::set_networktype(const ::std::string& value) {
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetcardInfo.networkType)
}
#if LANG_CXX11
void NetcardInfo::set_networktype(::std::string&& value) {
  
  networktype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetcardInfo.networkType)
}
#endif
void NetcardInfo::set_networktype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetcardInfo.networkType)
}
void NetcardInfo::set_networktype(const char* value, size_t size) {
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetcardInfo.networkType)
}
::std::string* NetcardInfo::mutable_networktype() {
  
  // @@protoc_insertion_point(field_mutable:NetcardInfo.networkType)
  return networktype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetcardInfo::release_networktype() {
  // @@protoc_insertion_point(field_release:NetcardInfo.networkType)
  
  return networktype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetcardInfo::set_allocated_networktype(::std::string* networktype) {
  if (networktype != NULL) {
    
  } else {
    
  }
  networktype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networktype);
  // @@protoc_insertion_point(field_set_allocated:NetcardInfo.networkType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetcardInfoResponse::kNetCardInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetcardInfoResponse::NetcardInfoResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetcardInfoResponse)
}
NetcardInfoResponse::NetcardInfoResponse(const NetcardInfoResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      netcardinfo_(from.netcardinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetcardInfoResponse)
}

void NetcardInfoResponse::SharedCtor() {
  _cached_size_ = 0;
}

NetcardInfoResponse::~NetcardInfoResponse() {
  // @@protoc_insertion_point(destructor:NetcardInfoResponse)
  SharedDtor();
}

void NetcardInfoResponse::SharedDtor() {
}

void NetcardInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetcardInfoResponse& NetcardInfoResponse::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetcardInfoResponse* NetcardInfoResponse::New(::google::protobuf::Arena* arena) const {
  NetcardInfoResponse* n = new NetcardInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetcardInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NetcardInfoResponse)
  netcardinfo_.Clear();
}

bool NetcardInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetcardInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetcardInfo netCardInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_netcardinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetcardInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetcardInfoResponse)
  return false;
#undef DO_
}

void NetcardInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetcardInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetcardInfo netCardInfo = 1;
  for (unsigned int i = 0, n = this->netcardinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->netcardinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetcardInfoResponse)
}

size_t NetcardInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetcardInfoResponse)
  size_t total_size = 0;

  // repeated .NetcardInfo netCardInfo = 1;
  {
    unsigned int count = this->netcardinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netcardinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetcardInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetcardInfoResponse*>(&from));
}

void NetcardInfoResponse::MergeFrom(const NetcardInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetcardInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  netcardinfo_.MergeFrom(from.netcardinfo_);
}

void NetcardInfoResponse::CopyFrom(const NetcardInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetcardInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetcardInfoResponse::IsInitialized() const {
  return true;
}

void NetcardInfoResponse::Swap(NetcardInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetcardInfoResponse::InternalSwap(NetcardInfoResponse* other) {
  netcardinfo_.InternalSwap(&other->netcardinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetcardInfoResponse::GetTypeName() const {
  return "NetcardInfoResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetcardInfoResponse

// repeated .NetcardInfo netCardInfo = 1;
int NetcardInfoResponse::netcardinfo_size() const {
  return netcardinfo_.size();
}
void NetcardInfoResponse::clear_netcardinfo() {
  netcardinfo_.Clear();
}
const ::NetcardInfo& NetcardInfoResponse::netcardinfo(int index) const {
  // @@protoc_insertion_point(field_get:NetcardInfoResponse.netCardInfo)
  return netcardinfo_.Get(index);
}
::NetcardInfo* NetcardInfoResponse::mutable_netcardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetcardInfoResponse.netCardInfo)
  return netcardinfo_.Mutable(index);
}
::NetcardInfo* NetcardInfoResponse::add_netcardinfo() {
  // @@protoc_insertion_point(field_add:NetcardInfoResponse.netCardInfo)
  return netcardinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetcardInfo >*
NetcardInfoResponse::mutable_netcardinfo() {
  // @@protoc_insertion_point(field_mutable_list:NetcardInfoResponse.netCardInfo)
  return &netcardinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::NetcardInfo >&
NetcardInfoResponse::netcardinfo() const {
  // @@protoc_insertion_point(field_list:NetcardInfoResponse.netCardInfo)
  return netcardinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessData::kProcessIdFieldNumber;
const int ProcessData::kProcessPathFieldNumber;
const int ProcessData::kProcessNameFieldNumber;
const int ProcessData::kStartTimeFieldNumber;
const int ProcessData::kProcessPidFieldNumber;
const int ProcessData::kProcessStatusFieldNumber;
const int ProcessData::kHeartBeatTimeFieldNumber;
const int ProcessData::kCpuUseFieldNumber;
const int ProcessData::kRamUseFieldNumber;
const int ProcessData::kRestartNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessData::ProcessData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessData)
}
ProcessData::ProcessData(const ProcessData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_id().size() > 0) {
    process_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_id_);
  }
  process_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_path().size() > 0) {
    process_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_path_);
  }
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_name().size() > 0) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  ::memcpy(&start_time_, &from.start_time_,
    reinterpret_cast<char*>(&restart_num_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(restart_num_));
  // @@protoc_insertion_point(copy_constructor:ProcessData)
}

void ProcessData::SharedCtor() {
  process_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&restart_num_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(restart_num_));
  _cached_size_ = 0;
}

ProcessData::~ProcessData() {
  // @@protoc_insertion_point(destructor:ProcessData)
  SharedDtor();
}

void ProcessData::SharedDtor() {
  process_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProcessData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProcessData& ProcessData::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessData* ProcessData::New(::google::protobuf::Arena* arena) const {
  ProcessData* n = new ProcessData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessData::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessData)
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&restart_num_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(restart_num_));
}

bool ProcessData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProcessData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string process_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_id().data(), this->process_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProcessData.process_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string process_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_path().data(), this->process_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProcessData.process_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string process_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProcessData.process_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_pid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 heart_beat_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heart_beat_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_use = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ram_use = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ram_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 restart_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restart_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProcessData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProcessData)
  return false;
#undef DO_
}

void ProcessData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProcessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_id = 1;
  if (this->process_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_id().data(), this->process_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProcessData.process_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_id(), output);
  }

  // string process_path = 2;
  if (this->process_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_path().data(), this->process_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProcessData.process_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->process_path(), output);
  }

  // string process_name = 3;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProcessData.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->process_name(), output);
  }

  // int32 start_time = 4;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_time(), output);
  }

  // int32 process_pid = 5;
  if (this->process_pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->process_pid(), output);
  }

  // int32 process_status = 6;
  if (this->process_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->process_status(), output);
  }

  // int32 heart_beat_time = 7;
  if (this->heart_beat_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heart_beat_time(), output);
  }

  // float cpu_use = 8;
  if (this->cpu_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cpu_use(), output);
  }

  // float ram_use = 9;
  if (this->ram_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ram_use(), output);
  }

  // int32 restart_num = 10;
  if (this->restart_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->restart_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProcessData)
}

size_t ProcessData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessData)
  size_t total_size = 0;

  // string process_id = 1;
  if (this->process_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_id());
  }

  // string process_path = 2;
  if (this->process_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_path());
  }

  // string process_name = 3;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // int32 start_time = 4;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_time());
  }

  // int32 process_pid = 5;
  if (this->process_pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->process_pid());
  }

  // int32 process_status = 6;
  if (this->process_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->process_status());
  }

  // int32 heart_beat_time = 7;
  if (this->heart_beat_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->heart_beat_time());
  }

  // float cpu_use = 8;
  if (this->cpu_use() != 0) {
    total_size += 1 + 4;
  }

  // float ram_use = 9;
  if (this->ram_use() != 0) {
    total_size += 1 + 4;
  }

  // int32 restart_num = 10;
  if (this->restart_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->restart_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProcessData*>(&from));
}

void ProcessData::MergeFrom(const ProcessData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_id().size() > 0) {

    process_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_id_);
  }
  if (from.process_path().size() > 0) {

    process_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_path_);
  }
  if (from.process_name().size() > 0) {

    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.process_pid() != 0) {
    set_process_pid(from.process_pid());
  }
  if (from.process_status() != 0) {
    set_process_status(from.process_status());
  }
  if (from.heart_beat_time() != 0) {
    set_heart_beat_time(from.heart_beat_time());
  }
  if (from.cpu_use() != 0) {
    set_cpu_use(from.cpu_use());
  }
  if (from.ram_use() != 0) {
    set_ram_use(from.ram_use());
  }
  if (from.restart_num() != 0) {
    set_restart_num(from.restart_num());
  }
}

void ProcessData::CopyFrom(const ProcessData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessData::IsInitialized() const {
  return true;
}

void ProcessData::Swap(ProcessData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessData::InternalSwap(ProcessData* other) {
  process_id_.Swap(&other->process_id_);
  process_path_.Swap(&other->process_path_);
  process_name_.Swap(&other->process_name_);
  std::swap(start_time_, other->start_time_);
  std::swap(process_pid_, other->process_pid_);
  std::swap(process_status_, other->process_status_);
  std::swap(heart_beat_time_, other->heart_beat_time_);
  std::swap(cpu_use_, other->cpu_use_);
  std::swap(ram_use_, other->ram_use_);
  std::swap(restart_num_, other->restart_num_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProcessData::GetTypeName() const {
  return "ProcessData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessData

// string process_id = 1;
void ProcessData::clear_process_id() {
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProcessData::process_id() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_id)
  return process_id_.GetNoArena();
}
void ProcessData::set_process_id(const ::std::string& value) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessData.process_id)
}
#if LANG_CXX11
void ProcessData::set_process_id(::std::string&& value) {
  
  process_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessData.process_id)
}
#endif
void ProcessData::set_process_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessData.process_id)
}
void ProcessData::set_process_id(const char* value, size_t size) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessData.process_id)
}
::std::string* ProcessData::mutable_process_id() {
  
  // @@protoc_insertion_point(field_mutable:ProcessData.process_id)
  return process_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProcessData::release_process_id() {
  // @@protoc_insertion_point(field_release:ProcessData.process_id)
  
  return process_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProcessData::set_allocated_process_id(::std::string* process_id) {
  if (process_id != NULL) {
    
  } else {
    
  }
  process_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_id);
  // @@protoc_insertion_point(field_set_allocated:ProcessData.process_id)
}

// string process_path = 2;
void ProcessData::clear_process_path() {
  process_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProcessData::process_path() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_path)
  return process_path_.GetNoArena();
}
void ProcessData::set_process_path(const ::std::string& value) {
  
  process_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessData.process_path)
}
#if LANG_CXX11
void ProcessData::set_process_path(::std::string&& value) {
  
  process_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessData.process_path)
}
#endif
void ProcessData::set_process_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessData.process_path)
}
void ProcessData::set_process_path(const char* value, size_t size) {
  
  process_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessData.process_path)
}
::std::string* ProcessData::mutable_process_path() {
  
  // @@protoc_insertion_point(field_mutable:ProcessData.process_path)
  return process_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProcessData::release_process_path() {
  // @@protoc_insertion_point(field_release:ProcessData.process_path)
  
  return process_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProcessData::set_allocated_process_path(::std::string* process_path) {
  if (process_path != NULL) {
    
  } else {
    
  }
  process_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_path);
  // @@protoc_insertion_point(field_set_allocated:ProcessData.process_path)
}

// string process_name = 3;
void ProcessData::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProcessData::process_name() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_name)
  return process_name_.GetNoArena();
}
void ProcessData::set_process_name(const ::std::string& value) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessData.process_name)
}
#if LANG_CXX11
void ProcessData::set_process_name(::std::string&& value) {
  
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessData.process_name)
}
#endif
void ProcessData::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessData.process_name)
}
void ProcessData::set_process_name(const char* value, size_t size) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessData.process_name)
}
::std::string* ProcessData::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:ProcessData.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProcessData::release_process_name() {
  // @@protoc_insertion_point(field_release:ProcessData.process_name)
  
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProcessData::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:ProcessData.process_name)
}

// int32 start_time = 4;
void ProcessData::clear_start_time() {
  start_time_ = 0;
}
::google::protobuf::int32 ProcessData::start_time() const {
  // @@protoc_insertion_point(field_get:ProcessData.start_time)
  return start_time_;
}
void ProcessData::set_start_time(::google::protobuf::int32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.start_time)
}

// int32 process_pid = 5;
void ProcessData::clear_process_pid() {
  process_pid_ = 0;
}
::google::protobuf::int32 ProcessData::process_pid() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_pid)
  return process_pid_;
}
void ProcessData::set_process_pid(::google::protobuf::int32 value) {
  
  process_pid_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.process_pid)
}

// int32 process_status = 6;
void ProcessData::clear_process_status() {
  process_status_ = 0;
}
::google::protobuf::int32 ProcessData::process_status() const {
  // @@protoc_insertion_point(field_get:ProcessData.process_status)
  return process_status_;
}
void ProcessData::set_process_status(::google::protobuf::int32 value) {
  
  process_status_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.process_status)
}

// int32 heart_beat_time = 7;
void ProcessData::clear_heart_beat_time() {
  heart_beat_time_ = 0;
}
::google::protobuf::int32 ProcessData::heart_beat_time() const {
  // @@protoc_insertion_point(field_get:ProcessData.heart_beat_time)
  return heart_beat_time_;
}
void ProcessData::set_heart_beat_time(::google::protobuf::int32 value) {
  
  heart_beat_time_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.heart_beat_time)
}

// float cpu_use = 8;
void ProcessData::clear_cpu_use() {
  cpu_use_ = 0;
}
float ProcessData::cpu_use() const {
  // @@protoc_insertion_point(field_get:ProcessData.cpu_use)
  return cpu_use_;
}
void ProcessData::set_cpu_use(float value) {
  
  cpu_use_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.cpu_use)
}

// float ram_use = 9;
void ProcessData::clear_ram_use() {
  ram_use_ = 0;
}
float ProcessData::ram_use() const {
  // @@protoc_insertion_point(field_get:ProcessData.ram_use)
  return ram_use_;
}
void ProcessData::set_ram_use(float value) {
  
  ram_use_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.ram_use)
}

// int32 restart_num = 10;
void ProcessData::clear_restart_num() {
  restart_num_ = 0;
}
::google::protobuf::int32 ProcessData::restart_num() const {
  // @@protoc_insertion_point(field_get:ProcessData.restart_num)
  return restart_num_;
}
void ProcessData::set_restart_num(::google::protobuf::int32 value) {
  
  restart_num_ = value;
  // @@protoc_insertion_point(field_set:ProcessData.restart_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessCtrl::kProcessIdFieldNumber;
const int ProcessCtrl::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessCtrl::ProcessCtrl()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessCtrl)
}
ProcessCtrl::ProcessCtrl(const ProcessCtrl& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_id().size() > 0) {
    process_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_id_);
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:ProcessCtrl)
}

void ProcessCtrl::SharedCtor() {
  process_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
  _cached_size_ = 0;
}

ProcessCtrl::~ProcessCtrl() {
  // @@protoc_insertion_point(destructor:ProcessCtrl)
  SharedDtor();
}

void ProcessCtrl::SharedDtor() {
  process_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProcessCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProcessCtrl& ProcessCtrl::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessCtrl* ProcessCtrl::New(::google::protobuf::Arena* arena) const {
  ProcessCtrl* n = new ProcessCtrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessCtrl)
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
}

bool ProcessCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProcessCtrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string process_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_id().data(), this->process_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProcessCtrl.process_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProcessCtrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProcessCtrl)
  return false;
#undef DO_
}

void ProcessCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProcessCtrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_id = 1;
  if (this->process_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_id().data(), this->process_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProcessCtrl.process_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_id(), output);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProcessCtrl)
}

size_t ProcessCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessCtrl)
  size_t total_size = 0;

  // string process_id = 1;
  if (this->process_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_id());
  }

  // int32 command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessCtrl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProcessCtrl*>(&from));
}

void ProcessCtrl::MergeFrom(const ProcessCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_id().size() > 0) {

    process_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_id_);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void ProcessCtrl::CopyFrom(const ProcessCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessCtrl::IsInitialized() const {
  return true;
}

void ProcessCtrl::Swap(ProcessCtrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessCtrl::InternalSwap(ProcessCtrl* other) {
  process_id_.Swap(&other->process_id_);
  std::swap(command_, other->command_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProcessCtrl::GetTypeName() const {
  return "ProcessCtrl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessCtrl

// string process_id = 1;
void ProcessCtrl::clear_process_id() {
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProcessCtrl::process_id() const {
  // @@protoc_insertion_point(field_get:ProcessCtrl.process_id)
  return process_id_.GetNoArena();
}
void ProcessCtrl::set_process_id(const ::std::string& value) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessCtrl.process_id)
}
#if LANG_CXX11
void ProcessCtrl::set_process_id(::std::string&& value) {
  
  process_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessCtrl.process_id)
}
#endif
void ProcessCtrl::set_process_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessCtrl.process_id)
}
void ProcessCtrl::set_process_id(const char* value, size_t size) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessCtrl.process_id)
}
::std::string* ProcessCtrl::mutable_process_id() {
  
  // @@protoc_insertion_point(field_mutable:ProcessCtrl.process_id)
  return process_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProcessCtrl::release_process_id() {
  // @@protoc_insertion_point(field_release:ProcessCtrl.process_id)
  
  return process_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProcessCtrl::set_allocated_process_id(::std::string* process_id) {
  if (process_id != NULL) {
    
  } else {
    
  }
  process_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_id);
  // @@protoc_insertion_point(field_set_allocated:ProcessCtrl.process_id)
}

// int32 command = 2;
void ProcessCtrl::clear_command() {
  command_ = 0;
}
::google::protobuf::int32 ProcessCtrl::command() const {
  // @@protoc_insertion_point(field_get:ProcessCtrl.command)
  return command_;
}
void ProcessCtrl::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:ProcessCtrl.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealPointValue::kChannelNameFieldNumber;
const int RealPointValue::kDeviceNameFieldNumber;
const int RealPointValue::kPointValueFieldNumber;
const int RealPointValue::kPointAddrFieldNumber;
const int RealPointValue::kValueTypeFieldNumber;
const int RealPointValue::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealPointValue::RealPointValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RealPointValue)
}
RealPointValue::RealPointValue(const RealPointValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicename().size() > 0) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  pointvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pointvalue().size() > 0) {
    pointvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointvalue_);
  }
  pointaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pointaddr().size() > 0) {
    pointaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointaddr_);
  }
  ::memcpy(&valuetype_, &from.valuetype_,
    reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&valuetype_) + sizeof(channeltype_));
  // @@protoc_insertion_point(copy_constructor:RealPointValue)
}

void RealPointValue::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valuetype_, 0, reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&valuetype_) + sizeof(channeltype_));
  _cached_size_ = 0;
}

RealPointValue::~RealPointValue() {
  // @@protoc_insertion_point(destructor:RealPointValue)
  SharedDtor();
}

void RealPointValue::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealPointValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RealPointValue& RealPointValue::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealPointValue* RealPointValue::New(::google::protobuf::Arena* arena) const {
  RealPointValue* n = new RealPointValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealPointValue::Clear() {
// @@protoc_insertion_point(message_clear_start:RealPointValue)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valuetype_, 0, reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&valuetype_) + sizeof(channeltype_));
}

bool RealPointValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RealPointValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealPointValue.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deviceName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealPointValue.deviceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pointValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pointvalue().data(), this->pointvalue().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealPointValue.pointValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pointAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pointaddr().data(), this->pointaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RealPointValue.pointAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PointValueType valueType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_valuetype(static_cast< ::PointValueType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channelType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RealPointValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RealPointValue)
  return false;
#undef DO_
}

void RealPointValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RealPointValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealPointValue.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  // string deviceName = 2;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealPointValue.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicename(), output);
  }

  // string pointValue = 3;
  if (this->pointvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pointvalue().data(), this->pointvalue().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealPointValue.pointValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pointvalue(), output);
  }

  // string pointAddr = 4;
  if (this->pointaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pointaddr().data(), this->pointaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RealPointValue.pointAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pointaddr(), output);
  }

  // .PointValueType valueType = 5;
  if (this->valuetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->valuetype(), output);
  }

  // int32 channelType = 6;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->channeltype(), output);
  }

  // @@protoc_insertion_point(serialize_end:RealPointValue)
}

size_t RealPointValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RealPointValue)
  size_t total_size = 0;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // string deviceName = 2;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // string pointValue = 3;
  if (this->pointvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pointvalue());
  }

  // string pointAddr = 4;
  if (this->pointaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pointaddr());
  }

  // .PointValueType valueType = 5;
  if (this->valuetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->valuetype());
  }

  // int32 channelType = 6;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channeltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealPointValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RealPointValue*>(&from));
}

void RealPointValue::MergeFrom(const RealPointValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RealPointValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.pointvalue().size() > 0) {

    pointvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointvalue_);
  }
  if (from.pointaddr().size() > 0) {

    pointaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointaddr_);
  }
  if (from.valuetype() != 0) {
    set_valuetype(from.valuetype());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
}

void RealPointValue::CopyFrom(const RealPointValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RealPointValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealPointValue::IsInitialized() const {
  return true;
}

void RealPointValue::Swap(RealPointValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealPointValue::InternalSwap(RealPointValue* other) {
  channelname_.Swap(&other->channelname_);
  devicename_.Swap(&other->devicename_);
  pointvalue_.Swap(&other->pointvalue_);
  pointaddr_.Swap(&other->pointaddr_);
  std::swap(valuetype_, other->valuetype_);
  std::swap(channeltype_, other->channeltype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RealPointValue::GetTypeName() const {
  return "RealPointValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealPointValue

// string channelName = 1;
void RealPointValue::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealPointValue::channelname() const {
  // @@protoc_insertion_point(field_get:RealPointValue.channelName)
  return channelname_.GetNoArena();
}
void RealPointValue::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.channelName)
}
#if LANG_CXX11
void RealPointValue::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.channelName)
}
#endif
void RealPointValue::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.channelName)
}
void RealPointValue::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.channelName)
}
::std::string* RealPointValue::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealPointValue::release_channelname() {
  // @@protoc_insertion_point(field_release:RealPointValue.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealPointValue::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.channelName)
}

// string deviceName = 2;
void RealPointValue::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealPointValue::devicename() const {
  // @@protoc_insertion_point(field_get:RealPointValue.deviceName)
  return devicename_.GetNoArena();
}
void RealPointValue::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.deviceName)
}
#if LANG_CXX11
void RealPointValue::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.deviceName)
}
#endif
void RealPointValue::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.deviceName)
}
void RealPointValue::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.deviceName)
}
::std::string* RealPointValue::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealPointValue::release_devicename() {
  // @@protoc_insertion_point(field_release:RealPointValue.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealPointValue::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.deviceName)
}

// string pointValue = 3;
void RealPointValue::clear_pointvalue() {
  pointvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealPointValue::pointvalue() const {
  // @@protoc_insertion_point(field_get:RealPointValue.pointValue)
  return pointvalue_.GetNoArena();
}
void RealPointValue::set_pointvalue(const ::std::string& value) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.pointValue)
}
#if LANG_CXX11
void RealPointValue::set_pointvalue(::std::string&& value) {
  
  pointvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.pointValue)
}
#endif
void RealPointValue::set_pointvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.pointValue)
}
void RealPointValue::set_pointvalue(const char* value, size_t size) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.pointValue)
}
::std::string* RealPointValue::mutable_pointvalue() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.pointValue)
  return pointvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealPointValue::release_pointvalue() {
  // @@protoc_insertion_point(field_release:RealPointValue.pointValue)
  
  return pointvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealPointValue::set_allocated_pointvalue(::std::string* pointvalue) {
  if (pointvalue != NULL) {
    
  } else {
    
  }
  pointvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointvalue);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.pointValue)
}

// string pointAddr = 4;
void RealPointValue::clear_pointaddr() {
  pointaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealPointValue::pointaddr() const {
  // @@protoc_insertion_point(field_get:RealPointValue.pointAddr)
  return pointaddr_.GetNoArena();
}
void RealPointValue::set_pointaddr(const ::std::string& value) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RealPointValue.pointAddr)
}
#if LANG_CXX11
void RealPointValue::set_pointaddr(::std::string&& value) {
  
  pointaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RealPointValue.pointAddr)
}
#endif
void RealPointValue::set_pointaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RealPointValue.pointAddr)
}
void RealPointValue::set_pointaddr(const char* value, size_t size) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RealPointValue.pointAddr)
}
::std::string* RealPointValue::mutable_pointaddr() {
  
  // @@protoc_insertion_point(field_mutable:RealPointValue.pointAddr)
  return pointaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealPointValue::release_pointaddr() {
  // @@protoc_insertion_point(field_release:RealPointValue.pointAddr)
  
  return pointaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealPointValue::set_allocated_pointaddr(::std::string* pointaddr) {
  if (pointaddr != NULL) {
    
  } else {
    
  }
  pointaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointaddr);
  // @@protoc_insertion_point(field_set_allocated:RealPointValue.pointAddr)
}

// .PointValueType valueType = 5;
void RealPointValue::clear_valuetype() {
  valuetype_ = 0;
}
::PointValueType RealPointValue::valuetype() const {
  // @@protoc_insertion_point(field_get:RealPointValue.valueType)
  return static_cast< ::PointValueType >(valuetype_);
}
void RealPointValue::set_valuetype(::PointValueType value) {
  
  valuetype_ = value;
  // @@protoc_insertion_point(field_set:RealPointValue.valueType)
}

// int32 channelType = 6;
void RealPointValue::clear_channeltype() {
  channeltype_ = 0;
}
::google::protobuf::int32 RealPointValue::channeltype() const {
  // @@protoc_insertion_point(field_get:RealPointValue.channelType)
  return channeltype_;
}
void RealPointValue::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:RealPointValue.channelType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatMessage::kChannelNameFieldNumber;
const int HeartBeatMessage::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatMessage::HeartBeatMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeatMessage)
}
HeartBeatMessage::HeartBeatMessage(const HeartBeatMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:HeartBeatMessage)
}

void HeartBeatMessage::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  _cached_size_ = 0;
}

HeartBeatMessage::~HeartBeatMessage() {
  // @@protoc_insertion_point(destructor:HeartBeatMessage)
  SharedDtor();
}

void HeartBeatMessage::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HeartBeatMessage& HeartBeatMessage::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatMessage* HeartBeatMessage::New(::google::protobuf::Arena* arena) const {
  HeartBeatMessage* n = new HeartBeatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatMessage)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
}

bool HeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HeartBeatMessage.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeatMessage)
  return false;
#undef DO_
}

void HeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HeartBeatMessage.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:HeartBeatMessage)
}

size_t HeartBeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatMessage)
  size_t total_size = 0;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartBeatMessage*>(&from));
}

void HeartBeatMessage::MergeFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void HeartBeatMessage::CopyFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatMessage::IsInitialized() const {
  return true;
}

void HeartBeatMessage::Swap(HeartBeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatMessage::InternalSwap(HeartBeatMessage* other) {
  channelname_.Swap(&other->channelname_);
  std::swap(time_, other->time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HeartBeatMessage::GetTypeName() const {
  return "HeartBeatMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatMessage

// string channelName = 1;
void HeartBeatMessage::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeartBeatMessage::channelname() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.channelName)
  return channelname_.GetNoArena();
}
void HeartBeatMessage::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.channelName)
}
#if LANG_CXX11
void HeartBeatMessage::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.channelName)
}
#endif
void HeartBeatMessage::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.channelName)
}
void HeartBeatMessage::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.channelName)
}
::std::string* HeartBeatMessage::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeartBeatMessage::release_channelname() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeartBeatMessage::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.channelName)
}

// int32 time = 2;
void HeartBeatMessage::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 HeartBeatMessage::time() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.time)
  return time_;
}
void HeartBeatMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommunicationPair::kTypeFieldNumber;
const int CommunicationPair::kSourceIpFieldNumber;
const int CommunicationPair::kSourceMacFieldNumber;
const int CommunicationPair::kSourePortFieldNumber;
const int CommunicationPair::kDestIpFieldNumber;
const int CommunicationPair::kDestMacFieldNumber;
const int CommunicationPair::kDestPortFieldNumber;
const int CommunicationPair::kNetstatusFieldNumber;
const int CommunicationPair::kLastTimeFieldNumber;
const int CommunicationPair::kEthNameFieldNumber;
const int CommunicationPair::kConnStartTimeFieldNumber;
const int CommunicationPair::kConnEndTimeFieldNumber;
const int CommunicationPair::kPackagenameFieldNumber;
const int CommunicationPair::kPackagelineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommunicationPair::CommunicationPair()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommunicationPair)
}
CommunicationPair::CommunicationPair(const CommunicationPair& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  source_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_ip().size() > 0) {
    source_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_ip_);
  }
  source_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_mac().size() > 0) {
    source_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_mac_);
  }
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_ip().size() > 0) {
    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  dest_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_mac().size() > 0) {
    dest_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_mac_);
  }
  lasttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lasttime().size() > 0) {
    lasttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lasttime_);
  }
  eth_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.eth_name().size() > 0) {
    eth_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eth_name_);
  }
  conn_start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conn_start_time().size() > 0) {
    conn_start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conn_start_time_);
  }
  conn_end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conn_end_time().size() > 0) {
    conn_end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conn_end_time_);
  }
  packagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.packagename().size() > 0) {
    packagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packagename_);
  }
  packageline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.packageline().size() > 0) {
    packageline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packageline_);
  }
  ::memcpy(&soure_port_, &from.soure_port_,
    reinterpret_cast<char*>(&netstatus_) -
    reinterpret_cast<char*>(&soure_port_) + sizeof(netstatus_));
  // @@protoc_insertion_point(copy_constructor:CommunicationPair)
}

void CommunicationPair::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eth_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packageline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&soure_port_, 0, reinterpret_cast<char*>(&netstatus_) -
    reinterpret_cast<char*>(&soure_port_) + sizeof(netstatus_));
  _cached_size_ = 0;
}

CommunicationPair::~CommunicationPair() {
  // @@protoc_insertion_point(destructor:CommunicationPair)
  SharedDtor();
}

void CommunicationPair::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eth_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packageline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommunicationPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommunicationPair& CommunicationPair::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommunicationPair* CommunicationPair::New(::google::protobuf::Arena* arena) const {
  CommunicationPair* n = new CommunicationPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommunicationPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CommunicationPair)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eth_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packageline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&soure_port_, 0, reinterpret_cast<char*>(&netstatus_) -
    reinterpret_cast<char*>(&soure_port_) + sizeof(netstatus_));
}

bool CommunicationPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommunicationPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_ip().data(), this->source_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.source_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_mac().data(), this->source_mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.source_mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 soure_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soure_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_ip().data(), this->dest_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.dest_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_mac = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_mac().data(), this->dest_mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.dest_mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dest_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 netstatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lastTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lasttime().data(), this->lasttime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.lastTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string eth_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eth_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->eth_name().data(), this->eth_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.eth_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string conn_start_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conn_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conn_start_time().data(), this->conn_start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.conn_start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string conn_end_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conn_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conn_end_time().data(), this->conn_end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.conn_end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string packagename = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->packagename().data(), this->packagename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.packagename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string packageline = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packageline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->packageline().data(), this->packageline().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CommunicationPair.packageline"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommunicationPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommunicationPair)
  return false;
#undef DO_
}

void CommunicationPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommunicationPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string source_ip = 2;
  if (this->source_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_ip().data(), this->source_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.source_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_ip(), output);
  }

  // string source_mac = 3;
  if (this->source_mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_mac().data(), this->source_mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.source_mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_mac(), output);
  }

  // int32 soure_port = 4;
  if (this->soure_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soure_port(), output);
  }

  // string dest_ip = 5;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.dest_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dest_ip(), output);
  }

  // string dest_mac = 6;
  if (this->dest_mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_mac().data(), this->dest_mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.dest_mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dest_mac(), output);
  }

  // int32 dest_port = 7;
  if (this->dest_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dest_port(), output);
  }

  // int32 netstatus = 8;
  if (this->netstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->netstatus(), output);
  }

  // string lastTime = 9;
  if (this->lasttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lasttime().data(), this->lasttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.lastTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lasttime(), output);
  }

  // string eth_name = 10;
  if (this->eth_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->eth_name().data(), this->eth_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.eth_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->eth_name(), output);
  }

  // string conn_start_time = 11;
  if (this->conn_start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conn_start_time().data(), this->conn_start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.conn_start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->conn_start_time(), output);
  }

  // string conn_end_time = 12;
  if (this->conn_end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conn_end_time().data(), this->conn_end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.conn_end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->conn_end_time(), output);
  }

  // string packagename = 13;
  if (this->packagename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.packagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->packagename(), output);
  }

  // string packageline = 14;
  if (this->packageline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->packageline().data(), this->packageline().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CommunicationPair.packageline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->packageline(), output);
  }

  // @@protoc_insertion_point(serialize_end:CommunicationPair)
}

size_t CommunicationPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommunicationPair)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string source_ip = 2;
  if (this->source_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_ip());
  }

  // string source_mac = 3;
  if (this->source_mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_mac());
  }

  // string dest_ip = 5;
  if (this->dest_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_ip());
  }

  // string dest_mac = 6;
  if (this->dest_mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_mac());
  }

  // string lastTime = 9;
  if (this->lasttime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lasttime());
  }

  // string eth_name = 10;
  if (this->eth_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->eth_name());
  }

  // string conn_start_time = 11;
  if (this->conn_start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conn_start_time());
  }

  // string conn_end_time = 12;
  if (this->conn_end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conn_end_time());
  }

  // string packagename = 13;
  if (this->packagename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->packagename());
  }

  // string packageline = 14;
  if (this->packageline().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->packageline());
  }

  // int32 soure_port = 4;
  if (this->soure_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->soure_port());
  }

  // int32 dest_port = 7;
  if (this->dest_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dest_port());
  }

  // int32 netstatus = 8;
  if (this->netstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->netstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunicationPair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommunicationPair*>(&from));
}

void CommunicationPair::MergeFrom(const CommunicationPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommunicationPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.source_ip().size() > 0) {

    source_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_ip_);
  }
  if (from.source_mac().size() > 0) {

    source_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_mac_);
  }
  if (from.dest_ip().size() > 0) {

    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  if (from.dest_mac().size() > 0) {

    dest_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_mac_);
  }
  if (from.lasttime().size() > 0) {

    lasttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lasttime_);
  }
  if (from.eth_name().size() > 0) {

    eth_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eth_name_);
  }
  if (from.conn_start_time().size() > 0) {

    conn_start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conn_start_time_);
  }
  if (from.conn_end_time().size() > 0) {

    conn_end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conn_end_time_);
  }
  if (from.packagename().size() > 0) {

    packagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packagename_);
  }
  if (from.packageline().size() > 0) {

    packageline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packageline_);
  }
  if (from.soure_port() != 0) {
    set_soure_port(from.soure_port());
  }
  if (from.dest_port() != 0) {
    set_dest_port(from.dest_port());
  }
  if (from.netstatus() != 0) {
    set_netstatus(from.netstatus());
  }
}

void CommunicationPair::CopyFrom(const CommunicationPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommunicationPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationPair::IsInitialized() const {
  return true;
}

void CommunicationPair::Swap(CommunicationPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommunicationPair::InternalSwap(CommunicationPair* other) {
  type_.Swap(&other->type_);
  source_ip_.Swap(&other->source_ip_);
  source_mac_.Swap(&other->source_mac_);
  dest_ip_.Swap(&other->dest_ip_);
  dest_mac_.Swap(&other->dest_mac_);
  lasttime_.Swap(&other->lasttime_);
  eth_name_.Swap(&other->eth_name_);
  conn_start_time_.Swap(&other->conn_start_time_);
  conn_end_time_.Swap(&other->conn_end_time_);
  packagename_.Swap(&other->packagename_);
  packageline_.Swap(&other->packageline_);
  std::swap(soure_port_, other->soure_port_);
  std::swap(dest_port_, other->dest_port_);
  std::swap(netstatus_, other->netstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommunicationPair::GetTypeName() const {
  return "CommunicationPair";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommunicationPair

// string type = 1;
void CommunicationPair::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::type() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.type)
  return type_.GetNoArena();
}
void CommunicationPair::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.type)
}
#if LANG_CXX11
void CommunicationPair::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.type)
}
#endif
void CommunicationPair::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.type)
}
void CommunicationPair::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.type)
}
::std::string* CommunicationPair::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_type() {
  // @@protoc_insertion_point(field_release:CommunicationPair.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.type)
}

// string source_ip = 2;
void CommunicationPair::clear_source_ip() {
  source_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::source_ip() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.source_ip)
  return source_ip_.GetNoArena();
}
void CommunicationPair::set_source_ip(const ::std::string& value) {
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.source_ip)
}
#if LANG_CXX11
void CommunicationPair::set_source_ip(::std::string&& value) {
  
  source_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.source_ip)
}
#endif
void CommunicationPair::set_source_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.source_ip)
}
void CommunicationPair::set_source_ip(const char* value, size_t size) {
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.source_ip)
}
::std::string* CommunicationPair::mutable_source_ip() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.source_ip)
  return source_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_source_ip() {
  // @@protoc_insertion_point(field_release:CommunicationPair.source_ip)
  
  return source_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_source_ip(::std::string* source_ip) {
  if (source_ip != NULL) {
    
  } else {
    
  }
  source_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_ip);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.source_ip)
}

// string source_mac = 3;
void CommunicationPair::clear_source_mac() {
  source_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::source_mac() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.source_mac)
  return source_mac_.GetNoArena();
}
void CommunicationPair::set_source_mac(const ::std::string& value) {
  
  source_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.source_mac)
}
#if LANG_CXX11
void CommunicationPair::set_source_mac(::std::string&& value) {
  
  source_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.source_mac)
}
#endif
void CommunicationPair::set_source_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.source_mac)
}
void CommunicationPair::set_source_mac(const char* value, size_t size) {
  
  source_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.source_mac)
}
::std::string* CommunicationPair::mutable_source_mac() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.source_mac)
  return source_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_source_mac() {
  // @@protoc_insertion_point(field_release:CommunicationPair.source_mac)
  
  return source_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_source_mac(::std::string* source_mac) {
  if (source_mac != NULL) {
    
  } else {
    
  }
  source_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_mac);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.source_mac)
}

// int32 soure_port = 4;
void CommunicationPair::clear_soure_port() {
  soure_port_ = 0;
}
::google::protobuf::int32 CommunicationPair::soure_port() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.soure_port)
  return soure_port_;
}
void CommunicationPair::set_soure_port(::google::protobuf::int32 value) {
  
  soure_port_ = value;
  // @@protoc_insertion_point(field_set:CommunicationPair.soure_port)
}

// string dest_ip = 5;
void CommunicationPair::clear_dest_ip() {
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::dest_ip() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.dest_ip)
  return dest_ip_.GetNoArena();
}
void CommunicationPair::set_dest_ip(const ::std::string& value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.dest_ip)
}
#if LANG_CXX11
void CommunicationPair::set_dest_ip(::std::string&& value) {
  
  dest_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.dest_ip)
}
#endif
void CommunicationPair::set_dest_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.dest_ip)
}
void CommunicationPair::set_dest_ip(const char* value, size_t size) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.dest_ip)
}
::std::string* CommunicationPair::mutable_dest_ip() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.dest_ip)
  return dest_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_dest_ip() {
  // @@protoc_insertion_point(field_release:CommunicationPair.dest_ip)
  
  return dest_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_dest_ip(::std::string* dest_ip) {
  if (dest_ip != NULL) {
    
  } else {
    
  }
  dest_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_ip);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.dest_ip)
}

// string dest_mac = 6;
void CommunicationPair::clear_dest_mac() {
  dest_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::dest_mac() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.dest_mac)
  return dest_mac_.GetNoArena();
}
void CommunicationPair::set_dest_mac(const ::std::string& value) {
  
  dest_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.dest_mac)
}
#if LANG_CXX11
void CommunicationPair::set_dest_mac(::std::string&& value) {
  
  dest_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.dest_mac)
}
#endif
void CommunicationPair::set_dest_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.dest_mac)
}
void CommunicationPair::set_dest_mac(const char* value, size_t size) {
  
  dest_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.dest_mac)
}
::std::string* CommunicationPair::mutable_dest_mac() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.dest_mac)
  return dest_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_dest_mac() {
  // @@protoc_insertion_point(field_release:CommunicationPair.dest_mac)
  
  return dest_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_dest_mac(::std::string* dest_mac) {
  if (dest_mac != NULL) {
    
  } else {
    
  }
  dest_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_mac);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.dest_mac)
}

// int32 dest_port = 7;
void CommunicationPair::clear_dest_port() {
  dest_port_ = 0;
}
::google::protobuf::int32 CommunicationPair::dest_port() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.dest_port)
  return dest_port_;
}
void CommunicationPair::set_dest_port(::google::protobuf::int32 value) {
  
  dest_port_ = value;
  // @@protoc_insertion_point(field_set:CommunicationPair.dest_port)
}

// int32 netstatus = 8;
void CommunicationPair::clear_netstatus() {
  netstatus_ = 0;
}
::google::protobuf::int32 CommunicationPair::netstatus() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.netstatus)
  return netstatus_;
}
void CommunicationPair::set_netstatus(::google::protobuf::int32 value) {
  
  netstatus_ = value;
  // @@protoc_insertion_point(field_set:CommunicationPair.netstatus)
}

// string lastTime = 9;
void CommunicationPair::clear_lasttime() {
  lasttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::lasttime() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.lastTime)
  return lasttime_.GetNoArena();
}
void CommunicationPair::set_lasttime(const ::std::string& value) {
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.lastTime)
}
#if LANG_CXX11
void CommunicationPair::set_lasttime(::std::string&& value) {
  
  lasttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.lastTime)
}
#endif
void CommunicationPair::set_lasttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.lastTime)
}
void CommunicationPair::set_lasttime(const char* value, size_t size) {
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.lastTime)
}
::std::string* CommunicationPair::mutable_lasttime() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.lastTime)
  return lasttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_lasttime() {
  // @@protoc_insertion_point(field_release:CommunicationPair.lastTime)
  
  return lasttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_lasttime(::std::string* lasttime) {
  if (lasttime != NULL) {
    
  } else {
    
  }
  lasttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttime);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.lastTime)
}

// string eth_name = 10;
void CommunicationPair::clear_eth_name() {
  eth_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::eth_name() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.eth_name)
  return eth_name_.GetNoArena();
}
void CommunicationPair::set_eth_name(const ::std::string& value) {
  
  eth_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.eth_name)
}
#if LANG_CXX11
void CommunicationPair::set_eth_name(::std::string&& value) {
  
  eth_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.eth_name)
}
#endif
void CommunicationPair::set_eth_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eth_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.eth_name)
}
void CommunicationPair::set_eth_name(const char* value, size_t size) {
  
  eth_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.eth_name)
}
::std::string* CommunicationPair::mutable_eth_name() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.eth_name)
  return eth_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_eth_name() {
  // @@protoc_insertion_point(field_release:CommunicationPair.eth_name)
  
  return eth_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_eth_name(::std::string* eth_name) {
  if (eth_name != NULL) {
    
  } else {
    
  }
  eth_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eth_name);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.eth_name)
}

// string conn_start_time = 11;
void CommunicationPair::clear_conn_start_time() {
  conn_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::conn_start_time() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.conn_start_time)
  return conn_start_time_.GetNoArena();
}
void CommunicationPair::set_conn_start_time(const ::std::string& value) {
  
  conn_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.conn_start_time)
}
#if LANG_CXX11
void CommunicationPair::set_conn_start_time(::std::string&& value) {
  
  conn_start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.conn_start_time)
}
#endif
void CommunicationPair::set_conn_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conn_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.conn_start_time)
}
void CommunicationPair::set_conn_start_time(const char* value, size_t size) {
  
  conn_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.conn_start_time)
}
::std::string* CommunicationPair::mutable_conn_start_time() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.conn_start_time)
  return conn_start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_conn_start_time() {
  // @@protoc_insertion_point(field_release:CommunicationPair.conn_start_time)
  
  return conn_start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_conn_start_time(::std::string* conn_start_time) {
  if (conn_start_time != NULL) {
    
  } else {
    
  }
  conn_start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_start_time);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.conn_start_time)
}

// string conn_end_time = 12;
void CommunicationPair::clear_conn_end_time() {
  conn_end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::conn_end_time() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.conn_end_time)
  return conn_end_time_.GetNoArena();
}
void CommunicationPair::set_conn_end_time(const ::std::string& value) {
  
  conn_end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.conn_end_time)
}
#if LANG_CXX11
void CommunicationPair::set_conn_end_time(::std::string&& value) {
  
  conn_end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.conn_end_time)
}
#endif
void CommunicationPair::set_conn_end_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conn_end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.conn_end_time)
}
void CommunicationPair::set_conn_end_time(const char* value, size_t size) {
  
  conn_end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.conn_end_time)
}
::std::string* CommunicationPair::mutable_conn_end_time() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.conn_end_time)
  return conn_end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_conn_end_time() {
  // @@protoc_insertion_point(field_release:CommunicationPair.conn_end_time)
  
  return conn_end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_conn_end_time(::std::string* conn_end_time) {
  if (conn_end_time != NULL) {
    
  } else {
    
  }
  conn_end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_end_time);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.conn_end_time)
}

// string packagename = 13;
void CommunicationPair::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::packagename() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.packagename)
  return packagename_.GetNoArena();
}
void CommunicationPair::set_packagename(const ::std::string& value) {
  
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.packagename)
}
#if LANG_CXX11
void CommunicationPair::set_packagename(::std::string&& value) {
  
  packagename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.packagename)
}
#endif
void CommunicationPair::set_packagename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.packagename)
}
void CommunicationPair::set_packagename(const char* value, size_t size) {
  
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.packagename)
}
::std::string* CommunicationPair::mutable_packagename() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.packagename)
  return packagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_packagename() {
  // @@protoc_insertion_point(field_release:CommunicationPair.packagename)
  
  return packagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_packagename(::std::string* packagename) {
  if (packagename != NULL) {
    
  } else {
    
  }
  packagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.packagename)
}

// string packageline = 14;
void CommunicationPair::clear_packageline() {
  packageline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommunicationPair::packageline() const {
  // @@protoc_insertion_point(field_get:CommunicationPair.packageline)
  return packageline_.GetNoArena();
}
void CommunicationPair::set_packageline(const ::std::string& value) {
  
  packageline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommunicationPair.packageline)
}
#if LANG_CXX11
void CommunicationPair::set_packageline(::std::string&& value) {
  
  packageline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommunicationPair.packageline)
}
#endif
void CommunicationPair::set_packageline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  packageline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommunicationPair.packageline)
}
void CommunicationPair::set_packageline(const char* value, size_t size) {
  
  packageline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommunicationPair.packageline)
}
::std::string* CommunicationPair::mutable_packageline() {
  
  // @@protoc_insertion_point(field_mutable:CommunicationPair.packageline)
  return packageline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommunicationPair::release_packageline() {
  // @@protoc_insertion_point(field_release:CommunicationPair.packageline)
  
  return packageline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommunicationPair::set_allocated_packageline(::std::string* packageline) {
  if (packageline != NULL) {
    
  } else {
    
  }
  packageline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packageline);
  // @@protoc_insertion_point(field_set_allocated:CommunicationPair.packageline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UPRealPointValue::kChannelNameFieldNumber;
const int UPRealPointValue::kDeviceNameFieldNumber;
const int UPRealPointValue::kPointValueFieldNumber;
const int UPRealPointValue::kPointAddrFieldNumber;
const int UPRealPointValue::kValueTypeFieldNumber;
const int UPRealPointValue::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UPRealPointValue::UPRealPointValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPRealPointValue)
}
UPRealPointValue::UPRealPointValue(const UPRealPointValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicename().size() > 0) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  pointvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pointvalue().size() > 0) {
    pointvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointvalue_);
  }
  pointaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pointaddr().size() > 0) {
    pointaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointaddr_);
  }
  ::memcpy(&valuetype_, &from.valuetype_,
    reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&valuetype_) + sizeof(channeltype_));
  // @@protoc_insertion_point(copy_constructor:UPRealPointValue)
}

void UPRealPointValue::SharedCtor() {
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valuetype_, 0, reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&valuetype_) + sizeof(channeltype_));
  _cached_size_ = 0;
}

UPRealPointValue::~UPRealPointValue() {
  // @@protoc_insertion_point(destructor:UPRealPointValue)
  SharedDtor();
}

void UPRealPointValue::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UPRealPointValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UPRealPointValue& UPRealPointValue::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

UPRealPointValue* UPRealPointValue::New(::google::protobuf::Arena* arena) const {
  UPRealPointValue* n = new UPRealPointValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UPRealPointValue::Clear() {
// @@protoc_insertion_point(message_clear_start:UPRealPointValue)
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valuetype_, 0, reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&valuetype_) + sizeof(channeltype_));
}

bool UPRealPointValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPRealPointValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UPRealPointValue.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deviceName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UPRealPointValue.deviceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pointValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pointvalue().data(), this->pointvalue().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UPRealPointValue.pointValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pointAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pointaddr().data(), this->pointaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UPRealPointValue.pointAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PointValueType valueType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_valuetype(static_cast< ::PointValueType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channelType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPRealPointValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPRealPointValue)
  return false;
#undef DO_
}

void UPRealPointValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPRealPointValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UPRealPointValue.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  // string deviceName = 2;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UPRealPointValue.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicename(), output);
  }

  // string pointValue = 3;
  if (this->pointvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pointvalue().data(), this->pointvalue().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UPRealPointValue.pointValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pointvalue(), output);
  }

  // string pointAddr = 4;
  if (this->pointaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pointaddr().data(), this->pointaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UPRealPointValue.pointAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pointaddr(), output);
  }

  // .PointValueType valueType = 5;
  if (this->valuetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->valuetype(), output);
  }

  // int32 channelType = 6;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->channeltype(), output);
  }

  // @@protoc_insertion_point(serialize_end:UPRealPointValue)
}

size_t UPRealPointValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UPRealPointValue)
  size_t total_size = 0;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  // string deviceName = 2;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // string pointValue = 3;
  if (this->pointvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pointvalue());
  }

  // string pointAddr = 4;
  if (this->pointaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pointaddr());
  }

  // .PointValueType valueType = 5;
  if (this->valuetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->valuetype());
  }

  // int32 channelType = 6;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channeltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UPRealPointValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UPRealPointValue*>(&from));
}

void UPRealPointValue::MergeFrom(const UPRealPointValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UPRealPointValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.pointvalue().size() > 0) {

    pointvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointvalue_);
  }
  if (from.pointaddr().size() > 0) {

    pointaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointaddr_);
  }
  if (from.valuetype() != 0) {
    set_valuetype(from.valuetype());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
}

void UPRealPointValue::CopyFrom(const UPRealPointValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UPRealPointValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UPRealPointValue::IsInitialized() const {
  return true;
}

void UPRealPointValue::Swap(UPRealPointValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UPRealPointValue::InternalSwap(UPRealPointValue* other) {
  channelname_.Swap(&other->channelname_);
  devicename_.Swap(&other->devicename_);
  pointvalue_.Swap(&other->pointvalue_);
  pointaddr_.Swap(&other->pointaddr_);
  std::swap(valuetype_, other->valuetype_);
  std::swap(channeltype_, other->channeltype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UPRealPointValue::GetTypeName() const {
  return "UPRealPointValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UPRealPointValue

// string channelName = 1;
void UPRealPointValue::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UPRealPointValue::channelname() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.channelName)
  return channelname_.GetNoArena();
}
void UPRealPointValue::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.channelName)
}
#if LANG_CXX11
void UPRealPointValue::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.channelName)
}
#endif
void UPRealPointValue::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.channelName)
}
void UPRealPointValue::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.channelName)
}
::std::string* UPRealPointValue::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UPRealPointValue::release_channelname() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UPRealPointValue::set_allocated_channelname(::std::string* channelname) {
  if (channelname != NULL) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.channelName)
}

// string deviceName = 2;
void UPRealPointValue::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UPRealPointValue::devicename() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.deviceName)
  return devicename_.GetNoArena();
}
void UPRealPointValue::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.deviceName)
}
#if LANG_CXX11
void UPRealPointValue::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.deviceName)
}
#endif
void UPRealPointValue::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.deviceName)
}
void UPRealPointValue::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.deviceName)
}
::std::string* UPRealPointValue::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UPRealPointValue::release_devicename() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UPRealPointValue::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.deviceName)
}

// string pointValue = 3;
void UPRealPointValue::clear_pointvalue() {
  pointvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UPRealPointValue::pointvalue() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.pointValue)
  return pointvalue_.GetNoArena();
}
void UPRealPointValue::set_pointvalue(const ::std::string& value) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.pointValue)
}
#if LANG_CXX11
void UPRealPointValue::set_pointvalue(::std::string&& value) {
  
  pointvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.pointValue)
}
#endif
void UPRealPointValue::set_pointvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.pointValue)
}
void UPRealPointValue::set_pointvalue(const char* value, size_t size) {
  
  pointvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.pointValue)
}
::std::string* UPRealPointValue::mutable_pointvalue() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.pointValue)
  return pointvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UPRealPointValue::release_pointvalue() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.pointValue)
  
  return pointvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UPRealPointValue::set_allocated_pointvalue(::std::string* pointvalue) {
  if (pointvalue != NULL) {
    
  } else {
    
  }
  pointvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointvalue);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.pointValue)
}

// string pointAddr = 4;
void UPRealPointValue::clear_pointaddr() {
  pointaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UPRealPointValue::pointaddr() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.pointAddr)
  return pointaddr_.GetNoArena();
}
void UPRealPointValue::set_pointaddr(const ::std::string& value) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UPRealPointValue.pointAddr)
}
#if LANG_CXX11
void UPRealPointValue::set_pointaddr(::std::string&& value) {
  
  pointaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UPRealPointValue.pointAddr)
}
#endif
void UPRealPointValue::set_pointaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UPRealPointValue.pointAddr)
}
void UPRealPointValue::set_pointaddr(const char* value, size_t size) {
  
  pointaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UPRealPointValue.pointAddr)
}
::std::string* UPRealPointValue::mutable_pointaddr() {
  
  // @@protoc_insertion_point(field_mutable:UPRealPointValue.pointAddr)
  return pointaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UPRealPointValue::release_pointaddr() {
  // @@protoc_insertion_point(field_release:UPRealPointValue.pointAddr)
  
  return pointaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UPRealPointValue::set_allocated_pointaddr(::std::string* pointaddr) {
  if (pointaddr != NULL) {
    
  } else {
    
  }
  pointaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointaddr);
  // @@protoc_insertion_point(field_set_allocated:UPRealPointValue.pointAddr)
}

// .PointValueType valueType = 5;
void UPRealPointValue::clear_valuetype() {
  valuetype_ = 0;
}
::PointValueType UPRealPointValue::valuetype() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.valueType)
  return static_cast< ::PointValueType >(valuetype_);
}
void UPRealPointValue::set_valuetype(::PointValueType value) {
  
  valuetype_ = value;
  // @@protoc_insertion_point(field_set:UPRealPointValue.valueType)
}

// int32 channelType = 6;
void UPRealPointValue::clear_channeltype() {
  channeltype_ = 0;
}
::google::protobuf::int32 UPRealPointValue::channeltype() const {
  // @@protoc_insertion_point(field_get:UPRealPointValue.channelType)
  return channeltype_;
}
void UPRealPointValue::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:UPRealPointValue.channelType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowThreshold::kMessageCountFieldNumber;
const int FlowThreshold::kFlowMaxFieldNumber;
const int FlowThreshold::kNoFlowTimeFieldNumber;
const int FlowThreshold::kLinkMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowThreshold::FlowThreshold()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlowThreshold)
}
FlowThreshold::FlowThreshold(const FlowThreshold& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagecount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.messagecount().size() > 0) {
    messagecount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagecount_);
  }
  flowmax_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.flowmax().size() > 0) {
    flowmax_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flowmax_);
  }
  noflowtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.noflowtime().size() > 0) {
    noflowtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noflowtime_);
  }
  linkmax_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.linkmax().size() > 0) {
    linkmax_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkmax_);
  }
  // @@protoc_insertion_point(copy_constructor:FlowThreshold)
}

void FlowThreshold::SharedCtor() {
  messagecount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flowmax_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noflowtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkmax_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FlowThreshold::~FlowThreshold() {
  // @@protoc_insertion_point(destructor:FlowThreshold)
  SharedDtor();
}

void FlowThreshold::SharedDtor() {
  messagecount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flowmax_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noflowtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkmax_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowThreshold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlowThreshold& FlowThreshold::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlowThreshold* FlowThreshold::New(::google::protobuf::Arena* arena) const {
  FlowThreshold* n = new FlowThreshold;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowThreshold::Clear() {
// @@protoc_insertion_point(message_clear_start:FlowThreshold)
  messagecount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flowmax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noflowtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkmax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FlowThreshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlowThreshold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string messageCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagecount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->messagecount().data(), this->messagecount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FlowThreshold.messageCount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string flowMax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flowmax()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flowmax().data(), this->flowmax().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FlowThreshold.flowMax"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string noFlowTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noflowtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->noflowtime().data(), this->noflowtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FlowThreshold.noFlowTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string linkMax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkmax()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linkmax().data(), this->linkmax().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FlowThreshold.linkMax"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlowThreshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlowThreshold)
  return false;
#undef DO_
}

void FlowThreshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlowThreshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageCount = 1;
  if (this->messagecount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messagecount().data(), this->messagecount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FlowThreshold.messageCount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messagecount(), output);
  }

  // string flowMax = 2;
  if (this->flowmax().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flowmax().data(), this->flowmax().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FlowThreshold.flowMax");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->flowmax(), output);
  }

  // string noFlowTime = 3;
  if (this->noflowtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noflowtime().data(), this->noflowtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FlowThreshold.noFlowTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->noflowtime(), output);
  }

  // string linkMax = 4;
  if (this->linkmax().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkmax().data(), this->linkmax().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FlowThreshold.linkMax");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->linkmax(), output);
  }

  // @@protoc_insertion_point(serialize_end:FlowThreshold)
}

size_t FlowThreshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlowThreshold)
  size_t total_size = 0;

  // string messageCount = 1;
  if (this->messagecount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagecount());
  }

  // string flowMax = 2;
  if (this->flowmax().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flowmax());
  }

  // string noFlowTime = 3;
  if (this->noflowtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->noflowtime());
  }

  // string linkMax = 4;
  if (this->linkmax().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linkmax());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowThreshold::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlowThreshold*>(&from));
}

void FlowThreshold::MergeFrom(const FlowThreshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlowThreshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.messagecount().size() > 0) {

    messagecount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagecount_);
  }
  if (from.flowmax().size() > 0) {

    flowmax_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flowmax_);
  }
  if (from.noflowtime().size() > 0) {

    noflowtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noflowtime_);
  }
  if (from.linkmax().size() > 0) {

    linkmax_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkmax_);
  }
}

void FlowThreshold::CopyFrom(const FlowThreshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlowThreshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowThreshold::IsInitialized() const {
  return true;
}

void FlowThreshold::Swap(FlowThreshold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowThreshold::InternalSwap(FlowThreshold* other) {
  messagecount_.Swap(&other->messagecount_);
  flowmax_.Swap(&other->flowmax_);
  noflowtime_.Swap(&other->noflowtime_);
  linkmax_.Swap(&other->linkmax_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlowThreshold::GetTypeName() const {
  return "FlowThreshold";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowThreshold

// string messageCount = 1;
void FlowThreshold::clear_messagecount() {
  messagecount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FlowThreshold::messagecount() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.messageCount)
  return messagecount_.GetNoArena();
}
void FlowThreshold::set_messagecount(const ::std::string& value) {
  
  messagecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.messageCount)
}
#if LANG_CXX11
void FlowThreshold::set_messagecount(::std::string&& value) {
  
  messagecount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.messageCount)
}
#endif
void FlowThreshold::set_messagecount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messagecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.messageCount)
}
void FlowThreshold::set_messagecount(const char* value, size_t size) {
  
  messagecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.messageCount)
}
::std::string* FlowThreshold::mutable_messagecount() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.messageCount)
  return messagecount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FlowThreshold::release_messagecount() {
  // @@protoc_insertion_point(field_release:FlowThreshold.messageCount)
  
  return messagecount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FlowThreshold::set_allocated_messagecount(::std::string* messagecount) {
  if (messagecount != NULL) {
    
  } else {
    
  }
  messagecount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagecount);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.messageCount)
}

// string flowMax = 2;
void FlowThreshold::clear_flowmax() {
  flowmax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FlowThreshold::flowmax() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.flowMax)
  return flowmax_.GetNoArena();
}
void FlowThreshold::set_flowmax(const ::std::string& value) {
  
  flowmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.flowMax)
}
#if LANG_CXX11
void FlowThreshold::set_flowmax(::std::string&& value) {
  
  flowmax_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.flowMax)
}
#endif
void FlowThreshold::set_flowmax(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flowmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.flowMax)
}
void FlowThreshold::set_flowmax(const char* value, size_t size) {
  
  flowmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.flowMax)
}
::std::string* FlowThreshold::mutable_flowmax() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.flowMax)
  return flowmax_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FlowThreshold::release_flowmax() {
  // @@protoc_insertion_point(field_release:FlowThreshold.flowMax)
  
  return flowmax_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FlowThreshold::set_allocated_flowmax(::std::string* flowmax) {
  if (flowmax != NULL) {
    
  } else {
    
  }
  flowmax_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flowmax);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.flowMax)
}

// string noFlowTime = 3;
void FlowThreshold::clear_noflowtime() {
  noflowtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FlowThreshold::noflowtime() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.noFlowTime)
  return noflowtime_.GetNoArena();
}
void FlowThreshold::set_noflowtime(const ::std::string& value) {
  
  noflowtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.noFlowTime)
}
#if LANG_CXX11
void FlowThreshold::set_noflowtime(::std::string&& value) {
  
  noflowtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.noFlowTime)
}
#endif
void FlowThreshold::set_noflowtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  noflowtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.noFlowTime)
}
void FlowThreshold::set_noflowtime(const char* value, size_t size) {
  
  noflowtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.noFlowTime)
}
::std::string* FlowThreshold::mutable_noflowtime() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.noFlowTime)
  return noflowtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FlowThreshold::release_noflowtime() {
  // @@protoc_insertion_point(field_release:FlowThreshold.noFlowTime)
  
  return noflowtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FlowThreshold::set_allocated_noflowtime(::std::string* noflowtime) {
  if (noflowtime != NULL) {
    
  } else {
    
  }
  noflowtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noflowtime);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.noFlowTime)
}

// string linkMax = 4;
void FlowThreshold::clear_linkmax() {
  linkmax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FlowThreshold::linkmax() const {
  // @@protoc_insertion_point(field_get:FlowThreshold.linkMax)
  return linkmax_.GetNoArena();
}
void FlowThreshold::set_linkmax(const ::std::string& value) {
  
  linkmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlowThreshold.linkMax)
}
#if LANG_CXX11
void FlowThreshold::set_linkmax(::std::string&& value) {
  
  linkmax_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlowThreshold.linkMax)
}
#endif
void FlowThreshold::set_linkmax(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlowThreshold.linkMax)
}
void FlowThreshold::set_linkmax(const char* value, size_t size) {
  
  linkmax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlowThreshold.linkMax)
}
::std::string* FlowThreshold::mutable_linkmax() {
  
  // @@protoc_insertion_point(field_mutable:FlowThreshold.linkMax)
  return linkmax_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FlowThreshold::release_linkmax() {
  // @@protoc_insertion_point(field_release:FlowThreshold.linkMax)
  
  return linkmax_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FlowThreshold::set_allocated_linkmax(::std::string* linkmax) {
  if (linkmax != NULL) {
    
  } else {
    
  }
  linkmax_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkmax);
  // @@protoc_insertion_point(field_set_allocated:FlowThreshold.linkMax)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlarmDataMsg::kTypeFieldNumber;
const int AlarmDataMsg::kIdFieldNumber;
const int AlarmDataMsg::kLevelFieldNumber;
const int AlarmDataMsg::kTimeFieldNumber;
const int AlarmDataMsg::kDevicenameFieldNumber;
const int AlarmDataMsg::kMsgFieldNumber;
const int AlarmDataMsg::kReasonFieldNumber;
const int AlarmDataMsg::kConfirmedFieldNumber;
const int AlarmDataMsg::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlarmDataMsg::AlarmDataMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AlarmDataMsg)
}
AlarmDataMsg::AlarmDataMsg(const AlarmDataMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicename().size() > 0) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  confirmed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.confirmed().size() > 0) {
    confirmed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirmed_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:AlarmDataMsg)
}

void AlarmDataMsg::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_) + sizeof(level_));
  _cached_size_ = 0;
}

AlarmDataMsg::~AlarmDataMsg() {
  // @@protoc_insertion_point(destructor:AlarmDataMsg)
  SharedDtor();
}

void AlarmDataMsg::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlarmDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AlarmDataMsg& AlarmDataMsg::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlarmDataMsg* AlarmDataMsg::New(::google::protobuf::Arena* arena) const {
  AlarmDataMsg* n = new AlarmDataMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlarmDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AlarmDataMsg)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_) + sizeof(level_));
}

bool AlarmDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AlarmDataMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmDataMsg.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmDataMsg.time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes devicename = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string confirmed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirmed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->confirmed().data(), this->confirmed().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmDataMsg.confirmed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AlarmDataMsg.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AlarmDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AlarmDataMsg)
  return false;
#undef DO_
}

void AlarmDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AlarmDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmDataMsg.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmDataMsg.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  // bytes devicename = 5;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->devicename(), output);
  }

  // bytes msg = 6;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->msg(), output);
  }

  // bytes Reason = 7;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->reason(), output);
  }

  // string confirmed = 8;
  if (this->confirmed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirmed().data(), this->confirmed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmDataMsg.confirmed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->confirmed(), output);
  }

  // string filename = 9;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AlarmDataMsg.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:AlarmDataMsg)
}

size_t AlarmDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlarmDataMsg)
  size_t total_size = 0;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string time = 4;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // bytes devicename = 5;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicename());
  }

  // bytes msg = 6;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // bytes Reason = 7;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reason());
  }

  // string confirmed = 8;
  if (this->confirmed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->confirmed());
  }

  // string filename = 9;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmDataMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlarmDataMsg*>(&from));
}

void AlarmDataMsg::MergeFrom(const AlarmDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlarmDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.confirmed().size() > 0) {

    confirmed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirmed_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void AlarmDataMsg::CopyFrom(const AlarmDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlarmDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmDataMsg::IsInitialized() const {
  return true;
}

void AlarmDataMsg::Swap(AlarmDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlarmDataMsg::InternalSwap(AlarmDataMsg* other) {
  id_.Swap(&other->id_);
  time_.Swap(&other->time_);
  devicename_.Swap(&other->devicename_);
  msg_.Swap(&other->msg_);
  reason_.Swap(&other->reason_);
  confirmed_.Swap(&other->confirmed_);
  filename_.Swap(&other->filename_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AlarmDataMsg::GetTypeName() const {
  return "AlarmDataMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlarmDataMsg

// int32 type = 1;
void AlarmDataMsg::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 AlarmDataMsg::type() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.type)
  return type_;
}
void AlarmDataMsg::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AlarmDataMsg.type)
}

// string id = 2;
void AlarmDataMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::id() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.id)
  return id_.GetNoArena();
}
void AlarmDataMsg::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.id)
}
#if LANG_CXX11
void AlarmDataMsg::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.id)
}
#endif
void AlarmDataMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.id)
}
void AlarmDataMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.id)
}
::std::string* AlarmDataMsg::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_id() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.id)
}

// int32 level = 3;
void AlarmDataMsg::clear_level() {
  level_ = 0;
}
::google::protobuf::int32 AlarmDataMsg::level() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.level)
  return level_;
}
void AlarmDataMsg::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:AlarmDataMsg.level)
}

// string time = 4;
void AlarmDataMsg::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::time() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.time)
  return time_.GetNoArena();
}
void AlarmDataMsg::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.time)
}
#if LANG_CXX11
void AlarmDataMsg::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.time)
}
#endif
void AlarmDataMsg::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.time)
}
void AlarmDataMsg::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.time)
}
::std::string* AlarmDataMsg::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_time() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.time)
}

// bytes devicename = 5;
void AlarmDataMsg::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::devicename() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.devicename)
  return devicename_.GetNoArena();
}
void AlarmDataMsg::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.devicename)
}
#if LANG_CXX11
void AlarmDataMsg::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.devicename)
}
#endif
void AlarmDataMsg::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.devicename)
}
void AlarmDataMsg::set_devicename(const void* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.devicename)
}
::std::string* AlarmDataMsg::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_devicename() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.devicename)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.devicename)
}

// bytes msg = 6;
void AlarmDataMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::msg() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.msg)
  return msg_.GetNoArena();
}
void AlarmDataMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.msg)
}
#if LANG_CXX11
void AlarmDataMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.msg)
}
#endif
void AlarmDataMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.msg)
}
void AlarmDataMsg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.msg)
}
::std::string* AlarmDataMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_msg() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.msg)
}

// bytes Reason = 7;
void AlarmDataMsg::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::reason() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.Reason)
  return reason_.GetNoArena();
}
void AlarmDataMsg::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.Reason)
}
#if LANG_CXX11
void AlarmDataMsg::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.Reason)
}
#endif
void AlarmDataMsg::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.Reason)
}
void AlarmDataMsg::set_reason(const void* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.Reason)
}
::std::string* AlarmDataMsg::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_reason() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.Reason)
}

// string confirmed = 8;
void AlarmDataMsg::clear_confirmed() {
  confirmed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::confirmed() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.confirmed)
  return confirmed_.GetNoArena();
}
void AlarmDataMsg::set_confirmed(const ::std::string& value) {
  
  confirmed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.confirmed)
}
#if LANG_CXX11
void AlarmDataMsg::set_confirmed(::std::string&& value) {
  
  confirmed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.confirmed)
}
#endif
void AlarmDataMsg::set_confirmed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  confirmed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.confirmed)
}
void AlarmDataMsg::set_confirmed(const char* value, size_t size) {
  
  confirmed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.confirmed)
}
::std::string* AlarmDataMsg::mutable_confirmed() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.confirmed)
  return confirmed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_confirmed() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.confirmed)
  
  return confirmed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_confirmed(::std::string* confirmed) {
  if (confirmed != NULL) {
    
  } else {
    
  }
  confirmed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmed);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.confirmed)
}

// string filename = 9;
void AlarmDataMsg::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlarmDataMsg::filename() const {
  // @@protoc_insertion_point(field_get:AlarmDataMsg.filename)
  return filename_.GetNoArena();
}
void AlarmDataMsg::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlarmDataMsg.filename)
}
#if LANG_CXX11
void AlarmDataMsg::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlarmDataMsg.filename)
}
#endif
void AlarmDataMsg::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlarmDataMsg.filename)
}
void AlarmDataMsg::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlarmDataMsg.filename)
}
::std::string* AlarmDataMsg::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:AlarmDataMsg.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlarmDataMsg::release_filename() {
  // @@protoc_insertion_point(field_release:AlarmDataMsg.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlarmDataMsg::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:AlarmDataMsg.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControl::kProtocolNameFieldNumber;
const int RemoteControl::kTimeStampFieldNumber;
const int RemoteControl::kSrcIpFieldNumber;
const int RemoteControl::kSrcDeviceFieldNumber;
const int RemoteControl::kDstIpFieldNumber;
const int RemoteControl::kDstDeviceFieldNumber;
const int RemoteControl::kIedNameFieldNumber;
const int RemoteControl::kPointNameFieldNumber;
const int RemoteControl::kPointDescFieldNumber;
const int RemoteControl::kResultFieldNumber;
const int RemoteControl::kDeviceNoFieldNumber;
const int RemoteControl::kPointNoFieldNumber;
const int RemoteControl::kSboFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControl::RemoteControl()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteControl)
}
RemoteControl::RemoteControl(const RemoteControl& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolname().size() > 0) {
    protocolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  srcip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.srcip().size() > 0) {
    srcip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcip_);
  }
  srcdevice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.srcdevice().size() > 0) {
    srcdevice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcdevice_);
  }
  dstip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dstip().size() > 0) {
    dstip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstip_);
  }
  dstdevice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dstdevice().size() > 0) {
    dstdevice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstdevice_);
  }
  iedname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iedname().size() > 0) {
    iedname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iedname_);
  }
  pointname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pointname().size() > 0) {
    pointname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointname_);
  }
  pointdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pointdesc().size() > 0) {
    pointdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointdesc_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&sbo_) -
    reinterpret_cast<char*>(&result_) + sizeof(sbo_));
  // @@protoc_insertion_point(copy_constructor:RemoteControl)
}

void RemoteControl::SharedCtor() {
  protocolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcdevice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstdevice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iedname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&sbo_) -
    reinterpret_cast<char*>(&result_) + sizeof(sbo_));
  _cached_size_ = 0;
}

RemoteControl::~RemoteControl() {
  // @@protoc_insertion_point(destructor:RemoteControl)
  SharedDtor();
}

void RemoteControl::SharedDtor() {
  protocolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcdevice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstdevice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iedname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoteControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteControl& RemoteControl::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoteControl* RemoteControl::New(::google::protobuf::Arena* arena) const {
  RemoteControl* n = new RemoteControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControl)
  protocolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iedname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&sbo_) -
    reinterpret_cast<char*>(&result_) + sizeof(sbo_));
}

bool RemoteControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string protocolName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocolname().data(), this->protocolname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.protocolName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timeStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.timeStamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string srcIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srcip().data(), this->srcip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.srcIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string srcDevice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcdevice()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srcdevice().data(), this->srcdevice().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.srcDevice"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dstIp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dstip().data(), this->dstip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.dstIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dstDevice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstdevice()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dstdevice().data(), this->dstdevice().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.dstDevice"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string iedName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iedname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iedname().data(), this->iedname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.iedName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pointName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pointname().data(), this->pointname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RemoteControl.pointName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pointDesc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pointdesc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deviceNo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pointNo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sbo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteControl)
  return false;
#undef DO_
}

void RemoteControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocolName = 1;
  if (this->protocolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolname().data(), this->protocolname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.protocolName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocolname(), output);
  }

  // string timeStamp = 2;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.timeStamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  // string srcIp = 3;
  if (this->srcip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srcip().data(), this->srcip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.srcIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->srcip(), output);
  }

  // string srcDevice = 4;
  if (this->srcdevice().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srcdevice().data(), this->srcdevice().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.srcDevice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->srcdevice(), output);
  }

  // string dstIp = 5;
  if (this->dstip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dstip().data(), this->dstip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.dstIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dstip(), output);
  }

  // string dstDevice = 6;
  if (this->dstdevice().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dstdevice().data(), this->dstdevice().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.dstDevice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dstdevice(), output);
  }

  // string iedName = 7;
  if (this->iedname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iedname().data(), this->iedname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.iedName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->iedname(), output);
  }

  // string pointName = 8;
  if (this->pointname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pointname().data(), this->pointname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RemoteControl.pointName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pointname(), output);
  }

  // bytes pointDesc = 9;
  if (this->pointdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->pointdesc(), output);
  }

  // int32 result = 10;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->result(), output);
  }

  // int32 deviceNo = 11;
  if (this->deviceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->deviceno(), output);
  }

  // int32 pointNo = 12;
  if (this->pointno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pointno(), output);
  }

  // int32 sbo = 13;
  if (this->sbo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sbo(), output);
  }

  // @@protoc_insertion_point(serialize_end:RemoteControl)
}

size_t RemoteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControl)
  size_t total_size = 0;

  // string protocolName = 1;
  if (this->protocolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocolname());
  }

  // string timeStamp = 2;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // string srcIp = 3;
  if (this->srcip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srcip());
  }

  // string srcDevice = 4;
  if (this->srcdevice().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srcdevice());
  }

  // string dstIp = 5;
  if (this->dstip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dstip());
  }

  // string dstDevice = 6;
  if (this->dstdevice().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dstdevice());
  }

  // string iedName = 7;
  if (this->iedname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iedname());
  }

  // string pointName = 8;
  if (this->pointname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pointname());
  }

  // bytes pointDesc = 9;
  if (this->pointdesc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pointdesc());
  }

  // int32 result = 10;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 deviceNo = 11;
  if (this->deviceno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deviceno());
  }

  // int32 pointNo = 12;
  if (this->pointno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pointno());
  }

  // int32 sbo = 13;
  if (this->sbo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sbo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoteControl*>(&from));
}

void RemoteControl::MergeFrom(const RemoteControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocolname().size() > 0) {

    protocolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.srcip().size() > 0) {

    srcip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcip_);
  }
  if (from.srcdevice().size() > 0) {

    srcdevice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcdevice_);
  }
  if (from.dstip().size() > 0) {

    dstip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstip_);
  }
  if (from.dstdevice().size() > 0) {

    dstdevice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstdevice_);
  }
  if (from.iedname().size() > 0) {

    iedname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iedname_);
  }
  if (from.pointname().size() > 0) {

    pointname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointname_);
  }
  if (from.pointdesc().size() > 0) {

    pointdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pointdesc_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.deviceno() != 0) {
    set_deviceno(from.deviceno());
  }
  if (from.pointno() != 0) {
    set_pointno(from.pointno());
  }
  if (from.sbo() != 0) {
    set_sbo(from.sbo());
  }
}

void RemoteControl::CopyFrom(const RemoteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControl::IsInitialized() const {
  return true;
}

void RemoteControl::Swap(RemoteControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControl::InternalSwap(RemoteControl* other) {
  protocolname_.Swap(&other->protocolname_);
  timestamp_.Swap(&other->timestamp_);
  srcip_.Swap(&other->srcip_);
  srcdevice_.Swap(&other->srcdevice_);
  dstip_.Swap(&other->dstip_);
  dstdevice_.Swap(&other->dstdevice_);
  iedname_.Swap(&other->iedname_);
  pointname_.Swap(&other->pointname_);
  pointdesc_.Swap(&other->pointdesc_);
  std::swap(result_, other->result_);
  std::swap(deviceno_, other->deviceno_);
  std::swap(pointno_, other->pointno_);
  std::swap(sbo_, other->sbo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoteControl::GetTypeName() const {
  return "RemoteControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteControl

// string protocolName = 1;
void RemoteControl::clear_protocolname() {
  protocolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::protocolname() const {
  // @@protoc_insertion_point(field_get:RemoteControl.protocolName)
  return protocolname_.GetNoArena();
}
void RemoteControl::set_protocolname(const ::std::string& value) {
  
  protocolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.protocolName)
}
#if LANG_CXX11
void RemoteControl::set_protocolname(::std::string&& value) {
  
  protocolname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.protocolName)
}
#endif
void RemoteControl::set_protocolname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.protocolName)
}
void RemoteControl::set_protocolname(const char* value, size_t size) {
  
  protocolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.protocolName)
}
::std::string* RemoteControl::mutable_protocolname() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.protocolName)
  return protocolname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_protocolname() {
  // @@protoc_insertion_point(field_release:RemoteControl.protocolName)
  
  return protocolname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_protocolname(::std::string* protocolname) {
  if (protocolname != NULL) {
    
  } else {
    
  }
  protocolname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocolname);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.protocolName)
}

// string timeStamp = 2;
void RemoteControl::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::timestamp() const {
  // @@protoc_insertion_point(field_get:RemoteControl.timeStamp)
  return timestamp_.GetNoArena();
}
void RemoteControl::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.timeStamp)
}
#if LANG_CXX11
void RemoteControl::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.timeStamp)
}
#endif
void RemoteControl::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.timeStamp)
}
void RemoteControl::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.timeStamp)
}
::std::string* RemoteControl::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.timeStamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_timestamp() {
  // @@protoc_insertion_point(field_release:RemoteControl.timeStamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.timeStamp)
}

// string srcIp = 3;
void RemoteControl::clear_srcip() {
  srcip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::srcip() const {
  // @@protoc_insertion_point(field_get:RemoteControl.srcIp)
  return srcip_.GetNoArena();
}
void RemoteControl::set_srcip(const ::std::string& value) {
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.srcIp)
}
#if LANG_CXX11
void RemoteControl::set_srcip(::std::string&& value) {
  
  srcip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.srcIp)
}
#endif
void RemoteControl::set_srcip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.srcIp)
}
void RemoteControl::set_srcip(const char* value, size_t size) {
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.srcIp)
}
::std::string* RemoteControl::mutable_srcip() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.srcIp)
  return srcip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_srcip() {
  // @@protoc_insertion_point(field_release:RemoteControl.srcIp)
  
  return srcip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_srcip(::std::string* srcip) {
  if (srcip != NULL) {
    
  } else {
    
  }
  srcip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcip);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.srcIp)
}

// string srcDevice = 4;
void RemoteControl::clear_srcdevice() {
  srcdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::srcdevice() const {
  // @@protoc_insertion_point(field_get:RemoteControl.srcDevice)
  return srcdevice_.GetNoArena();
}
void RemoteControl::set_srcdevice(const ::std::string& value) {
  
  srcdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.srcDevice)
}
#if LANG_CXX11
void RemoteControl::set_srcdevice(::std::string&& value) {
  
  srcdevice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.srcDevice)
}
#endif
void RemoteControl::set_srcdevice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srcdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.srcDevice)
}
void RemoteControl::set_srcdevice(const char* value, size_t size) {
  
  srcdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.srcDevice)
}
::std::string* RemoteControl::mutable_srcdevice() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.srcDevice)
  return srcdevice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_srcdevice() {
  // @@protoc_insertion_point(field_release:RemoteControl.srcDevice)
  
  return srcdevice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_srcdevice(::std::string* srcdevice) {
  if (srcdevice != NULL) {
    
  } else {
    
  }
  srcdevice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcdevice);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.srcDevice)
}

// string dstIp = 5;
void RemoteControl::clear_dstip() {
  dstip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::dstip() const {
  // @@protoc_insertion_point(field_get:RemoteControl.dstIp)
  return dstip_.GetNoArena();
}
void RemoteControl::set_dstip(const ::std::string& value) {
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.dstIp)
}
#if LANG_CXX11
void RemoteControl::set_dstip(::std::string&& value) {
  
  dstip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.dstIp)
}
#endif
void RemoteControl::set_dstip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.dstIp)
}
void RemoteControl::set_dstip(const char* value, size_t size) {
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.dstIp)
}
::std::string* RemoteControl::mutable_dstip() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.dstIp)
  return dstip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_dstip() {
  // @@protoc_insertion_point(field_release:RemoteControl.dstIp)
  
  return dstip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_dstip(::std::string* dstip) {
  if (dstip != NULL) {
    
  } else {
    
  }
  dstip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstip);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.dstIp)
}

// string dstDevice = 6;
void RemoteControl::clear_dstdevice() {
  dstdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::dstdevice() const {
  // @@protoc_insertion_point(field_get:RemoteControl.dstDevice)
  return dstdevice_.GetNoArena();
}
void RemoteControl::set_dstdevice(const ::std::string& value) {
  
  dstdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.dstDevice)
}
#if LANG_CXX11
void RemoteControl::set_dstdevice(::std::string&& value) {
  
  dstdevice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.dstDevice)
}
#endif
void RemoteControl::set_dstdevice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dstdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.dstDevice)
}
void RemoteControl::set_dstdevice(const char* value, size_t size) {
  
  dstdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.dstDevice)
}
::std::string* RemoteControl::mutable_dstdevice() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.dstDevice)
  return dstdevice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_dstdevice() {
  // @@protoc_insertion_point(field_release:RemoteControl.dstDevice)
  
  return dstdevice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_dstdevice(::std::string* dstdevice) {
  if (dstdevice != NULL) {
    
  } else {
    
  }
  dstdevice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstdevice);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.dstDevice)
}

// string iedName = 7;
void RemoteControl::clear_iedname() {
  iedname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::iedname() const {
  // @@protoc_insertion_point(field_get:RemoteControl.iedName)
  return iedname_.GetNoArena();
}
void RemoteControl::set_iedname(const ::std::string& value) {
  
  iedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.iedName)
}
#if LANG_CXX11
void RemoteControl::set_iedname(::std::string&& value) {
  
  iedname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.iedName)
}
#endif
void RemoteControl::set_iedname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.iedName)
}
void RemoteControl::set_iedname(const char* value, size_t size) {
  
  iedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.iedName)
}
::std::string* RemoteControl::mutable_iedname() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.iedName)
  return iedname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_iedname() {
  // @@protoc_insertion_point(field_release:RemoteControl.iedName)
  
  return iedname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_iedname(::std::string* iedname) {
  if (iedname != NULL) {
    
  } else {
    
  }
  iedname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iedname);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.iedName)
}

// string pointName = 8;
void RemoteControl::clear_pointname() {
  pointname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::pointname() const {
  // @@protoc_insertion_point(field_get:RemoteControl.pointName)
  return pointname_.GetNoArena();
}
void RemoteControl::set_pointname(const ::std::string& value) {
  
  pointname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.pointName)
}
#if LANG_CXX11
void RemoteControl::set_pointname(::std::string&& value) {
  
  pointname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.pointName)
}
#endif
void RemoteControl::set_pointname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.pointName)
}
void RemoteControl::set_pointname(const char* value, size_t size) {
  
  pointname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.pointName)
}
::std::string* RemoteControl::mutable_pointname() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.pointName)
  return pointname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_pointname() {
  // @@protoc_insertion_point(field_release:RemoteControl.pointName)
  
  return pointname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_pointname(::std::string* pointname) {
  if (pointname != NULL) {
    
  } else {
    
  }
  pointname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointname);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.pointName)
}

// bytes pointDesc = 9;
void RemoteControl::clear_pointdesc() {
  pointdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoteControl::pointdesc() const {
  // @@protoc_insertion_point(field_get:RemoteControl.pointDesc)
  return pointdesc_.GetNoArena();
}
void RemoteControl::set_pointdesc(const ::std::string& value) {
  
  pointdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoteControl.pointDesc)
}
#if LANG_CXX11
void RemoteControl::set_pointdesc(::std::string&& value) {
  
  pointdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoteControl.pointDesc)
}
#endif
void RemoteControl::set_pointdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pointdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoteControl.pointDesc)
}
void RemoteControl::set_pointdesc(const void* value, size_t size) {
  
  pointdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoteControl.pointDesc)
}
::std::string* RemoteControl::mutable_pointdesc() {
  
  // @@protoc_insertion_point(field_mutable:RemoteControl.pointDesc)
  return pointdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteControl::release_pointdesc() {
  // @@protoc_insertion_point(field_release:RemoteControl.pointDesc)
  
  return pointdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteControl::set_allocated_pointdesc(::std::string* pointdesc) {
  if (pointdesc != NULL) {
    
  } else {
    
  }
  pointdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pointdesc);
  // @@protoc_insertion_point(field_set_allocated:RemoteControl.pointDesc)
}

// int32 result = 10;
void RemoteControl::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RemoteControl::result() const {
  // @@protoc_insertion_point(field_get:RemoteControl.result)
  return result_;
}
void RemoteControl::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.result)
}

// int32 deviceNo = 11;
void RemoteControl::clear_deviceno() {
  deviceno_ = 0;
}
::google::protobuf::int32 RemoteControl::deviceno() const {
  // @@protoc_insertion_point(field_get:RemoteControl.deviceNo)
  return deviceno_;
}
void RemoteControl::set_deviceno(::google::protobuf::int32 value) {
  
  deviceno_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.deviceNo)
}

// int32 pointNo = 12;
void RemoteControl::clear_pointno() {
  pointno_ = 0;
}
::google::protobuf::int32 RemoteControl::pointno() const {
  // @@protoc_insertion_point(field_get:RemoteControl.pointNo)
  return pointno_;
}
void RemoteControl::set_pointno(::google::protobuf::int32 value) {
  
  pointno_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.pointNo)
}

// int32 sbo = 13;
void RemoteControl::clear_sbo() {
  sbo_ = 0;
}
::google::protobuf::int32 RemoteControl::sbo() const {
  // @@protoc_insertion_point(field_get:RemoteControl.sbo)
  return sbo_;
}
void RemoteControl::set_sbo(::google::protobuf::int32 value) {
  
  sbo_ = value;
  // @@protoc_insertion_point(field_set:RemoteControl.sbo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtdbMessage::kFromObjectFieldNumber;
const int RtdbMessage::kToObjectFieldNumber;
const int RtdbMessage::kFromObjectTypeFieldNumber;
const int RtdbMessage::kToObjectTypeFieldNumber;
const int RtdbMessage::kMessageTypeFieldNumber;
const int RtdbMessage::kTransactionIdFieldNumber;
const int RtdbMessage::kLogRequestFieldNumber;
const int RtdbMessage::kRealLogResponseFieldNumber;
const int RtdbMessage::kHisLogQueryFieldNumber;
const int RtdbMessage::kHisLogResponseFieldNumber;
const int RtdbMessage::kNetCardInfoRequestFieldNumber;
const int RtdbMessage::kNetCardInfoResponseFieldNumber;
const int RtdbMessage::kProcessDataFieldNumber;
const int RtdbMessage::kProcessCtrlFieldNumber;
const int RtdbMessage::kRealPointValueFieldNumber;
const int RtdbMessage::kHeartBeatMessageFieldNumber;
const int RtdbMessage::kAlarmMessageFieldNumber;
const int RtdbMessage::kCommunicationPairFieldNumber;
const int RtdbMessage::kFlowThresholdFieldNumber;
const int RtdbMessage::kAlarmDataMsgFieldNumber;
const int RtdbMessage::kUpRealPointValueFieldNumber;
const int RtdbMessage::kRemoteControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtdbMessage::RtdbMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RtdbMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RtdbMessage)
}
RtdbMessage::RtdbMessage(const RtdbMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logrequest()) {
    logrequest_ = new ::LogRequest(*from.logrequest_);
  } else {
    logrequest_ = NULL;
  }
  if (from.has_reallogresponse()) {
    reallogresponse_ = new ::RealLogResponse(*from.reallogresponse_);
  } else {
    reallogresponse_ = NULL;
  }
  if (from.has_hislogquery()) {
    hislogquery_ = new ::LogQuery(*from.hislogquery_);
  } else {
    hislogquery_ = NULL;
  }
  if (from.has_hislogresponse()) {
    hislogresponse_ = new ::HisLogResponse(*from.hislogresponse_);
  } else {
    hislogresponse_ = NULL;
  }
  if (from.has_netcardinforequest()) {
    netcardinforequest_ = new ::NetcardInfoRequest(*from.netcardinforequest_);
  } else {
    netcardinforequest_ = NULL;
  }
  if (from.has_netcardinforesponse()) {
    netcardinforesponse_ = new ::NetcardInfoResponse(*from.netcardinforesponse_);
  } else {
    netcardinforesponse_ = NULL;
  }
  if (from.has_processdata()) {
    processdata_ = new ::ProcessData(*from.processdata_);
  } else {
    processdata_ = NULL;
  }
  if (from.has_processctrl()) {
    processctrl_ = new ::ProcessCtrl(*from.processctrl_);
  } else {
    processctrl_ = NULL;
  }
  if (from.has_realpointvalue()) {
    realpointvalue_ = new ::RealPointValue(*from.realpointvalue_);
  } else {
    realpointvalue_ = NULL;
  }
  if (from.has_heartbeatmessage()) {
    heartbeatmessage_ = new ::HeartBeatMessage(*from.heartbeatmessage_);
  } else {
    heartbeatmessage_ = NULL;
  }
  if (from.has_alarmmessage()) {
    alarmmessage_ = new ::AlarmMessage(*from.alarmmessage_);
  } else {
    alarmmessage_ = NULL;
  }
  if (from.has_communicationpair()) {
    communicationpair_ = new ::CommunicationPair(*from.communicationpair_);
  } else {
    communicationpair_ = NULL;
  }
  if (from.has_flowthreshold()) {
    flowthreshold_ = new ::FlowThreshold(*from.flowthreshold_);
  } else {
    flowthreshold_ = NULL;
  }
  if (from.has_alarmdatamsg()) {
    alarmdatamsg_ = new ::AlarmDataMsg(*from.alarmdatamsg_);
  } else {
    alarmdatamsg_ = NULL;
  }
  if (from.has_uprealpointvalue()) {
    uprealpointvalue_ = new ::UPRealPointValue(*from.uprealpointvalue_);
  } else {
    uprealpointvalue_ = NULL;
  }
  if (from.has_remotecontrol()) {
    remotecontrol_ = new ::RemoteControl(*from.remotecontrol_);
  } else {
    remotecontrol_ = NULL;
  }
  ::memcpy(&fromobject_, &from.fromobject_,
    reinterpret_cast<char*>(&transactionid_) -
    reinterpret_cast<char*>(&fromobject_) + sizeof(transactionid_));
  // @@protoc_insertion_point(copy_constructor:RtdbMessage)
}

void RtdbMessage::SharedCtor() {
  ::memset(&logrequest_, 0, reinterpret_cast<char*>(&transactionid_) -
    reinterpret_cast<char*>(&logrequest_) + sizeof(transactionid_));
  _cached_size_ = 0;
}

RtdbMessage::~RtdbMessage() {
  // @@protoc_insertion_point(destructor:RtdbMessage)
  SharedDtor();
}

void RtdbMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete logrequest_;
  }
  if (this != internal_default_instance()) {
    delete reallogresponse_;
  }
  if (this != internal_default_instance()) {
    delete hislogquery_;
  }
  if (this != internal_default_instance()) {
    delete hislogresponse_;
  }
  if (this != internal_default_instance()) {
    delete netcardinforequest_;
  }
  if (this != internal_default_instance()) {
    delete netcardinforesponse_;
  }
  if (this != internal_default_instance()) {
    delete processdata_;
  }
  if (this != internal_default_instance()) {
    delete processctrl_;
  }
  if (this != internal_default_instance()) {
    delete realpointvalue_;
  }
  if (this != internal_default_instance()) {
    delete heartbeatmessage_;
  }
  if (this != internal_default_instance()) {
    delete alarmmessage_;
  }
  if (this != internal_default_instance()) {
    delete communicationpair_;
  }
  if (this != internal_default_instance()) {
    delete flowthreshold_;
  }
  if (this != internal_default_instance()) {
    delete alarmdatamsg_;
  }
  if (this != internal_default_instance()) {
    delete uprealpointvalue_;
  }
  if (this != internal_default_instance()) {
    delete remotecontrol_;
  }
}

void RtdbMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtdbMessage& RtdbMessage::default_instance() {
  protobuf_RtdbMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RtdbMessage* RtdbMessage::New(::google::protobuf::Arena* arena) const {
  RtdbMessage* n = new RtdbMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtdbMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RtdbMessage)
  if (GetArenaNoVirtual() == NULL && logrequest_ != NULL) {
    delete logrequest_;
  }
  logrequest_ = NULL;
  if (GetArenaNoVirtual() == NULL && reallogresponse_ != NULL) {
    delete reallogresponse_;
  }
  reallogresponse_ = NULL;
  if (GetArenaNoVirtual() == NULL && hislogquery_ != NULL) {
    delete hislogquery_;
  }
  hislogquery_ = NULL;
  if (GetArenaNoVirtual() == NULL && hislogresponse_ != NULL) {
    delete hislogresponse_;
  }
  hislogresponse_ = NULL;
  if (GetArenaNoVirtual() == NULL && netcardinforequest_ != NULL) {
    delete netcardinforequest_;
  }
  netcardinforequest_ = NULL;
  if (GetArenaNoVirtual() == NULL && netcardinforesponse_ != NULL) {
    delete netcardinforesponse_;
  }
  netcardinforesponse_ = NULL;
  if (GetArenaNoVirtual() == NULL && processdata_ != NULL) {
    delete processdata_;
  }
  processdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && processctrl_ != NULL) {
    delete processctrl_;
  }
  processctrl_ = NULL;
  if (GetArenaNoVirtual() == NULL && realpointvalue_ != NULL) {
    delete realpointvalue_;
  }
  realpointvalue_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeatmessage_ != NULL) {
    delete heartbeatmessage_;
  }
  heartbeatmessage_ = NULL;
  if (GetArenaNoVirtual() == NULL && alarmmessage_ != NULL) {
    delete alarmmessage_;
  }
  alarmmessage_ = NULL;
  if (GetArenaNoVirtual() == NULL && communicationpair_ != NULL) {
    delete communicationpair_;
  }
  communicationpair_ = NULL;
  if (GetArenaNoVirtual() == NULL && flowthreshold_ != NULL) {
    delete flowthreshold_;
  }
  flowthreshold_ = NULL;
  if (GetArenaNoVirtual() == NULL && alarmdatamsg_ != NULL) {
    delete alarmdatamsg_;
  }
  alarmdatamsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && uprealpointvalue_ != NULL) {
    delete uprealpointvalue_;
  }
  uprealpointvalue_ = NULL;
  if (GetArenaNoVirtual() == NULL && remotecontrol_ != NULL) {
    delete remotecontrol_;
  }
  remotecontrol_ = NULL;
  ::memset(&fromobject_, 0, reinterpret_cast<char*>(&transactionid_) -
    reinterpret_cast<char*>(&fromobject_) + sizeof(transactionid_));
}

bool RtdbMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RtdbMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fromObject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromobject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 toObject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toobject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ObjectType fromObjectType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fromobjecttype(static_cast< ::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ObjectType toObjectType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_toobjecttype(static_cast< ::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RtdbMessageType messageType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_messagetype(static_cast< ::RtdbMessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 transactionId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transactionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LogRequest logRequest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RealLogResponse realLogResponse = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reallogresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LogQuery hisLogQuery = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hislogquery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HisLogResponse hisLogResponse = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hislogresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetcardInfoRequest netCardInfoRequest = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netcardinforequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetcardInfoResponse netCardInfoResponse = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netcardinforesponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProcessData processData = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProcessCtrl processCtrl = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processctrl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RealPointValue realPointValue = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realpointvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HeartBeatMessage heartBeatMessage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeatmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AlarmMessage alarmMessage = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CommunicationPair CommunicationPair = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_communicationpair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FlowThreshold flowThreshold = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flowthreshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AlarmDataMsg alarmDataMsg = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmdatamsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .UPRealPointValue upRealPointValue = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uprealpointvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RemoteControl remoteControl = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remotecontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RtdbMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RtdbMessage)
  return false;
#undef DO_
}

void RtdbMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RtdbMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fromObject = 1;
  if (this->fromobject() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromobject(), output);
  }

  // int32 toObject = 2;
  if (this->toobject() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->toobject(), output);
  }

  // .ObjectType fromObjectType = 3;
  if (this->fromobjecttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fromobjecttype(), output);
  }

  // .ObjectType toObjectType = 4;
  if (this->toobjecttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->toobjecttype(), output);
  }

  // .RtdbMessageType messageType = 5;
  if (this->messagetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->messagetype(), output);
  }

  // int32 transactionId = 6;
  if (this->transactionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->transactionid(), output);
  }

  // .LogRequest logRequest = 8;
  if (this->has_logrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->logrequest_, output);
  }

  // .RealLogResponse realLogResponse = 9;
  if (this->has_reallogresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->reallogresponse_, output);
  }

  // .LogQuery hisLogQuery = 10;
  if (this->has_hislogquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->hislogquery_, output);
  }

  // .HisLogResponse hisLogResponse = 11;
  if (this->has_hislogresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->hislogresponse_, output);
  }

  // .NetcardInfoRequest netCardInfoRequest = 12;
  if (this->has_netcardinforequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->netcardinforequest_, output);
  }

  // .NetcardInfoResponse netCardInfoResponse = 13;
  if (this->has_netcardinforesponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->netcardinforesponse_, output);
  }

  // .ProcessData processData = 14;
  if (this->has_processdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->processdata_, output);
  }

  // .ProcessCtrl processCtrl = 15;
  if (this->has_processctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->processctrl_, output);
  }

  // .RealPointValue realPointValue = 16;
  if (this->has_realpointvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->realpointvalue_, output);
  }

  // .HeartBeatMessage heartBeatMessage = 17;
  if (this->has_heartbeatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->heartbeatmessage_, output);
  }

  // .AlarmMessage alarmMessage = 18;
  if (this->has_alarmmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->alarmmessage_, output);
  }

  // .CommunicationPair CommunicationPair = 19;
  if (this->has_communicationpair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, *this->communicationpair_, output);
  }

  // .FlowThreshold flowThreshold = 20;
  if (this->has_flowthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *this->flowthreshold_, output);
  }

  // .AlarmDataMsg alarmDataMsg = 21;
  if (this->has_alarmdatamsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->alarmdatamsg_, output);
  }

  // .UPRealPointValue upRealPointValue = 22;
  if (this->has_uprealpointvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->uprealpointvalue_, output);
  }

  // .RemoteControl remoteControl = 23;
  if (this->has_remotecontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, *this->remotecontrol_, output);
  }

  // @@protoc_insertion_point(serialize_end:RtdbMessage)
}

size_t RtdbMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RtdbMessage)
  size_t total_size = 0;

  // .LogRequest logRequest = 8;
  if (this->has_logrequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logrequest_);
  }

  // .RealLogResponse realLogResponse = 9;
  if (this->has_reallogresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reallogresponse_);
  }

  // .LogQuery hisLogQuery = 10;
  if (this->has_hislogquery()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hislogquery_);
  }

  // .HisLogResponse hisLogResponse = 11;
  if (this->has_hislogresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hislogresponse_);
  }

  // .NetcardInfoRequest netCardInfoRequest = 12;
  if (this->has_netcardinforequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->netcardinforequest_);
  }

  // .NetcardInfoResponse netCardInfoResponse = 13;
  if (this->has_netcardinforesponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->netcardinforesponse_);
  }

  // .ProcessData processData = 14;
  if (this->has_processdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->processdata_);
  }

  // .ProcessCtrl processCtrl = 15;
  if (this->has_processctrl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->processctrl_);
  }

  // .RealPointValue realPointValue = 16;
  if (this->has_realpointvalue()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->realpointvalue_);
  }

  // .HeartBeatMessage heartBeatMessage = 17;
  if (this->has_heartbeatmessage()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heartbeatmessage_);
  }

  // .AlarmMessage alarmMessage = 18;
  if (this->has_alarmmessage()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alarmmessage_);
  }

  // .CommunicationPair CommunicationPair = 19;
  if (this->has_communicationpair()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->communicationpair_);
  }

  // .FlowThreshold flowThreshold = 20;
  if (this->has_flowthreshold()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->flowthreshold_);
  }

  // .AlarmDataMsg alarmDataMsg = 21;
  if (this->has_alarmdatamsg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alarmdatamsg_);
  }

  // .UPRealPointValue upRealPointValue = 22;
  if (this->has_uprealpointvalue()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uprealpointvalue_);
  }

  // .RemoteControl remoteControl = 23;
  if (this->has_remotecontrol()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remotecontrol_);
  }

  // int32 fromObject = 1;
  if (this->fromobject() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fromobject());
  }

  // int32 toObject = 2;
  if (this->toobject() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toobject());
  }

  // .ObjectType fromObjectType = 3;
  if (this->fromobjecttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fromobjecttype());
  }

  // .ObjectType toObjectType = 4;
  if (this->toobjecttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->toobjecttype());
  }

  // .RtdbMessageType messageType = 5;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }

  // int32 transactionId = 6;
  if (this->transactionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transactionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtdbMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtdbMessage*>(&from));
}

void RtdbMessage::MergeFrom(const RtdbMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RtdbMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logrequest()) {
    mutable_logrequest()->::LogRequest::MergeFrom(from.logrequest());
  }
  if (from.has_reallogresponse()) {
    mutable_reallogresponse()->::RealLogResponse::MergeFrom(from.reallogresponse());
  }
  if (from.has_hislogquery()) {
    mutable_hislogquery()->::LogQuery::MergeFrom(from.hislogquery());
  }
  if (from.has_hislogresponse()) {
    mutable_hislogresponse()->::HisLogResponse::MergeFrom(from.hislogresponse());
  }
  if (from.has_netcardinforequest()) {
    mutable_netcardinforequest()->::NetcardInfoRequest::MergeFrom(from.netcardinforequest());
  }
  if (from.has_netcardinforesponse()) {
    mutable_netcardinforesponse()->::NetcardInfoResponse::MergeFrom(from.netcardinforesponse());
  }
  if (from.has_processdata()) {
    mutable_processdata()->::ProcessData::MergeFrom(from.processdata());
  }
  if (from.has_processctrl()) {
    mutable_processctrl()->::ProcessCtrl::MergeFrom(from.processctrl());
  }
  if (from.has_realpointvalue()) {
    mutable_realpointvalue()->::RealPointValue::MergeFrom(from.realpointvalue());
  }
  if (from.has_heartbeatmessage()) {
    mutable_heartbeatmessage()->::HeartBeatMessage::MergeFrom(from.heartbeatmessage());
  }
  if (from.has_alarmmessage()) {
    mutable_alarmmessage()->::AlarmMessage::MergeFrom(from.alarmmessage());
  }
  if (from.has_communicationpair()) {
    mutable_communicationpair()->::CommunicationPair::MergeFrom(from.communicationpair());
  }
  if (from.has_flowthreshold()) {
    mutable_flowthreshold()->::FlowThreshold::MergeFrom(from.flowthreshold());
  }
  if (from.has_alarmdatamsg()) {
    mutable_alarmdatamsg()->::AlarmDataMsg::MergeFrom(from.alarmdatamsg());
  }
  if (from.has_uprealpointvalue()) {
    mutable_uprealpointvalue()->::UPRealPointValue::MergeFrom(from.uprealpointvalue());
  }
  if (from.has_remotecontrol()) {
    mutable_remotecontrol()->::RemoteControl::MergeFrom(from.remotecontrol());
  }
  if (from.fromobject() != 0) {
    set_fromobject(from.fromobject());
  }
  if (from.toobject() != 0) {
    set_toobject(from.toobject());
  }
  if (from.fromobjecttype() != 0) {
    set_fromobjecttype(from.fromobjecttype());
  }
  if (from.toobjecttype() != 0) {
    set_toobjecttype(from.toobjecttype());
  }
  if (from.messagetype() != 0) {
    set_messagetype(from.messagetype());
  }
  if (from.transactionid() != 0) {
    set_transactionid(from.transactionid());
  }
}

void RtdbMessage::CopyFrom(const RtdbMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RtdbMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtdbMessage::IsInitialized() const {
  return true;
}

void RtdbMessage::Swap(RtdbMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtdbMessage::InternalSwap(RtdbMessage* other) {
  std::swap(logrequest_, other->logrequest_);
  std::swap(reallogresponse_, other->reallogresponse_);
  std::swap(hislogquery_, other->hislogquery_);
  std::swap(hislogresponse_, other->hislogresponse_);
  std::swap(netcardinforequest_, other->netcardinforequest_);
  std::swap(netcardinforesponse_, other->netcardinforesponse_);
  std::swap(processdata_, other->processdata_);
  std::swap(processctrl_, other->processctrl_);
  std::swap(realpointvalue_, other->realpointvalue_);
  std::swap(heartbeatmessage_, other->heartbeatmessage_);
  std::swap(alarmmessage_, other->alarmmessage_);
  std::swap(communicationpair_, other->communicationpair_);
  std::swap(flowthreshold_, other->flowthreshold_);
  std::swap(alarmdatamsg_, other->alarmdatamsg_);
  std::swap(uprealpointvalue_, other->uprealpointvalue_);
  std::swap(remotecontrol_, other->remotecontrol_);
  std::swap(fromobject_, other->fromobject_);
  std::swap(toobject_, other->toobject_);
  std::swap(fromobjecttype_, other->fromobjecttype_);
  std::swap(toobjecttype_, other->toobjecttype_);
  std::swap(messagetype_, other->messagetype_);
  std::swap(transactionid_, other->transactionid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RtdbMessage::GetTypeName() const {
  return "RtdbMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtdbMessage

// int32 fromObject = 1;
void RtdbMessage::clear_fromobject() {
  fromobject_ = 0;
}
::google::protobuf::int32 RtdbMessage::fromobject() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.fromObject)
  return fromobject_;
}
void RtdbMessage::set_fromobject(::google::protobuf::int32 value) {
  
  fromobject_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.fromObject)
}

// int32 toObject = 2;
void RtdbMessage::clear_toobject() {
  toobject_ = 0;
}
::google::protobuf::int32 RtdbMessage::toobject() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.toObject)
  return toobject_;
}
void RtdbMessage::set_toobject(::google::protobuf::int32 value) {
  
  toobject_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.toObject)
}

// .ObjectType fromObjectType = 3;
void RtdbMessage::clear_fromobjecttype() {
  fromobjecttype_ = 0;
}
::ObjectType RtdbMessage::fromobjecttype() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.fromObjectType)
  return static_cast< ::ObjectType >(fromobjecttype_);
}
void RtdbMessage::set_fromobjecttype(::ObjectType value) {
  
  fromobjecttype_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.fromObjectType)
}

// .ObjectType toObjectType = 4;
void RtdbMessage::clear_toobjecttype() {
  toobjecttype_ = 0;
}
::ObjectType RtdbMessage::toobjecttype() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.toObjectType)
  return static_cast< ::ObjectType >(toobjecttype_);
}
void RtdbMessage::set_toobjecttype(::ObjectType value) {
  
  toobjecttype_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.toObjectType)
}

// .RtdbMessageType messageType = 5;
void RtdbMessage::clear_messagetype() {
  messagetype_ = 0;
}
::RtdbMessageType RtdbMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.messageType)
  return static_cast< ::RtdbMessageType >(messagetype_);
}
void RtdbMessage::set_messagetype(::RtdbMessageType value) {
  
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.messageType)
}

// int32 transactionId = 6;
void RtdbMessage::clear_transactionid() {
  transactionid_ = 0;
}
::google::protobuf::int32 RtdbMessage::transactionid() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.transactionId)
  return transactionid_;
}
void RtdbMessage::set_transactionid(::google::protobuf::int32 value) {
  
  transactionid_ = value;
  // @@protoc_insertion_point(field_set:RtdbMessage.transactionId)
}

// .LogRequest logRequest = 8;
bool RtdbMessage::has_logrequest() const {
  return this != internal_default_instance() && logrequest_ != NULL;
}
void RtdbMessage::clear_logrequest() {
  if (GetArenaNoVirtual() == NULL && logrequest_ != NULL) delete logrequest_;
  logrequest_ = NULL;
}
const ::LogRequest& RtdbMessage::logrequest() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.logRequest)
  return logrequest_ != NULL ? *logrequest_
                         : *::LogRequest::internal_default_instance();
}
::LogRequest* RtdbMessage::mutable_logrequest() {
  
  if (logrequest_ == NULL) {
    logrequest_ = new ::LogRequest;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.logRequest)
  return logrequest_;
}
::LogRequest* RtdbMessage::release_logrequest() {
  // @@protoc_insertion_point(field_release:RtdbMessage.logRequest)
  
  ::LogRequest* temp = logrequest_;
  logrequest_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_logrequest(::LogRequest* logrequest) {
  delete logrequest_;
  logrequest_ = logrequest;
  if (logrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.logRequest)
}

// .RealLogResponse realLogResponse = 9;
bool RtdbMessage::has_reallogresponse() const {
  return this != internal_default_instance() && reallogresponse_ != NULL;
}
void RtdbMessage::clear_reallogresponse() {
  if (GetArenaNoVirtual() == NULL && reallogresponse_ != NULL) delete reallogresponse_;
  reallogresponse_ = NULL;
}
const ::RealLogResponse& RtdbMessage::reallogresponse() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.realLogResponse)
  return reallogresponse_ != NULL ? *reallogresponse_
                         : *::RealLogResponse::internal_default_instance();
}
::RealLogResponse* RtdbMessage::mutable_reallogresponse() {
  
  if (reallogresponse_ == NULL) {
    reallogresponse_ = new ::RealLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.realLogResponse)
  return reallogresponse_;
}
::RealLogResponse* RtdbMessage::release_reallogresponse() {
  // @@protoc_insertion_point(field_release:RtdbMessage.realLogResponse)
  
  ::RealLogResponse* temp = reallogresponse_;
  reallogresponse_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_reallogresponse(::RealLogResponse* reallogresponse) {
  delete reallogresponse_;
  reallogresponse_ = reallogresponse;
  if (reallogresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.realLogResponse)
}

// .LogQuery hisLogQuery = 10;
bool RtdbMessage::has_hislogquery() const {
  return this != internal_default_instance() && hislogquery_ != NULL;
}
void RtdbMessage::clear_hislogquery() {
  if (GetArenaNoVirtual() == NULL && hislogquery_ != NULL) delete hislogquery_;
  hislogquery_ = NULL;
}
const ::LogQuery& RtdbMessage::hislogquery() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.hisLogQuery)
  return hislogquery_ != NULL ? *hislogquery_
                         : *::LogQuery::internal_default_instance();
}
::LogQuery* RtdbMessage::mutable_hislogquery() {
  
  if (hislogquery_ == NULL) {
    hislogquery_ = new ::LogQuery;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.hisLogQuery)
  return hislogquery_;
}
::LogQuery* RtdbMessage::release_hislogquery() {
  // @@protoc_insertion_point(field_release:RtdbMessage.hisLogQuery)
  
  ::LogQuery* temp = hislogquery_;
  hislogquery_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_hislogquery(::LogQuery* hislogquery) {
  delete hislogquery_;
  hislogquery_ = hislogquery;
  if (hislogquery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.hisLogQuery)
}

// .HisLogResponse hisLogResponse = 11;
bool RtdbMessage::has_hislogresponse() const {
  return this != internal_default_instance() && hislogresponse_ != NULL;
}
void RtdbMessage::clear_hislogresponse() {
  if (GetArenaNoVirtual() == NULL && hislogresponse_ != NULL) delete hislogresponse_;
  hislogresponse_ = NULL;
}
const ::HisLogResponse& RtdbMessage::hislogresponse() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.hisLogResponse)
  return hislogresponse_ != NULL ? *hislogresponse_
                         : *::HisLogResponse::internal_default_instance();
}
::HisLogResponse* RtdbMessage::mutable_hislogresponse() {
  
  if (hislogresponse_ == NULL) {
    hislogresponse_ = new ::HisLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.hisLogResponse)
  return hislogresponse_;
}
::HisLogResponse* RtdbMessage::release_hislogresponse() {
  // @@protoc_insertion_point(field_release:RtdbMessage.hisLogResponse)
  
  ::HisLogResponse* temp = hislogresponse_;
  hislogresponse_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_hislogresponse(::HisLogResponse* hislogresponse) {
  delete hislogresponse_;
  hislogresponse_ = hislogresponse;
  if (hislogresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.hisLogResponse)
}

// .NetcardInfoRequest netCardInfoRequest = 12;
bool RtdbMessage::has_netcardinforequest() const {
  return this != internal_default_instance() && netcardinforequest_ != NULL;
}
void RtdbMessage::clear_netcardinforequest() {
  if (GetArenaNoVirtual() == NULL && netcardinforequest_ != NULL) delete netcardinforequest_;
  netcardinforequest_ = NULL;
}
const ::NetcardInfoRequest& RtdbMessage::netcardinforequest() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.netCardInfoRequest)
  return netcardinforequest_ != NULL ? *netcardinforequest_
                         : *::NetcardInfoRequest::internal_default_instance();
}
::NetcardInfoRequest* RtdbMessage::mutable_netcardinforequest() {
  
  if (netcardinforequest_ == NULL) {
    netcardinforequest_ = new ::NetcardInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.netCardInfoRequest)
  return netcardinforequest_;
}
::NetcardInfoRequest* RtdbMessage::release_netcardinforequest() {
  // @@protoc_insertion_point(field_release:RtdbMessage.netCardInfoRequest)
  
  ::NetcardInfoRequest* temp = netcardinforequest_;
  netcardinforequest_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_netcardinforequest(::NetcardInfoRequest* netcardinforequest) {
  delete netcardinforequest_;
  netcardinforequest_ = netcardinforequest;
  if (netcardinforequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.netCardInfoRequest)
}

// .NetcardInfoResponse netCardInfoResponse = 13;
bool RtdbMessage::has_netcardinforesponse() const {
  return this != internal_default_instance() && netcardinforesponse_ != NULL;
}
void RtdbMessage::clear_netcardinforesponse() {
  if (GetArenaNoVirtual() == NULL && netcardinforesponse_ != NULL) delete netcardinforesponse_;
  netcardinforesponse_ = NULL;
}
const ::NetcardInfoResponse& RtdbMessage::netcardinforesponse() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.netCardInfoResponse)
  return netcardinforesponse_ != NULL ? *netcardinforesponse_
                         : *::NetcardInfoResponse::internal_default_instance();
}
::NetcardInfoResponse* RtdbMessage::mutable_netcardinforesponse() {
  
  if (netcardinforesponse_ == NULL) {
    netcardinforesponse_ = new ::NetcardInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.netCardInfoResponse)
  return netcardinforesponse_;
}
::NetcardInfoResponse* RtdbMessage::release_netcardinforesponse() {
  // @@protoc_insertion_point(field_release:RtdbMessage.netCardInfoResponse)
  
  ::NetcardInfoResponse* temp = netcardinforesponse_;
  netcardinforesponse_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_netcardinforesponse(::NetcardInfoResponse* netcardinforesponse) {
  delete netcardinforesponse_;
  netcardinforesponse_ = netcardinforesponse;
  if (netcardinforesponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.netCardInfoResponse)
}

// .ProcessData processData = 14;
bool RtdbMessage::has_processdata() const {
  return this != internal_default_instance() && processdata_ != NULL;
}
void RtdbMessage::clear_processdata() {
  if (GetArenaNoVirtual() == NULL && processdata_ != NULL) delete processdata_;
  processdata_ = NULL;
}
const ::ProcessData& RtdbMessage::processdata() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.processData)
  return processdata_ != NULL ? *processdata_
                         : *::ProcessData::internal_default_instance();
}
::ProcessData* RtdbMessage::mutable_processdata() {
  
  if (processdata_ == NULL) {
    processdata_ = new ::ProcessData;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.processData)
  return processdata_;
}
::ProcessData* RtdbMessage::release_processdata() {
  // @@protoc_insertion_point(field_release:RtdbMessage.processData)
  
  ::ProcessData* temp = processdata_;
  processdata_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_processdata(::ProcessData* processdata) {
  delete processdata_;
  processdata_ = processdata;
  if (processdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.processData)
}

// .ProcessCtrl processCtrl = 15;
bool RtdbMessage::has_processctrl() const {
  return this != internal_default_instance() && processctrl_ != NULL;
}
void RtdbMessage::clear_processctrl() {
  if (GetArenaNoVirtual() == NULL && processctrl_ != NULL) delete processctrl_;
  processctrl_ = NULL;
}
const ::ProcessCtrl& RtdbMessage::processctrl() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.processCtrl)
  return processctrl_ != NULL ? *processctrl_
                         : *::ProcessCtrl::internal_default_instance();
}
::ProcessCtrl* RtdbMessage::mutable_processctrl() {
  
  if (processctrl_ == NULL) {
    processctrl_ = new ::ProcessCtrl;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.processCtrl)
  return processctrl_;
}
::ProcessCtrl* RtdbMessage::release_processctrl() {
  // @@protoc_insertion_point(field_release:RtdbMessage.processCtrl)
  
  ::ProcessCtrl* temp = processctrl_;
  processctrl_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_processctrl(::ProcessCtrl* processctrl) {
  delete processctrl_;
  processctrl_ = processctrl;
  if (processctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.processCtrl)
}

// .RealPointValue realPointValue = 16;
bool RtdbMessage::has_realpointvalue() const {
  return this != internal_default_instance() && realpointvalue_ != NULL;
}
void RtdbMessage::clear_realpointvalue() {
  if (GetArenaNoVirtual() == NULL && realpointvalue_ != NULL) delete realpointvalue_;
  realpointvalue_ = NULL;
}
const ::RealPointValue& RtdbMessage::realpointvalue() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.realPointValue)
  return realpointvalue_ != NULL ? *realpointvalue_
                         : *::RealPointValue::internal_default_instance();
}
::RealPointValue* RtdbMessage::mutable_realpointvalue() {
  
  if (realpointvalue_ == NULL) {
    realpointvalue_ = new ::RealPointValue;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.realPointValue)
  return realpointvalue_;
}
::RealPointValue* RtdbMessage::release_realpointvalue() {
  // @@protoc_insertion_point(field_release:RtdbMessage.realPointValue)
  
  ::RealPointValue* temp = realpointvalue_;
  realpointvalue_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_realpointvalue(::RealPointValue* realpointvalue) {
  delete realpointvalue_;
  realpointvalue_ = realpointvalue;
  if (realpointvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.realPointValue)
}

// .HeartBeatMessage heartBeatMessage = 17;
bool RtdbMessage::has_heartbeatmessage() const {
  return this != internal_default_instance() && heartbeatmessage_ != NULL;
}
void RtdbMessage::clear_heartbeatmessage() {
  if (GetArenaNoVirtual() == NULL && heartbeatmessage_ != NULL) delete heartbeatmessage_;
  heartbeatmessage_ = NULL;
}
const ::HeartBeatMessage& RtdbMessage::heartbeatmessage() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.heartBeatMessage)
  return heartbeatmessage_ != NULL ? *heartbeatmessage_
                         : *::HeartBeatMessage::internal_default_instance();
}
::HeartBeatMessage* RtdbMessage::mutable_heartbeatmessage() {
  
  if (heartbeatmessage_ == NULL) {
    heartbeatmessage_ = new ::HeartBeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.heartBeatMessage)
  return heartbeatmessage_;
}
::HeartBeatMessage* RtdbMessage::release_heartbeatmessage() {
  // @@protoc_insertion_point(field_release:RtdbMessage.heartBeatMessage)
  
  ::HeartBeatMessage* temp = heartbeatmessage_;
  heartbeatmessage_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_heartbeatmessage(::HeartBeatMessage* heartbeatmessage) {
  delete heartbeatmessage_;
  heartbeatmessage_ = heartbeatmessage;
  if (heartbeatmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.heartBeatMessage)
}

// .AlarmMessage alarmMessage = 18;
bool RtdbMessage::has_alarmmessage() const {
  return this != internal_default_instance() && alarmmessage_ != NULL;
}
void RtdbMessage::clear_alarmmessage() {
  if (GetArenaNoVirtual() == NULL && alarmmessage_ != NULL) delete alarmmessage_;
  alarmmessage_ = NULL;
}
const ::AlarmMessage& RtdbMessage::alarmmessage() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.alarmMessage)
  return alarmmessage_ != NULL ? *alarmmessage_
                         : *::AlarmMessage::internal_default_instance();
}
::AlarmMessage* RtdbMessage::mutable_alarmmessage() {
  
  if (alarmmessage_ == NULL) {
    alarmmessage_ = new ::AlarmMessage;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.alarmMessage)
  return alarmmessage_;
}
::AlarmMessage* RtdbMessage::release_alarmmessage() {
  // @@protoc_insertion_point(field_release:RtdbMessage.alarmMessage)
  
  ::AlarmMessage* temp = alarmmessage_;
  alarmmessage_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_alarmmessage(::AlarmMessage* alarmmessage) {
  delete alarmmessage_;
  alarmmessage_ = alarmmessage;
  if (alarmmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.alarmMessage)
}

// .CommunicationPair CommunicationPair = 19;
bool RtdbMessage::has_communicationpair() const {
  return this != internal_default_instance() && communicationpair_ != NULL;
}
void RtdbMessage::clear_communicationpair() {
  if (GetArenaNoVirtual() == NULL && communicationpair_ != NULL) delete communicationpair_;
  communicationpair_ = NULL;
}
const ::CommunicationPair& RtdbMessage::communicationpair() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.CommunicationPair)
  return communicationpair_ != NULL ? *communicationpair_
                         : *::CommunicationPair::internal_default_instance();
}
::CommunicationPair* RtdbMessage::mutable_communicationpair() {
  
  if (communicationpair_ == NULL) {
    communicationpair_ = new ::CommunicationPair;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.CommunicationPair)
  return communicationpair_;
}
::CommunicationPair* RtdbMessage::release_communicationpair() {
  // @@protoc_insertion_point(field_release:RtdbMessage.CommunicationPair)
  
  ::CommunicationPair* temp = communicationpair_;
  communicationpair_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_communicationpair(::CommunicationPair* communicationpair) {
  delete communicationpair_;
  communicationpair_ = communicationpair;
  if (communicationpair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.CommunicationPair)
}

// .FlowThreshold flowThreshold = 20;
bool RtdbMessage::has_flowthreshold() const {
  return this != internal_default_instance() && flowthreshold_ != NULL;
}
void RtdbMessage::clear_flowthreshold() {
  if (GetArenaNoVirtual() == NULL && flowthreshold_ != NULL) delete flowthreshold_;
  flowthreshold_ = NULL;
}
const ::FlowThreshold& RtdbMessage::flowthreshold() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.flowThreshold)
  return flowthreshold_ != NULL ? *flowthreshold_
                         : *::FlowThreshold::internal_default_instance();
}
::FlowThreshold* RtdbMessage::mutable_flowthreshold() {
  
  if (flowthreshold_ == NULL) {
    flowthreshold_ = new ::FlowThreshold;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.flowThreshold)
  return flowthreshold_;
}
::FlowThreshold* RtdbMessage::release_flowthreshold() {
  // @@protoc_insertion_point(field_release:RtdbMessage.flowThreshold)
  
  ::FlowThreshold* temp = flowthreshold_;
  flowthreshold_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_flowthreshold(::FlowThreshold* flowthreshold) {
  delete flowthreshold_;
  flowthreshold_ = flowthreshold;
  if (flowthreshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.flowThreshold)
}

// .AlarmDataMsg alarmDataMsg = 21;
bool RtdbMessage::has_alarmdatamsg() const {
  return this != internal_default_instance() && alarmdatamsg_ != NULL;
}
void RtdbMessage::clear_alarmdatamsg() {
  if (GetArenaNoVirtual() == NULL && alarmdatamsg_ != NULL) delete alarmdatamsg_;
  alarmdatamsg_ = NULL;
}
const ::AlarmDataMsg& RtdbMessage::alarmdatamsg() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.alarmDataMsg)
  return alarmdatamsg_ != NULL ? *alarmdatamsg_
                         : *::AlarmDataMsg::internal_default_instance();
}
::AlarmDataMsg* RtdbMessage::mutable_alarmdatamsg() {
  
  if (alarmdatamsg_ == NULL) {
    alarmdatamsg_ = new ::AlarmDataMsg;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.alarmDataMsg)
  return alarmdatamsg_;
}
::AlarmDataMsg* RtdbMessage::release_alarmdatamsg() {
  // @@protoc_insertion_point(field_release:RtdbMessage.alarmDataMsg)
  
  ::AlarmDataMsg* temp = alarmdatamsg_;
  alarmdatamsg_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_alarmdatamsg(::AlarmDataMsg* alarmdatamsg) {
  delete alarmdatamsg_;
  alarmdatamsg_ = alarmdatamsg;
  if (alarmdatamsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.alarmDataMsg)
}

// .UPRealPointValue upRealPointValue = 22;
bool RtdbMessage::has_uprealpointvalue() const {
  return this != internal_default_instance() && uprealpointvalue_ != NULL;
}
void RtdbMessage::clear_uprealpointvalue() {
  if (GetArenaNoVirtual() == NULL && uprealpointvalue_ != NULL) delete uprealpointvalue_;
  uprealpointvalue_ = NULL;
}
const ::UPRealPointValue& RtdbMessage::uprealpointvalue() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.upRealPointValue)
  return uprealpointvalue_ != NULL ? *uprealpointvalue_
                         : *::UPRealPointValue::internal_default_instance();
}
::UPRealPointValue* RtdbMessage::mutable_uprealpointvalue() {
  
  if (uprealpointvalue_ == NULL) {
    uprealpointvalue_ = new ::UPRealPointValue;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.upRealPointValue)
  return uprealpointvalue_;
}
::UPRealPointValue* RtdbMessage::release_uprealpointvalue() {
  // @@protoc_insertion_point(field_release:RtdbMessage.upRealPointValue)
  
  ::UPRealPointValue* temp = uprealpointvalue_;
  uprealpointvalue_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_uprealpointvalue(::UPRealPointValue* uprealpointvalue) {
  delete uprealpointvalue_;
  uprealpointvalue_ = uprealpointvalue;
  if (uprealpointvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.upRealPointValue)
}

// .RemoteControl remoteControl = 23;
bool RtdbMessage::has_remotecontrol() const {
  return this != internal_default_instance() && remotecontrol_ != NULL;
}
void RtdbMessage::clear_remotecontrol() {
  if (GetArenaNoVirtual() == NULL && remotecontrol_ != NULL) delete remotecontrol_;
  remotecontrol_ = NULL;
}
const ::RemoteControl& RtdbMessage::remotecontrol() const {
  // @@protoc_insertion_point(field_get:RtdbMessage.remoteControl)
  return remotecontrol_ != NULL ? *remotecontrol_
                         : *::RemoteControl::internal_default_instance();
}
::RemoteControl* RtdbMessage::mutable_remotecontrol() {
  
  if (remotecontrol_ == NULL) {
    remotecontrol_ = new ::RemoteControl;
  }
  // @@protoc_insertion_point(field_mutable:RtdbMessage.remoteControl)
  return remotecontrol_;
}
::RemoteControl* RtdbMessage::release_remotecontrol() {
  // @@protoc_insertion_point(field_release:RtdbMessage.remoteControl)
  
  ::RemoteControl* temp = remotecontrol_;
  remotecontrol_ = NULL;
  return temp;
}
void RtdbMessage::set_allocated_remotecontrol(::RemoteControl* remotecontrol) {
  delete remotecontrol_;
  remotecontrol_ = remotecontrol;
  if (remotecontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RtdbMessage.remoteControl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
